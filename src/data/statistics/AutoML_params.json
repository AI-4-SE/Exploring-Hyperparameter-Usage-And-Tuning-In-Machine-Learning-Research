{
    "TinyViT/data/augmentation/parsers/parser_tfds.py": {
        "tensorflow": {
            "set_visible_devices_16": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Options_216": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputContext_204": {
                "variable": {
                    "value": "input_context",
                    "type": "variable",
                    "possible_values": []
                },
                "num_input_pipelines": {
                    "value": "self.global_num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_pipeline_id": {
                    "value": "global_worker_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.dist_rank * num_workers + worker_info.id",
                            "BinOp"
                        ]
                    ]
                },
                "num_replicas_in_sync": {
                    "value": "self.dist_num_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/tf_preprocessing.py": {
        "tensorflow": {
            "equal_86": {
                "variable": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_93": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_102": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_105": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_115": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_128": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_flip_left_right_136": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_156": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_176": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_64": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_65": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_76": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_77": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_79": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_88": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_103": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_129": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "resize_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ],
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ]
                    ]
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "self._image_bytes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_226": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_215": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_108": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "resize_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ],
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ]
                    ]
                }
            },
            "minimum_121": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "AutoFormer/evolution.py": {
        "torch": {
            "device_462": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_502": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_test, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_508": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_472": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SequentialSampler_499": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_500": {
                "variable": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_531": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vision_TransformerSuper(img_size=args.input_size, patch_size=args.patch_size, embed_dim=cfg.SUPERNET.EMBED_DIM, depth=cfg.SUPERNET.DEPTH, num_heads=cfg.SUPERNET.NUM_HEADS, mlp_ratio=cfg.SUPERNET.MLP_RATIO, qkv_bias=True, drop_rate=args.drop, drop_path_rate=args.drop_path, gp=args.gp, num_classes=args.nb_classes, max_relative_position=args.max_relative_position, relative_position=args.relative_position, change_qkv=args.change_qkv, abs_pos=not args.no_abs_pos)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(self.checkpoint_path)",
                            "Call"
                        ],
                        [
                            "self.vis_dict[cand]",
                            "Subscript"
                        ],
                        [
                            "self.vis_dict[cand]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.output_dir, 'checkpoint-{}.pth.tar'.format(self.epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_491": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_493": {
                "variable": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_496": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_497": {
                "variable": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_542": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/lib/datasets.py": {
        "torch": {}
    },
    "AutoFormer/lib/imagenet_withhold.py": {
        "torch": {}
    },
    "AutoFormer/lib/samplers.py": {
        "torch": {
            "Generator_35": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_38": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/lib/utils.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mem_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_228": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_count_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/module/Linear_super.py": {
        "torch": {
            "linear_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.samples['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.samples['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/module/embedding_super.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.sampled_weight, self.sampled_bias, stride=self.patch_size, padding=self.proj.padding, dilation=self.proj.dilation).flatten(2).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sampled_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.sampled_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.patch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.proj.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.proj.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/module/layernorm_super.py": {
        "torch": {
            "layer_norm_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(self.sample_embed_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.samples['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.samples['bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/module/multihead_super.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.embeddings_table_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(max_relative_position * 2 + 2, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.embeddings_table_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(max_relative_position * 2 + 2, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_44": {
                "variable": {
                    "value": "range_vec_q",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_q - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_45": {
                "variable": {
                    "value": "range_vec_k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_k - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_50": {
                "variable": {
                    "value": "distance_mat_clipped_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_vec_k[None, :] // int(length_q ** 0.5) - range_vec_q[:, None] // int(length_q ** 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.max_relative_position",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_relative_position",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "variable": {
                    "value": "distance_mat_clipped_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_vec_k[None, :] % int(length_q ** 0.5) - range_vec_q[:, None] % int(length_q ** 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.max_relative_position",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_relative_position",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_57": {
                "variable": {
                    "value": "final_mat_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_mat_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_mat_clipped_v + self.max_relative_position + 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(final_mat_v, (1, 0, 1, 0), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(final_mat_v).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_58": {
                "variable": {
                    "value": "final_mat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_mat_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_mat_clipped_h + self.max_relative_position + 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(final_mat_h, (1, 0, 1, 0), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(final_mat_h).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_10": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, -1)",
                            "Call"
                        ],
                        [
                            "x + (attn_1 @ r_p_v).transpose(1, 0).reshape(B, self.sample_num_heads, N, -1).transpose(2, 1).reshape(B, N, -1)",
                            "BinOp"
                        ],
                        [
                            "x * (self.super_embed_dim / self.sample_qk_embed_dim)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "max_relative_position * 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "max_relative_position * 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/module/qkv_super.py": {
        "torch": {
            "cat_75": {
                "variable": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_weight[i:sample_out_dim:3, :] for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.samples['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.samples['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/model/supernet_transformer.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed_super(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[..., :self.sample_embed_dim[0]]",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x * (self.super_mlp_ratio / self.sample_mlp_ratio)",
                            "BinOp"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.sample_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed_super(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[..., :self.sample_embed_dim[0]]",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x * (self.super_mlp_ratio / self.sample_mlp_ratio)",
                            "BinOp"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.sample_attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_278": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed_super(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[..., :self.sample_embed_dim[0]]",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x * (self.super_mlp_ratio / self.sample_mlp_ratio)",
                            "BinOp"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.sample_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed_super(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[..., :self.sample_embed_dim[0]]",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.sample_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x * (self.super_mlp_ratio / self.sample_mlp_ratio)",
                            "BinOp"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.ffn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.sample_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gelu_16": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_165": {
                "input": {
                    "value": "x[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_18": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_51": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "AutoFormer/model/utils.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_85": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/supernet_engine.py": {
        "torch": {
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormer/supernet_train.py": {
        "torch": {
            "device_194": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_198": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SequentialSampler_228": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_229": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_288": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vision_TransformerSuper(img_size=args.input_size, patch_size=args.patch_size, embed_dim=cfg.SUPERNET.EMBED_DIM, depth=cfg.SUPERNET.DEPTH, num_heads=cfg.SUPERNET.NUM_HEADS, mlp_ratio=cfg.SUPERNET.MLP_RATIO, qkv_bias=True, drop_rate=args.drop, drop_path_rate=args.drop_path, gp=args.gp, num_classes=args.nb_classes, max_relative_position=args.max_relative_position, relative_position=args.relative_position, change_qkv=args.change_qkv, abs_pos=not args.no_abs_pos)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_214": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_223": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_226": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_308": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_322": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormerV2/engine.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormerV2/evaluation.py": {
        "torch": {
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SequentialSampler_217": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_254": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SSSTransformer(img_size=args.input_size, patch_size=args.patch_size, num_classes=args.nb_classes, embed_dim=cfg.EMBED_DIM, depths=cfg.DEPTHS, num_heads=cfg.NUM_HEADS, window_size=cfg.WINDOW_SIZE, mlp_ratio=cfg.MLP_RATIO, qkv_bias=True, drop_rate=args.drop, drop_path_rate=args.drop_path, patch_norm=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_212": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_215": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_278": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormerV2/lib/datasets.py": {
        "torch": {}
    },
    "AutoFormerV2/lib/samplers.py": {
        "torch": {
            "Generator_35": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_38": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormerV2/lib/utils.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mem_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_228": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_count_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutoFormerV2/model/SSS.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_86": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_89": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_heads * 32 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_104": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_364": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads[i], window_size=window_size[i], shift_size=0 if i % 2 == 0 else window_size[i] // 2, mlp_ratio=mlp_ratio[i], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_427": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "[96",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_504": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_510": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_529": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_562": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_237": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_501": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_88": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_530": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_501": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "[96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_507": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS/retrain.py": {
        "torch": {
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "net_crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "controller.model_main.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_117": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(controller.model_main.parameters(), lr=config.lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_52": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "resume_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_58": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "{'model_main': controller.model_main.module.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'best_top1': best_top1, 'best_top5': best_top5, 'sta_epoch': epoch + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.path, 'retrain_resume.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "{'model_main': controller.model_main.module.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'best_top1': best_top1, 'best_top5': best_top5, 'sta_epoch': epoch + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.path, 'epoch_{}.pth.tar'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS/search.py": {
        "torch": {
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "net_crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_53": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "param_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.param_pool_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "resume_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_105": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_161": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter * config.search_iter_epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "lr_scheduler_retrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "alpha_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_247": {
                "variable": {
                    "value": "lr_scheduler_retrain",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList()",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters(), 'lr': config.nasnet_lr * 0.1 if config.param_pool_path else config.nasnet_lr}, {'params': controller.module.ensemble_param}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}], lr=config.nasnet_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters(), 'lr': config.nasnet_lr * 0.1 if config.param_pool_path else config.nasnet_lr}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}], lr=config.nasnet_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_249": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter * config.search_iter_epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_205": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.nas_layers[:layer_idx].parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_215": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers[layer_idx].parameters(), 'lr': config.w_lr}, {'params': controller.module.super_layers[layer_idx + 1:].parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.nas_layers[:layer_idx].parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_225": {
                "variable": {
                    "value": "alpha_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "controller.module.super_layers_arch[0].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.alpha_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.alpha_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "alpha_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "controller.module.super_layers_arch[layer_idx:].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.alpha_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.alpha_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_232": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters(), 'lr': config.nasnet_lr * 0.1 if config.param_pool_path else config.nasnet_lr}, {'params': controller.module.ensemble_param}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.nasnet_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_240": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters(), 'lr': config.nasnet_lr * 0.1 if config.param_pool_path else config.nasnet_lr}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.nasnet_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "{'controller': controller.module.state_dict(), 'sta_layer_idx': layer_idx, 'w_optim': w_optim.state_dict(), 'alpha_optim': alpha_optim.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'sta_search_iter': search_iter, 'sta_search_epoch': sub_epoch + 1, 'best_top1': best_top1, 'best_genotypes': best_genotypes, 'best_connects': best_connects, 'lr_scheduler_retrain': lr_scheduler_retrain.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.path, 'search_resume.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS/test.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "resume_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_57": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/cnn/alexnet.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/cnn/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv1_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "stride",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_239": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_241": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/cnn/vgg.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "*vgg_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i if i < 4 else 512",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/cnn/weight_init.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/_functions.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "current_stream_39": {
                "variable": {
                    "value": "main_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_38": {
                "type": {
                    "value": "devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/collate.py": {
        "torch": {
            "pad_57": {
                "input": {
                    "value": "sample.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0 for _ in range(batch[i].pad_dims * 2)]",
                            "ListComp"
                        ]
                    ]
                },
                "value": {
                    "value": "sample.padding_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/data_container.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/data_parallel.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/distributed.py": {
        "torch": {
            "broadcast_25": {
                "tensor": {
                    "value": "flat_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_dense_tensors(tensors)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/parallel/scatter_gather.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmcv/runner/checkpoint.py": {
        "torch": {
            "save_238": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_zoo.load_url(url)",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(url)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(open_mmlab_model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(filename)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(model.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_172": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/dist_utils.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_40": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_28": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_41": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_56": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/hooks/logger/tensorboard.py": {
        "torch": {
            "SummaryWriter_38": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/hooks/logger/text.py": {
        "torch": {
            "max_memory_allocated_28": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "mem_mb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[mem / (1024 * 1024)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/hooks/memory.py": {
        "torch": {
            "empty_cache_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/hooks/optimizer.py": {
        "torch": {
            "clip_grad_norm__11": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__27": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, params)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/parallel_test.py": {
        "torch": {
            "set_device_13": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/runner.py": {
        "torch": {
            "current_device_314": {
                "variable": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmcv/runner/utils.py": {
        "torch": {
            "is_initialized_21": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/apis/env.py": {
        "torch": {
            "device_count_29": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_42": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_30": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_57": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/apis/inference.py": {
        "torch": {
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/apis/train.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_9": {
                "variable": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_36": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_58": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/anchor/anchor_target.py": {
        "torch": {
            "stack_84": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_126": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/anchor/guided_anchor_target.py": {
        "torch": {
            "round_20": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[0] + ratio * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_21": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[1] + ratio * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_22": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[0] + (1 - ratio) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_23": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[1] + (1 - ratio) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_267": {
                "variable": {
                    "value": "bbox_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "bbox_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_269": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(gt_bboxes_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes_list[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_71": {
                "variable": {
                    "value": "loc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "ignore_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_78": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0] + 1) * (gt_bboxes[:, 3] - gt_bboxes[:, 1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_83": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "approx_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "square_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_84": {
                "input": {
                    "value": "min_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/assigners/approx_max_iou_assigner.py": {
        "torch": {
            "transpose_90": {
                "variable": {
                    "value": "approxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "approxs.view(num_squares, approxs_per_octave, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(overlaps, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/assigners/assign_result.py": {
        "torch": {
            "arange_13": {
                "variable": {
                    "value": "self_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "self.gt_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "self.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(self.num_gts), self.max_overlaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "nonzero_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/bbox_target.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_69": {
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/geometry.py": {
        "torch": {
            "max_33": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_34": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_49": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/instance_balanced_pos_sampler.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "self.random_choice(sampled_inds, num_expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "self.random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/iou_balanced_neg_sampler.py": {
        "torch": {
            "nonzero_76": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(sampled_inds)",
                            "Call"
                        ],
                        [
                            "np.concatenate([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_floor_inds, iou_sampled_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/ohem_sampler.py": {
        "torch": {
            "nonzero_50": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_66": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/pseudo_sampler.py": {
        "torch": {
            "nonzero_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/random_sampler.py": {
        "torch": {
            "nonzero_37": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_47": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cands[:num]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rand_inds).long().to(gallery.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/samplers/sampling_result.py": {
        "torch": {
            "cat_24": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/bbox/transforms.py": {
        "torch": {
            "log_23": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_25": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "addcmul_56": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 0] + proposals[..., 2]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 0] + rois[:, 2]) * 0.5).unsqueeze(1).expand_as(dx)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 2] - proposals[..., 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 2] - rois[:, 0] + 1.0).unsqueeze(1).expand_as(dw)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gx - px) / pw",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 0::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "addcmul_57": {
                "variable": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 1] + proposals[..., 3]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 1] + rois[:, 3]) * 0.5).unsqueeze(1).expand_as(dy)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 3] - proposals[..., 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 3] - rois[:, 1] + 1.0).unsqueeze(1).expand_as(dh)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gy - py) / ph",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 1::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_67": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_130": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/evaluation/eval_hooks.py": {
        "torch": {
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/fp16/decorators.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/core/fp16/hooks.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/core/fp16/utils.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_11": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/post_processing/bbox_nms.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_31": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_71": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/core/utils/dist_utils.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/custom.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/loader/build_loader.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, imgs_per_gpu) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, imgs_per_gpu, split, 'train') if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank, split=split, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, imgs_per_gpu, split, 'val') if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank, split=split, mode='val')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/loader/sampler.py": {
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(len(self.dataset), generator=g).tolist()",
                            "Call"
                        ],
                        [
                            "torch.arange(len(self.dataset)).tolist()",
                            "Call"
                        ],
                        [
                            "indices + indice",
                            "BinOp"
                        ],
                        [
                            "indices[self.rank:self.total_size:self.num_replicas]",
                            "Subscript"
                        ],
                        [
                            "np.array([], dtype='int64')",
                            "Call"
                        ],
                        [
                            "_indices",
                            "Name"
                        ],
                        [
                            "torch.from_numpy(indices).long()",
                            "Call"
                        ],
                        [
                            "np.concatenate([indices, indice])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[indices[j] for i in list(torch.randperm(len(indices) // self.samples_per_gpu, generator=g)) for j in range(i * self.samples_per_gpu, (i + 1) * self.samples_per_gpu)]",
                            "ListComp"
                        ],
                        [
                            "indices[offset:offset + self.num_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Generator_149": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_20": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_22": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_24": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_185": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_179": {
                "n": {
                    "value": "int(len(indice))",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_22": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/transforms.py": {
        "torch": {
            "from_numpy_145": {
                "ndarray": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "np.array(array)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/datasets/utils.py": {
        "torch": {
            "from_numpy_18": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/anchor_head.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/fcos_head.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.fcos_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.fcos_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.fcos_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[centerness.permute(0, 2, 3, 1).reshape(-1) for centerness in centernesses]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels[min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((left, top, right, bottom), -1)",
                            "Call"
                        ],
                        [
                            "bbox_targets[range(num_points), min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "flatten_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_261": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_292": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_294": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_296": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "concat_regress_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_regress_ranges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[points[i].new_tensor(self.regress_ranges[i])[None].expand_as(points[i]) for i in range(num_levels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "concat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((x.reshape(-1), y.reshape(-1)), dim=-1) + stride // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_359": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_389": {
                "input": {
                    "value": "centerness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_297": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "[labels[i] for labels in labels_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_335": {
                "tensors": {
                    "value": "[bbox_targets[i] for bbox_targets in bbox_targets_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/ga_retina_head.py": {
        "torch": {
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/ga_rpn_head.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/guided_anchor_head.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_365": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_weights[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_365": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_598": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_601": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_604": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_260": {
                "tensors": {
                    "value": "inside_flags_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_260": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/retina_head.py": {
        "torch": {
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/rpn_head.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/anchor_heads/ssd_head.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "reg_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cls_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "variable": {
                    "value": "anchor_generator.base_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_generator.base_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_113": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/builder.py": {
        "torch": {
            "Parameter_120": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, weight_num_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_531": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_532": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_534": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride - 1 + dilation * (kernel_size - 1)) // 2",
                            "BinOp"
                        ],
                        [
                            "padding.lower()",
                            "Call"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_811": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/detnas.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if id_repeat > 0 else 2",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_out_channels[id_stage + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "(x_proj, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if id_repeat > 0 else 2",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/dropblock.py": {
        "torch": {
            "max_pool2d_56": {
                "variable": {
                    "value": "block_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).to(x)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).to(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool3d_118": {
                "variable": {
                    "value": "block_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).to(x)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).to(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size, self.block_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_42": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/efficientnet.py": {
        "torch": {
            "adaptive_avg_pool2d_64": {
                "variable": {
                    "value": "x_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_65": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_70": {
                "variable": {
                    "value": "x_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_71": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(x_avg, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(self._in_chs, block_args)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_574": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(self._in_chs, block_args)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_165": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_510": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_1910": {
                "variable": {
                    "value": "self.extra_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.extra_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_1914": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_46": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_121": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_125": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Flatten_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_509": {
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/efficientnet_builder.py": {
        "torch": {
            "pad_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ReLU",
                            "Attribute"
                        ],
                        [
                            "nn.ReLU6",
                            "Attribute"
                        ],
                        [
                            "HardSwish",
                            "Name"
                        ],
                        [
                            "Swish",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(routing_weights, self.weight)",
                            "Call"
                        ],
                        [
                            "weight.view(new_weight_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.matmul(routing_weights, self.bias)",
                            "Call"
                        ],
                        [
                            "bias.view(B * self.out_channels)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, weight_num_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.routing_fn(pooled_inputs))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_233": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.routing_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_experts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_405": {
                "variable": {
                    "value": "pooled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_405": {
                "variable": {
                    "value": "pooled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_406": {
                "variable": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.routing_fn(pooled_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_499": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(routing_weights, self.weight)",
                            "Call"
                        ],
                        [
                            "weight.view(new_weight_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.matmul(routing_weights, self.bias)",
                            "Call"
                        ],
                        [
                            "bias.view(B * self.out_channels)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_547": {
                "variable": {
                    "value": "x_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_549": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c(x_split[i]) for (i, c) in enumerate(self.values())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.routing_fn(pooled_inputs))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ],
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ],
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ],
                        [
                            "x * self.gate_fn(x_se)",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(routing_weights, self.weight)",
                            "Call"
                        ],
                        [
                            "weight.view(new_weight_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.matmul(routing_weights, self.bias)",
                            "Call"
                        ],
                        [
                            "bias.view(B * self.out_channels)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups * B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_559": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size if isinstance(kernel_size, list) else [kernel_size]",
                            "IfExp"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride - 1 + dilation * (kernel_size - 1)) // 2",
                            "BinOp"
                        ],
                        [
                            "padding.lower()",
                            "Call"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_977": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/fbnet.py": {
        "torch": {
            "ModuleList_38": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/fbnet_blocks.py": {
        "torch": {
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_84": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_174": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_356": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "*args": {
                    "value": "*hr_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_172": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_354": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_137": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_353": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/mnasnet.py": {
        "torch": {
            "Sequential_20": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.Conv2d(inp, inp, 3, 1, 1, groups=inp, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_190": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/mobilenetv2.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "nn.Conv2d(3, input_channel, 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "nn.Conv2d(input_channel, last_channel, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_channel * width_mult)",
                            "Call"
                        ],
                        [
                            "output_channel",
                            "Name"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_channel * width_mult)",
                            "Call"
                        ],
                        [
                            "output_channel",
                            "Name"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(last_channel * width_mult) if width_mult > 1.0 else last_channel",
                            "IfExp"
                        ],
                        [
                            "1280",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((kernel_size - 1) * (idx + 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/mobilenetv3.py": {
        "torch": {
            "Sequential_91": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(self._in_chs, block_args)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "variable": {
                    "value": "self.pool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.extra_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.extra_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_366": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_18": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_41": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/resnet.py": {
        "torch": {
            "load_740": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels, in_channels, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_335": {
                "variable": {
                    "value": "offset_affine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_339": {
                "variable": {
                    "value": "structural_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nijhw,jk->nikhw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(deform_params, self.coord_map.to(deform_params.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_354": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, mid_channels, kernel_size, stride=stride, padding=padding, dilation=dilation, bias=False, groups=mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, out_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_516": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_667": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_668": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_325": {
                "*tensors": {
                    "value": "[coord, coord]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_326": {
                "*size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_327": {
                "tensors": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.arange(kernel_size, dtype=torch.float) - kernel_size // 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "list(torch.meshgrid([coord, coord]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_362": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_363": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_368": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_d1, out_d2, out_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_324": {
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/resnext.py": {
        "torch": {
            "Sequential_110": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.planes",
                            "Attribute"
                        ],
                        [
                            "math.floor(self.planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/ssd_vgg.py": {
        "torch": {
            "Parameter_125": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/backbones/utils.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/bbox_heads/auto_head/mbblock_head_search.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/bbox_heads/auto_head/mbblock_ops.py": {
        "torch": {
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_96": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max(1, int(in_channels * se_ratio))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "max(1, int(in_channels * se_ratio))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N, self.groups, cpg, H, W)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.pooling(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.se(out)",
                            "BinOp"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N, self.groups, cpg, H, W)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.pooling(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.se(out)",
                            "BinOp"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "avg_pool2d_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/bbox_heads/bbox_head.py": {
        "torch": {
            "AvgPool2d_53": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.roi_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if reg_class_agnostic else 4 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "nonzero_192": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_230": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scale_factor).to(bboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_109": {
                "input": {
                    "value": "label_weights > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, mid_channels, kernel_size, stride=stride, padding=padding, dilation=dilation, bias=False, groups=mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, out_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_249": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_259": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, in_channel // 4, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_59": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_65": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_71": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_20": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_22": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_28": {
                "num_features": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_30": {
                "num_features": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_32": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "last_layer_dim * self.roi_feat_size * self.roi_feat_size if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "last_layer_dim * self.roi_feat_size * self.roi_feat_size if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/bbox_heads/double_bbox_head.py": {
        "torch": {
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels * self.roi_feat_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/builder.py": {
        "torch": {
            "Sequential_13": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/base.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/cascade_rcnn.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.bbox_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.bbox_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.mask_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_208": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/double_head_rcnn.py": {
        "torch": {
            "randn_24": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_137": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_cls_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_cls_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/grid_rcnn.py": {
        "torch": {
            "cat_74": {
                "variable": {
                    "value": "new_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_x1y1, new_x2y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_200": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_159": {
                "n": {
                    "value": "grid_feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/htc.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_61": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_122": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_138": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/mask_scoring_rcnn.py": {
        "torch": {
            "cat_143": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_127": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/single_stage.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/detectors/two_stage.py": {
        "torch": {
            "randn_111": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_235": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/accuracy.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/balanced_l1_loss.py": {
        "torch": {
            "abs_19": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_21": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_11": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_24": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/focal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_22": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/ghm_loss.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_70": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid().detach() - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_145": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(mu * mu + diff * diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(pred.sigmoid().detach() - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(mu * mu + diff * diff)).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "self.acc_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "self.acc_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_89": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(g)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "diff * diff + mu * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_145": {
                "input": {
                    "value": "mu * mu + diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/iou_loss.py": {
        "torch": {
            "stack_64": {
                "variable": {
                    "value": "loss_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_60": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_62": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_88": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_121": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/mse_loss.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/smooth_l1_loss.py": {
        "torch": {
            "abs_12": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/losses/utils.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/mask_heads/fcn_mask_head.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "logits_in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if self.class_agnostic else self.num_classes",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "upsample_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.num_convs > 0 else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_73": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_labels.cpu().numpy() + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/mask_heads/fused_semantic_head.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/mask_heads/grid_head.py": {
        "torch": {
            "Sequential_70": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GroupNorm_79": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.forder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.sorder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(self.grid_points)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "pos_gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, self.grid_points, map_size, map_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sub_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "sub_targets.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "bbox_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes_x1, bboxes_y1, bboxes_x2, bboxes_y2, cls_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "fo_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "so_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, stride=1, padding=2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, 1, 2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/mask_heads/maskiou_head.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc_mask_iou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_feat, mask_pred_pooled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels + 1",
                            "BinOp"
                        ],
                        [
                            "self.conv_out_channels",
                            "Attribute"
                        ],
                        [
                            "self.conv_out_channels * (roi_feat_size // 2) ** 2 if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i == num_convs - 1 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels + 1",
                            "BinOp"
                        ],
                        [
                            "self.conv_out_channels",
                            "Attribute"
                        ],
                        [
                            "self.conv_out_channels * (roi_feat_size // 2) ** 2 if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/auto_neck/hit_neck_search.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/auto_neck/hit_ops.py": {
        "torch": {
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_128": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max(1, int(in_channels * se_ratio))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "max(1, int(in_channels * se_ratio))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N, self.groups, cpg, H, W)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.se(out)",
                            "BinOp"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N, self.groups, cpg, H, W)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.se(out)",
                            "BinOp"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/bfp.py": {
        "torch": {
            "adaptive_max_pool2d_79": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(feats) / len(feats)",
                            "BinOp"
                        ],
                        [
                            "self.refine(bsf)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_99": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/fpn.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, mid_channels, kernel_size, stride=stride, padding=padding, dilation=dilation, bias=False, groups=mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, out_channels, 1, stride=1, padding=0, dilation=1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[self.backbone_end_level - 1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_23": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * dilation // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_29": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_35": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "fpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fpn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.fpn_kernel - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_243": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "fpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels, out_channels, self.fpn_kernel, padding=int((self.fpn_kernel - 1) / 2), groups=out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_258": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fpn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.fpn_kernel - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_208": {
                "variable": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laterals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_210": {
                "variable": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_212": {
                "input": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "input": {
                    "value": "laterals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_221": {
                "input": {
                    "value": "laterals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_225": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_268": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_pool2d_233": {
                "variable": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laterals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_235": {
                "variable": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_237": {
                "input": {
                    "value": "tmp_lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(laterals[j], 2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(tmp_lateral, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_239": {
                "input": {
                    "value": "laterals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/fpn_panet.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.bottom_up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_67": {
                "variable": {
                    "value": "self.pa_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_145": {
                "input": {
                    "value": "outs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_166": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/hrfpn.py": {
        "torch": {
            "ModuleList_54": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs[0]]",
                            "List"
                        ],
                        [
                            "[out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/nas_fpn.py": {
        "torch": {
            "AdaptiveAvgPool2d_66": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.fpn_stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "l_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels[i] if i < self.backbone_end_level else in_channels[-1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "lateral_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lateral_kernel - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleDict_128": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "extra_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/necks/search_pafpn.py": {
        "torch": {
            "ModuleList_69": {
                "variable": {
                    "value": "self.pa_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_122": {
                "input": {
                    "value": "outs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_133": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_143": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/plugins/generalized_attention.py": {
        "torch": {
            "Conv2d_77": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.v_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.v_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_163": {
                "variable": {
                    "value": "h_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_166": {
                "variable": {
                    "value": "w_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_169": {
                "variable": {
                    "value": "h_kv_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h_kv - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_172": {
                "variable": {
                    "value": "w_kv_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w_kv - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_183": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_dim / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_185": {
                "variable": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "embedding_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((w_diff / dim_mat).sin(), (w_diff / dim_mat).cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "embedding_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((h_diff / dim_mat).sin(), (h_diff / dim_mat).cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(appr_bias, proj_key).view(n, num_heads, 1, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n, num_heads, h, w, h_kv, w_kv, dtype=x_input.dtype, device=x_input.device)",
                            "Call"
                        ],
                        [
                            "energy.masked_fill_(cur_local_constraint_map, float('-inf'))",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query + appr_bias, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy.view(n, num_heads, h * w, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy + (energy_x + energy_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_value_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_value.view((n, num_heads, self.v_dim, h_kv * w_kv)).permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_366": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.appr_geom_fc_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.appr_geom_fc_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.appr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "appr_bias_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.geom_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "geom_bias_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.local_constraint_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(local_constraint_map).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_140": {
                "variable": {
                    "value": "self.q_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.q_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_146": {
                "variable": {
                    "value": "self.kv_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kv_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "appr_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_heads",
                            "Attribute"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x_input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "x_input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "w_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "local_constraint_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((max_len, max_len, max_len_kv, max_len_kv), dtype=np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query + appr_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "position_feat_x.permute(0, 1, 2, 4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_302": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y.permute(0, 1, 2, 4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_100": {
                "*size": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x_q).view((n, num_heads, self.qk_embed_dim, h * w))",
                            "Call"
                        ],
                        [
                            "proj_query.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_x_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_323": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_x_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_343": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_y_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_285": {
                "input": {
                    "value": "appr_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/plugins/non_local.py": {
        "torch": {
            "matmul_76": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / pairwise_weight.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/roi_extractors/single_level.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1] + 1) * (rois[:, 4] - rois[:, 2] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_71": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log2_71": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/shared_heads/res_layer.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/conv_module.py": {
        "torch": {
            "ReLU_136": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/conv_ws.py": {
        "torch": {
            "conv2d_18": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/norm.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/quant_conv.py": {
        "torch": {
            "tanh_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "torch.tanh(w)",
                            "Call"
                        ],
                        [
                            "w / (2 * torch.max(torch.abs(w))) + 0.5",
                            "BinOp"
                        ],
                        [
                            "2 * quantize(w, nbit_w) - 1",
                            "BinOp"
                        ],
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "quantize(torch.clamp(w, -1, 1), nbit_w - 1)",
                            "Call"
                        ],
                        [
                            "self.quant_w(self.weight, self.nbit_w, self.alpha_w, self.offset)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_157": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 + 2 * input) * input.lt(0).float() + (2 - 2 * input) * input.ge(0).float()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(grad_input, 0)",
                            "Call"
                        ],
                        [
                            "grad_input * grad_output",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (torch.abs(input) - torch.abs(input - alpha) + alpha)",
                            "BinOp"
                        ],
                        [
                            "F.pad(input[:, :, ::2, ::2], (0, 0, 0, 0, diff_channels // 2, diff_channels - diff_channels // 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (0, 0, 0, 0, diff_channels // 2, diff_channels - diff_channels // 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.quant_a(input, self.nbit_a, self.alpha_a)",
                            "Call"
                        ],
                        [
                            "F.relu(input)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "torch.tanh(w)",
                            "Call"
                        ],
                        [
                            "w / (2 * torch.max(torch.abs(w))) + 0.5",
                            "BinOp"
                        ],
                        [
                            "2 * quantize(w, nbit_w) - 1",
                            "BinOp"
                        ],
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "quantize(torch.clamp(w, -1, 1), nbit_w - 1)",
                            "Call"
                        ],
                        [
                            "self.quant_w(self.weight, self.nbit_w, self.alpha_w, self.offset)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_58": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.abs(w.clone().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_135": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "self.alpha_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.alpha_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_77": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "torch.abs(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_96": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "torch.abs(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_119": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "torch.tanh(w)",
                            "Call"
                        ],
                        [
                            "w / (2 * torch.max(torch.abs(w))) + 0.5",
                            "BinOp"
                        ],
                        [
                            "2 * quantize(w, nbit_w) - 1",
                            "BinOp"
                        ],
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "quantize(torch.clamp(w, -1, 1), nbit_w - 1)",
                            "Call"
                        ],
                        [
                            "self.quant_w(self.weight, self.nbit_w, self.alpha_w, self.offset)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_130": {
                "input": {
                    "value": "w.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, diff_channels // 2, diff_channels - diff_channels // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, diff_channels // 2, diff_channels - diff_channels // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_21": {
                "input": {
                    "value": "input * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_139": {
                "input": {
                    "value": "input - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_22": {
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_111": {
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_111": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "torch.tanh(w)",
                            "Call"
                        ],
                        [
                            "w / (2 * torch.max(torch.abs(w))) + 0.5",
                            "BinOp"
                        ],
                        [
                            "2 * quantize(w, nbit_w) - 1",
                            "BinOp"
                        ],
                        [
                            "scale_sign(w)",
                            "Call"
                        ],
                        [
                            "quantize(torch.clamp(w, -1, 1), nbit_w - 1)",
                            "Call"
                        ],
                        [
                            "self.quant_w(self.weight, self.nbit_w, self.alpha_w, self.offset)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/scale.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(scale, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/models/utils/weight_init.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/dcn/functions/deform_conv.py": {
        "torch": {
            "zeros_like_150": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_154": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/dcn/functions/deform_pool.py": {
        "torch": {
            "zeros_like_56": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/dcn/modules/deform_conv.py": {
        "torch": {
            "Parameter_41": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_152": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/dcn/modules/deform_pool.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/dcn/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/gcb/context_block.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_35": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.channel_add_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.channel_mul_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "input_x.view(batch, channel, height * width)",
                            "Call"
                        ],
                        [
                            "input_x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "context_mask.view(batch, 1, height * width)",
                            "Call"
                        ],
                        [
                            "self.softmax(context_mask)",
                            "Call"
                        ],
                        [
                            "context_mask.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "channel_mul_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.channel_mul_conv(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/masked_conv/functions/masked_conv.py": {
        "torch": {
            "nonzero_32": {
                "variable": {
                    "value": "mask_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "addmm_44": {
                "variable": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "mat1": {
                    "value": "bias[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "beta": {
                    "value": "weight.view(out_channel, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "data_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.new_zeros(in_channel * kernel_h * kernel_w, mask_inds.size(0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/masked_conv/modules/masked_conv.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/masked_conv/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/nms/nms_wrapper.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "dets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/nms/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_align/gradcheck.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(num_rois, 4) * img_size * 0.5",
                            "BinOp"
                        ],
                        [
                            "np.hstack((batch_ind, rois))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_27": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_29": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_align/modules/roi_align.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_align/roi_align.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_align/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_pool/functions/roi_pool.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_pool/gradcheck.py": {
        "torch": {
            "randn_9": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_10": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradcheck_14": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIPool(4, 1.0 / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_pool/modules/roi_pool.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/roi_pool/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/sigmoid_focal_loss/functions/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/sigmoid_focal_loss/modules/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/ops/sigmoid_focal_loss/setup.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_detection/mmdet/utils/collect_env.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_38": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/utils/contextmanagers.py": {
        "torch": {
            "current_stream_30": {
                "variable": {
                    "value": "stream_before_context_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_46": {
                "variable": {
                    "value": "grad_enabled_before",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_109": {
                "variable": {
                    "value": "initial_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_41": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_50": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_59": {
                "variable": {
                    "value": "grad_enabled_after",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_81": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_37": {
                "enable_timing": {
                    "value": "DEBUG_COMPLETED_TIME",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(os.environ.get('DEBUG_COMPLETED_TIME', False))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_120": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/utils/flops_counter.py": {
        "torch": {
            "ones_64": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/mmdet/utils/profiling.py": {
        "torch": {
            "Event_26": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_27": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/test.py": {
        "torch": {
            "full_67": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_76": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/tools/detectron2pytorch.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "state_dict[torch_name + .running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "variable": {
                    "value": "state_dict[torch_name + .running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_w']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/tools/publish_model.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/tools/test.py": {
        "torch": {
            "tensor_126": {
                "variable": {
                    "value": "part_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_133": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "part_send",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_87": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_96": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/tools/upgrade_model_version.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_detection/train.py": {
        "torch": {
            "DistributedDataParallel_85": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/__init__.py": {
        "torch": {
            "DataLoader_176": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_15": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='test')",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(1, args.batch_size // 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(1, args.batch_size // 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_268": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(1, args.batch_size // 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(1, args.batch_size // 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "train_loader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "train_loader2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='retrain')",
                            "Call"
                        ],
                        [
                            "combine_dbs.CombineDBs([train_set, sbd_train], excluded=[val_set])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='train')",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "CityscapesPanoptic(**dataset_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_280": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pascal.VOCSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "COCOPanoptic(**dataset_val_cfg['coco_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes'])",
                            "Call"
                        ],
                        [
                            "coco.COCOSegmentation(args, root, split='val')",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "Cityscapes(**dataset_val_cfg['cityscapes_panoptic'])",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, root, split='test')",
                            "Call"
                        ],
                        [
                            "kd.CityscapesSegmentation(args, root, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/custom_transforms.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.rotate(rotate_degree, Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.filter(ImageFilter.GaussianBlur(radius=random.random()))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(img, border=(0, 0, padw, padh), fill=0)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.rotate(rotate_degree, Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(mask, border=(0, 0, padw, padh), fill=self.fill)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "nn.ConstantPad2d((0, pad_lr, 0, pad_tb), 255)(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ZeroPad2d_243": {
                "padding": {
                    "value": "(0, pad_lr, 0, pad_tb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConstantPad2d_244": {
                "padding": {
                    "value": "(0, pad_lr, 0, pad_tb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/dataloader_utils.py": {
        "torch": {
            "from_numpy_10": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/cityscapes.py": {
        "torch": {
            "DataLoader_130": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CityscapesSegmentation(args, split='retrain')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/coco.py": {
        "torch": {
            "DataLoader_137": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOSegmentation(args, split='val', year='2017')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "ids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'annotations/{}_ids_{}.pth'.format(split, year))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_77": {
                "obj": {
                    "value": "new_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "ids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'annotations/{}_ids_{}.pth'.format(split, year))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/combine_dbs.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDBs([pascal_voc_train, sbd], excluded=[pascal_voc_val])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/kd.py": {
        "torch": {
            "DataLoader_115": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CityscapesSegmentation(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/pascal.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "voc_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/datasets/sbd.py": {
        "torch": {
            "DataLoader_105": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sbd_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SBDSegmentation(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/segdatasets/base_dataset.py": {
        "torch": {
            "as_tensor_170": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_tensor.dtype",
                            "Attribute"
                        ],
                        [
                            "'uint8'",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "image_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_171": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_tensor.dtype",
                            "Attribute"
                        ],
                        [
                            "'uint8'",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "image_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_120": {
                "variable": {
                    "value": "dataset_dict[semantic]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "label.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/dataloaders/transforms/target_transforms.py": {
        "torch": {
            "as_tensor_150": {
                "data": {
                    "value": "semantic.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_151": {
                "data": {
                    "value": "foreground.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_152": {
                "data": {
                    "value": "center.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_154": {
                "data": {
                    "value": "offset.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_155": {
                "data": {
                    "value": "semantic_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_156": {
                "data": {
                    "value": "center_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_157": {
                "data": {
                    "value": "offset_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_199": {
                "data": {
                    "value": "semantic.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/data/build.py": {
        "torch": {
            "BatchSampler_120": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samplers.TrainingSampler(len(dataset), shuffle=config.DATALOADER.TRAIN_SHUFFLE)",
                            "Call"
                        ],
                        [
                            "samplers.InferenceSampler(len(dataset))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "images_per_worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_per_batch // num_workers",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_map[config.DATASET.DATASET](**dataset_cfg[config.DATASET.DATASET])",
                            "Call"
                        ],
                        [
                            "build_dataset_from_cfg(config, is_train=True)",
                            "Call"
                        ],
                        [
                            "build_dataset_from_cfg(config, is_train=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, images_per_worker, drop_last=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, 1, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "worker_init_reset_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchSampler_147": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samplers.TrainingSampler(len(dataset), shuffle=config.DATALOADER.TRAIN_SHUFFLE)",
                            "Call"
                        ],
                        [
                            "samplers.InferenceSampler(len(dataset))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_map[config.DATASET.DATASET](**dataset_cfg[config.DATASET.DATASET])",
                            "Call"
                        ],
                        [
                            "build_dataset_from_cfg(config, is_train=True)",
                            "Call"
                        ],
                        [
                            "build_dataset_from_cfg(config, is_train=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, images_per_worker, drop_last=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, 1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/data/datasets/base_dataset.py": {
        "torch": {
            "as_tensor_170": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_tensor.dtype",
                            "Attribute"
                        ],
                        [
                            "'uint8'",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "image_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_171": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_tensor.dtype",
                            "Attribute"
                        ],
                        [
                            "'uint8'",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "image_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_120": {
                "variable": {
                    "value": "dataset_dict[semantic]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "label.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/data/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_54": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_58": {
                "n": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_60": {
                "start": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/data/transforms/target_transforms.py": {
        "torch": {
            "as_tensor_150": {
                "data": {
                    "value": "semantic.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_151": {
                "data": {
                    "value": "foreground.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_152": {
                "data": {
                    "value": "center.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_154": {
                "data": {
                    "value": "offset.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_155": {
                "data": {
                    "value": "semantic_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_156": {
                "data": {
                    "value": "center_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_157": {
                "data": {
                    "value": "offset_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_199": {
                "data": {
                    "value": "semantic.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/backbone/hrnet.py": {
        "torch": {
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_306": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_309": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_312": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_254": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_389": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_437": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_395": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_382": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_275": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[height_output, width_output]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_373": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_386": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_250": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/backbone/mnasnet.py": {
        "torch": {
            "zeros_276": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, mid_ch, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[32, 16, 24, 40, 80, 96, 192, 320]",
                            "List"
                        ],
                        [
                            "_get_depths(alpha)",
                            "Call"
                        ],
                        [
                            "_get_depths(self.alpha)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "depths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depths[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depths[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_178": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.9997",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/backbone/mobilenet.py": {
        "torch": {
            "zeros_210": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/backbone/resnet.py": {
        "torch": {
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/backbone/xception.py": {
        "torch": {
            "Conv2d_23": {
                "variable": {
                    "value": "depthwise",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "pointwise",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu', nn.ReLU()), ('depthwise', depthwise), ('bn_depth', bn_depth), ('pointwise', pointwise), ('bn_point', bn_point)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('depthwise', depthwise), ('bn_depth', bn_depth), ('relu1', nn.ReLU(inplace=True)), ('pointwise', pointwise), ('bn_point', bn_point), ('relu2', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/build.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/decoder/aspp.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.aspp_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=False), nn.BatchNorm2d(out_channels), nn.ReLU()]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * out_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_34": {
                "variable": {
                    "value": "self.aspp_pooling[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_36": {
                "variable": {
                    "value": "self.aspp_pooling[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aspp_pooling(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_27": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "5 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/decoder/conv_module.py": {
        "torch": {
            "zeros_72": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/decoder/deeplabv3.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(decoder_channels, decoder_channels, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "decoder_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "decoder_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "decoder_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "decoder_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/decoder/deeplabv3plus.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(low_level_channels, low_level_channels_project, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "decoder_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[self.feature_key]",
                            "Subscript"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=l.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, l), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fuse(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "low_level_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "low_level_channels_project",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "low_level_channels_project",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/decoder/panoptic_deeplab.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "project",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleDict_97": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[self.feature_key]",
                            "Subscript"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=l.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, l), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fuse[i](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "classifier[class_key[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "fuse_conv(decoder_channels, head_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.Conv2d(low_level_channels[i], low_level_channels_project[i], 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "head_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "low_level_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "low_level_channels_project[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "low_level_channels_project[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/loss/__init__.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/loss/criterion.py": {
        "torch": {
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_97": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_111": {
                "variable": {
                    "value": "(pixel_losses, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "pixel_losses[mask]",
                            "Subscript"
                        ],
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "pixel_losses[mask][indices]",
                            "Subscript"
                        ],
                        [
                            "pixel_losses[predictions < threshold]",
                            "Subscript"
                        ],
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.top_k_percent_pixels * pixel_losses.numel())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/meta_arch/base.py": {
        "torch": {
            "interpolate_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/meta_arch/deeplabv3.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/meta_arch/deeplabv3plus.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/meta_arch/panoptic_deeplab.py": {
        "torch": {
            "interpolate_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/post_processing/instance_post_processing.py": {
        "torch": {
            "threshold_30": {
                "variable": {
                    "value": "ctr_hmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_hmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.threshold(ctr_hmp, threshold, -1)",
                            "Call"
                        ],
                        [
                            "ctr_hmp.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "ctr_hmp_max_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_hmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.threshold(ctr_hmp, threshold, -1)",
                            "Call"
                        ],
                        [
                            "ctr_hmp.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nms_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "nms_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nms_kernel - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_42": {
                "variable": {
                    "value": "ctr_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_hmp > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "y_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "offsets.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "offsets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "y_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "x_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "offsets.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "offsets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_coord, x_coord)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr - ctr_loc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_142": {
                "variable": {
                    "value": "semantic_thing_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_150": {
                "variable": {
                    "value": "instance_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_pixels(ctr, offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_168": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "thing_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mode_158": {
                "variable": {
                    "value": "(class_id, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg[thing_mask].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stuff_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sem_seg == class_id) & ~thing_seg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_49": {
                "variable": {
                    "value": "(top_k_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flatten(ctr_hmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmin_86": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ctr - ctr_loc, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "input": {
                    "value": "(1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_140": {
                "input": {
                    "value": "sem_seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_50": {
                "input": {
                    "value": "ctr_hmp > top_k_scores[-1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "sem_seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_156": {
                "input": {
                    "value": "thing_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ins_seg == ins_id) & (semantic_thing_seg == 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_49": {
                "input": {
                    "value": "ctr_hmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.threshold(ctr_hmp, threshold, -1)",
                            "Call"
                        ],
                        [
                            "ctr_hmp.squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/model/post_processing/semantic_post_processing.py": {
        "torch": {
            "argmax_25": {
                "input": {
                    "value": "sem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sem.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/solver/build.py": {
        "torch": {
            "SGD_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__29": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "cfg.NORM_TYPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_value__32": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.SOLVER.ADAM_BETAS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.SOLVER.ADAM_EPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/solver/lr_scheduler.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/segmentation/utils/comm.py": {
        "torch": {
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_164": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_205": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_213": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_203": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/utils/debug.py": {
        "torch": {
            "argmax_71": {
                "variable": {
                    "value": "semantic_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_outputs['semantic'].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_73": {
                "variable": {
                    "value": "foreground_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_outputs['foreground'].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/utils/env.py": {
        "torch": {
            "set_rng_state_34": {
                "new_state": {
                    "value": "torch.manual_seed(seed).get_state()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.getpid() + int(datetime.now().strftime('%S%f')) + int.from_bytes(os.urandom(2), 'big')",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/utils/test_utils.py": {
        "torch": {
            "interpolate_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_50": {
                "input": {
                    "value": "sem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sem.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_22": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/segmentation/utils/utils.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/tools/datasets/BaseDataset.py": {
        "torch": {
            "randperm_103": {
                "variable": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "files_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self._file_names)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "extra_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/engine/evaluator.py": {
        "torch": {
            "zeros_263": {
                "variable": {
                    "value": "data_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "pad_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pad_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "count_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "pad_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pad_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_301": {
                "type": {
                    "value": "input_data.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_315": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.val_func_process(input_data, device)",
                            "Call"
                        ],
                        [
                            "score[:, margin[0]:score.shape[1] - margin[1], margin[2]:score.shape[2] - margin[3]]",
                            "Subscript"
                        ],
                        [
                            "score.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "data_scale",
                            "Name"
                        ],
                        [
                            "score[:, margin[0]:score.shape[1] - margin[1], margin[2]:score.shape[2] - margin[3]]",
                            "Subscript"
                        ],
                        [
                            "self.val_func(input_data)",
                            "Call"
                        ],
                        [
                            "score[self.out_idx]",
                            "Subscript"
                        ],
                        [
                            "score[0]",
                            "Subscript"
                        ],
                        [
                            "score + score_flip.flip(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/engine/tester.py": {
        "torch": {
            "zeros_236": {
                "variable": {
                    "value": "data_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "pad_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pad_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "count_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "pad_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pad_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pad.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_274": {
                "type": {
                    "value": "input_data.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_288": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.val_func_process(input_data, device)",
                            "Call"
                        ],
                        [
                            "score[:, margin[0]:score.shape[1] - margin[1], margin[2]:score.shape[2] - margin[3]]",
                            "Subscript"
                        ],
                        [
                            "score.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "data_scale",
                            "Name"
                        ],
                        [
                            "score[:, margin[0]:score.shape[1] - margin[1], margin[2]:score.shape[2] - margin[3]]",
                            "Subscript"
                        ],
                        [
                            "self.val_func(input_data)",
                            "Call"
                        ],
                        [
                            "score[self.out_idx]",
                            "Subscript"
                        ],
                        [
                            "score[0]",
                            "Subscript"
                        ],
                        [
                            "score + score_flip.flip(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/seg_opr/loss_opr.py": {
        "torch": {
            "softmax_73": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.view(b, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_143": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_184": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_198": {
                "variable": {
                    "value": "(pixel_losses, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "pixel_losses[mask]",
                            "Subscript"
                        ],
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "pixel_losses[mask][indices]",
                            "Subscript"
                        ],
                        [
                            "pixel_losses[predictions < threshold]",
                            "Subscript"
                        ],
                        [
                            "self.criterion(logits, labels) * kwargs['semantic_weights']",
                            "BinOp"
                        ],
                        [
                            "pixel_losses.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, labels).contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.top_k_percent_pixels * pixel_losses.numel())",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_63": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_81": {
                "start": {
                    "value": "len(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/utils/cal_model.py": {
        "torch": {
            "manual_seed_172": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_173": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_197": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/utils/darts_utils.py": {
        "torch": {
            "randn_193": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_62": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Name"
                        ],
                        [
                            "beta",
                            "Name"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/utils/dist_utils.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/tools/utils/init_func.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/tools/utils/pyt_utils.py": {
        "torch": {
            "current_device_196": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_197": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "bincount_214": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_classes * true[mask] + pred[mask]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_classes ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_222": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb == ignore_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "bincount_224": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[keep] * n_classes + lb[keep]",
                            "BinOp"
                        ],
                        [
                            "pred[keep] * n_classes + lb[keep]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "n_classes ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_245": {
                "variable": {
                    "value": "A_inter_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bincount(num_classes * true[mask] + pred[mask], minlength=num_classes ** 2).reshape(num_classes, num_classes).float()",
                            "Call"
                        ],
                        [
                            "torch.bincount(merge, minlength=n_classes ** 2)",
                            "Call"
                        ],
                        [
                            "hist.reshape((n_classes, n_classes)).float()",
                            "Call"
                        ],
                        [
                            "np.bincount(merge, minlength=n_classes ** 2)",
                            "Call"
                        ],
                        [
                            "hist.reshape((n_classes, n_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_276": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_277": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_209": {
                "input": {
                    "value": "x[x == x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/att_sa.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "col_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, col_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "flat_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "flat_x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flat_x, flat_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h x y d, r d -> b h x y r",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(height, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(width, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_60": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i d, j d -> b h i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.rel_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(height * 2 - 1, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.rel_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(width * 2 - 1, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.to_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_118": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i d, b h j d -> b h i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i j, b h j d -> b h i d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, attn_dim_in, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_193": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, col_pad), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)) // 2, int(x.size(3)) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_211": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_223": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_227": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim_out, kernel_size, stride=stride, padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_156": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einsum('b h i j, b h j d -> b h i d', attn, v)",
                            "Call"
                        ],
                        [
                            "rearrange(out, 'b h (x y) d -> b (h d) x y', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.net(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(proj_value, attention.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "out.view(m_batchsize, C, width, height)",
                            "Call"
                        ],
                        [
                            "self.gamma * out + x",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)), int(x.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "attn_dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out // proj_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "attn_dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out // proj_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "attn_dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dim_in",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "attn_dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dim_in",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_55": {
                "*size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_73": {
                "*size": {
                    "value": "height * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_74": {
                "*size": {
                    "value": "width * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_176": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/builder.py": {
        "torch": {
            "Parameter_120": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, weight_num_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_531": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_532": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_534": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduced_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_divisible((reduced_base_chs or in_chs) * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride - 1 + dilation * (kernel_size - 1)) // 2",
                            "BinOp"
                        ],
                        [
                            "padding.lower()",
                            "Call"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding(kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_811": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/cydas.py": {
        "torch": {
            "Sequential_97": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(self._in_chs, block_args)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.arms32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvNorm(self.f_channels[-1], self.num_filters(16, self._stem_head_width[1]), 1, 1, 0, slimmable=False), ConvNorm(self.num_filters(16, self._stem_head_width[1]), self.num_filters(8, self._stem_head_width[1]), 1, 1, 0, slimmable=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.refines32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvNorm(self.num_filters(16, self._stem_head_width[1]) + self.f_channels[-2], self.num_filters(16, self._stem_head_width[1]), 3, 1, 1, slimmable=False), ConvNorm(self.num_filters(8, self._stem_head_width[1]) + self.f_channels[-3], self.num_filters(8, self._stem_head_width[1]), 3, 1, 1, slimmable=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_393": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.arms32[0](outputs32)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(out.size(2)) * 2, int(out.size(3)) * 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.refines32[0](torch.cat([out, outputs16], dim=1))",
                            "Call"
                        ],
                        [
                            "self.arms32[1](out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(out.size(2)) * 2, int(out.size(3)) * 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.refines32[1](torch.cat([out, outputs8], dim=1))",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred8, size=(int(pred8.size(2)) * 4, int(pred8.size(3)) * 4), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(out.size(2)) * 2, int(out.size(3)) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.arms32[0](outputs32)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(out.size(2)) * 2, int(out.size(3)) * 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.refines32[0](torch.cat([out, outputs16], dim=1))",
                            "Call"
                        ],
                        [
                            "self.arms32[1](out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(out.size(2)) * 2, int(out.size(3)) * 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.refines32[1](torch.cat([out, outputs8], dim=1))",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred8, size=(int(pred8.size(2)) * 4, int(pred8.size(3)) * 4), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(out.size(2)) * 2, int(out.size(3)) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chs if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "variable": {
                    "value": "self.pool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_357": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_425": {
                "variable": {
                    "value": "pred8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads8(self.ffm(torch.cat(pred8, dim=1)), outputs4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred8, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.agg_ffm(outputs8, outputs16, outputs32, outputs4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_431": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads8(self.ffm(torch.cat(pred8, dim=1)), outputs4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred8, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.agg_ffm(outputs8, outputs16, outputs32, outputs4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(pred8.size(2)) * 4, int(pred8.size(3)) * 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu6_24": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "self.num_features * self.global_pool.feat_mult()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "[out, outputs16]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "tensors": {
                    "value": "[out, outputs8]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_426": {
                "variable": {
                    "value": "pred16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads16(torch.cat(pred16, dim=1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(pred16, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_427": {
                "variable": {
                    "value": "pred32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads32(torch.cat(pred32, dim=1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(pred32, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_47": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_51": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_402": {
                "tensors": {
                    "value": "pred32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads32(torch.cat(pred32, dim=1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(pred32, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "tensors": {
                    "value": "pred16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads16(torch.cat(pred16, dim=1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(pred16, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "tensors": {
                    "value": "pred8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.heads8(self.ffm(torch.cat(pred8, dim=1)), outputs4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred8, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.agg_ffm(outputs8, outputs16, outputs32, outputs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/dataloader.py": {
        "torch": {
            "DistributedSampler_83": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_setting, 'train', train_preprocess, config.batch_size * config.niters_per_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_setting, 'train', train_preprocess, config.batch_size * config.niters_per_epoch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_workers if worker is None else worker",
                    "type": "IfExp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/layers.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(input) for k in range(dist.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "meansqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "variable": {
                    "value": "invstd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_90": {
                "variable": {
                    "value": "(mean, meansqr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mean, meansqr], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec) * (1.0 / dist.get_world_size())",
                            "BinOp"
                        ],
                        [
                            "torch.zeros([2 * C + 1], device=mean.device, dtype=mean.dtype)",
                            "Call"
                        ],
                        [
                            "vec + input.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mean, meansqr, torch.ones([1], device=mean.device, dtype=mean.dtype)], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec * B)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec[-1].detach()",
                            "Call"
                        ],
                        [
                            "torch.max(total_batch, torch.ones_like(total_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_105": {
                "variable": {
                    "value": "(mean, meansqr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec / total_batch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2 * C + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr, torch.ones([1], device=mean.device, dtype=mean.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "input": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec[-1].detach()",
                            "Call"
                        ],
                        [
                            "torch.max(total_batch, torch.ones_like(total_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_98": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/loss.py": {
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_9": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_46": {
                "variable": {
                    "value": "input_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(input_, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_71": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sort_75": {
                "variable": {
                    "value": "(loss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1 - input_prob, self.gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + F.conv2d(inputs[range(index, index + 1)], targets[range(index, index + 1)]) / (targets.size()[2] * targets.size()[3])",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:n_min]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1 - input_prob, self.gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + F.conv2d(inputs[range(index, index + 1)], targets[range(index, index + 1)]) / (targets.size()[2] * targets.size()[3])",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:n_min]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_12": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_47": {
                "input": {
                    "value": "1 - input_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1 - input_prob, self.gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + F.conv2d(inputs[range(index, index + 1)], targets[range(index, index + 1)]) / (targets.size()[2] * targets.size()[3])",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:n_min]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_59": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "torch.tensor(thresh, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1 - input_prob, self.gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + F.conv2d(inputs[range(index, index + 1)], targets[range(index, index + 1)]) / (targets.size()[2] * targets.size()[3])",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:n_min]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_61": {
                "input": {
                    "value": "inputs[range(index, index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "targets[range(index, index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/operations.py": {
        "torch": {
            "zeros_612": {
                "variable": {
                    "value": "col_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_613": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, col_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_615": {
                "variable": {
                    "value": "flat_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "flat_x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flat_x, flat_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_623": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h x y d, r d -> b h x y r",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, col_pad), dim=3)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.net1(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn1[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net2(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn2[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net3(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn3[branch](x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - drop_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, col_pad), dim=3)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.net1(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn1[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net2(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn2[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net3(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn3[branch](x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_185": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_258": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, col_pad), dim=3)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.net1(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn1[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net2(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn2[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net3(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn3[branch](x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)) // 2, int(x.size(3)) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_430": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_499": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, col_pad), dim=3)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.net1(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn1[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net2(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn2[branch](x)",
                            "Call"
                        ],
                        [
                            "self.net3(x)",
                            "Call"
                        ],
                        [
                            "self.mix_bn3[branch](x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)) // 2, int(x.size(3)) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_641": {
                "variable": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(height, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_642": {
                "variable": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(width, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_647": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i d, j d -> b h i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_660": {
                "variable": {
                    "value": "self.rel_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(height * 2 - 1, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_661": {
                "variable": {
                    "value": "self.rel_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(width * 2 - 1, dim_head) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_693": {
                "variable": {
                    "value": "self.to_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_706": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i d, b h j d -> b h i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h (x y) d -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_711": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h i j, b h j d -> b h i d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_762": {
                "variable": {
                    "value": "self.mix_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_763": {
                "variable": {
                    "value": "self.mix_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_764": {
                "variable": {
                    "value": "self.mix_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_898": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_900": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_920": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_924": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(C_in, C_out, kernel_size, stride, padding=self.padding, dilation=dilation, groups=self.groups, bias=bias, width_mult_list=width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_out, kernel_size, stride, padding=self.padding, dilation=dilation, groups=self.groups, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_268": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_324": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.conv1(x), self.conv2(x[:, :, 1:, 1:])], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "einsum('b h i j, b h j d -> b h i d', attn, v)",
                            "Call"
                        ],
                        [
                            "rearrange(out, 'b h (x y) d -> b (h d) x y', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_value, attention.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "out.view(m_batchsize, C, width, height)",
                            "Call"
                        ],
                        [
                            "self.gamma * out + x",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)), int(x.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_357": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_442": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_445": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_506": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.conv1(x), self.conv2(x[:, :, 1:, 1:])], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "einsum('b h i j, b h j d -> b h i d', attn, v)",
                            "Call"
                        ],
                        [
                            "rearrange(out, 'b h (x y) d -> b (h d) x y', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_value, attention.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "out.view(m_batchsize, C, width, height)",
                            "Call"
                        ],
                        [
                            "self.gamma * out + x",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)), int(x.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_526": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_586": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv1(x), self.conv2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_729": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_743": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(dim, dim_out, kernel_size, padding=padding, stride=stride, dilation=1, groups=1, bias=False, width_mult_list=width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_785": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_791": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_797": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "attn_dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_799": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_805": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_895": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_896": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_897": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(C_in, C_out, 1, 1, padding=0, dilation=dilation, groups=groups, bias=False, width_mult_list=width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_out, 1, 1, padding=0, dilation=dilation, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_437": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(C_in, C_out, 1, 1, padding=0, dilation=dilation, groups=groups, bias=False, width_mult_list=width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_449": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_out, 1, 1, padding=0, dilation=dilation, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_528": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_753": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim_out, kernel_size, stride=stride, padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_760": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_898": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_534": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_535": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_641": {
                "*size": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_642": {
                "*size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_660": {
                "*size": {
                    "value": "height * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_661": {
                "*size": {
                    "value": "width * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_807": {
                "in_channels": {
                    "value": "attn_dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dim_in",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_131": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_203": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_287": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_372": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_450": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_466": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_553": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_754": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_788": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_802": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_836": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/seg_metrics.py": {
        "torch": {
            "max_32": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict.cpu().numpy() + 1",
                            "BinOp"
                        ],
                        [
                            "predict.cpu().numpy() + 1",
                            "BinOp"
                        ],
                        [
                            "predict * k.astype(predict.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_49": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict.cpu().numpy() + 1",
                            "BinOp"
                        ],
                        [
                            "predict.cpu().numpy() + 1",
                            "BinOp"
                        ],
                        [
                            "predict * k.astype(predict.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/seg_oprs.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_87": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_planes, out_planes // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv_refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv_refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.channel_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.point_wise_cbr(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.att_sa(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_361": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_375": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.point_wise_cbr(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.att_sa(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)) // 2, int(x.size(3)) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "variable": {
                    "value": "self.center_conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_422": {
                "variable": {
                    "value": "self.offset_conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_496": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_506": {
                "variable": {
                    "value": "self.center_conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_509": {
                "variable": {
                    "value": "self.offset_conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes",
                            "Name"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ],
                        [
                            "in_planes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_536": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.att_sa(x)",
                            "Call"
                        ],
                        [
                            "self.att_sa(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(xs, size=low_level_feat_sem.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((xs, low_level_feat_sem), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_feat_sem.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_537": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, low_level_feat_sem)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_544": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.point_wise_cbr(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.att_sa(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_out, 1, 1, padding=0, dilation=dilation, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_382": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(int(x.size(2)) // 2, int(x.size(3)) // 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(int(x.size(2)), int(x.size(3))), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)), int(x.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_planes // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "out_planes // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_174": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_370": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/slimmable_ops.py": {
        "torch": {
            "conv2d_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight[:self.out_channels, :self.in_channels, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BatchNorm2d(i, affine=True) for i in [make_divisible(self.num_features_max * width_mult) for width_mult in width_mult_list]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/test.py": {
        "torch": {}
    },
    "CDARTS/CDARTS_segmentation/train/test_seg.py": {
        "torch": {
            "set_device_85": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_105": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_134": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/train_ade20k_cydas.py": {
        "torch": {
            "BatchSampler_232": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "InferenceSampler(len(dataset))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetFromList(dataset, copy=False)",
                            "Call"
                        ],
                        [
                            "MapDataset(dataset, mapper)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, 4, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "trivial_batch_collator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_441": {
                "variable": {
                    "value": "pixel_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_442": {
                "variable": {
                    "value": "pixel_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_505": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.local_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_509": {
                "variable": {
                    "value": "pixel_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_510": {
                "variable": {
                    "value": "pixel_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hist_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n_classes, n_classes)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_247": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_276": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_277": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, n_classes, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_550": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((N, n_classes, H, W)).cuda()",
                            "Call"
                        ],
                        [
                            "probs + prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_534": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_299": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamW_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_542": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_543": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_421": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model_ema.ema.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'last.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'last.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_345": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_402": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model_ema.ema.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'best_checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'best_checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_541": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['image'].cuda(non_blocking=True) for x in sample]",
                            "ListComp"
                        ],
                        [
                            "[(x - pixel_mean) / pixel_std for x in image]",
                            "ListComp"
                        ],
                        [
                            "ImageList.from_tensors(image, args.size_divisibility).tensor",
                            "Attribute"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/CDARTS_segmentation/train/train_cydas.py": {
        "torch": {
            "Tensor_393": {
                "variable": {
                    "value": "pixel_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_394": {
                "variable": {
                    "value": "pixel_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_454": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.local_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hist_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n_classes, n_classes)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_200": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_221": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_271": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, n_classes, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_273": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_475": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_492": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((N, n_classes, H, W)).cuda()",
                            "Call"
                        ],
                        [
                            "probs + prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_246": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamW_275": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_483": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(torch.flip(image, dims=(3,)))",
                            "Call"
                        ],
                        [
                            "torch.flip(output, dims=(3,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model_ema.ema.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'last.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_378": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'last.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_292": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_352": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model_ema.ema.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'best_checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_359": {
                "obj": {
                    "value": "{'start_epoch': epoch + 1, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'best_checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_482": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/configs/config.py": {
        "torch": {
            "device_count_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/core/augment_function.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__49": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/core/pretrain_function.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_234": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_288": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_289": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(all_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__48": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_186": {
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "synchronize_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/core/search_function.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_11": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_204": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_205": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__59": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__109": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__164": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/datasets/cifar.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[split_mid:num_train])",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_89": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_90": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/datasets/data_utils.py": {
        "torch": {
            "tensor_359": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[target[1] for target in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(imgs), 3, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_48": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_78": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485 * 255, 0.456 * 255, 0.406 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229 * 255, 0.224 * 255, 0.225 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_382": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_384": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "current_stream_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "ndarray": {
                    "value": "nump_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(nump_array, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(nump_array, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_52": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/datasets/imagenet.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[split_mid:num_train])",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_88": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_89": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/augment_cells.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/aux_head.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_22": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_46": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_12": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_84": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/cdarts_controller.py": {
        "torch": {
            "AdaptiveAvgPool2d_54": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.super_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.super_layers_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.super_layers_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.super_layers_pool_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.fc_super",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur",
                            "Name"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self._arch_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(self.num_edge, len(self.search_space))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_205": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_232": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "ensemble_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.fc_nas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur",
                            "Name"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.333 * torch.rand(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.333 * torch.ones(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "em_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ensemble_param[0] * outputs[0], ensemble_param[1] * outputs[1], ensemble_param[2] * outputs[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_314": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._arch_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_372": {
                "input": {
                    "value": "torch.abs(self._arch_parameters[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_235": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_362": {
                "input": {
                    "value": "self._arch_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_372": {
                "input": {
                    "value": "self._arch_parameters[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "self.num_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.search_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_349": {
                "input": {
                    "value": "self._arch_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/loss.py": {
        "torch": {
            "CosineSimilarity_5": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_6": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_7": {
                "variable": {
                    "value": "smooth_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_15": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "cos(outputs, teacher_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/model_augment.py": {
        "torch": {
            "AdaptiveAvgPool2d_18": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/model_test.py": {
        "torch": {
            "Linear_72": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_73": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, inplanes, kernel_size=7, stride=2, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "stem0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "stem1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/ops.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_179": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.convs[0](x), self.convs[1](y[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_115": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConstantPad2d_171": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_116": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_80": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_outs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/models/search_cells.py": {
        "torch": {
            "ModuleDict_15": {
                "variable": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.edges[node_str]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "modules": {
                    "value": "xlists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[OPS[op_name](C_in, C_out, stride, affine, track_running_stats) for op_name in op_names]",
                            "ListComp"
                        ],
                        [
                            "[OPS[op_name](C_in, C_out, 1, affine, track_running_stats) for op_name in op_names]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/benchmark201/search.py": {
        "torch": {
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "net_crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_124": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter * config.search_iter_epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "lr_scheduler_retrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "alpha_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_56": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "resume_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "alpha_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "controller.module.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.alpha_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.alpha_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_198": {
                "variable": {
                    "value": "lr_scheduler_retrain",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList()",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}], lr=config.nasnet_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}], lr=config.nasnet_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_200": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}], lr=config.w_lr, momentum=config.w_momentum, weight_decay=config.w_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.search_iter * config.search_iter_epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "config.w_lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_163": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.ensemble_param}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_171": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.super_layers.parameters()}, {'params': controller.module.fc_super.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.w_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters()}, {'params': controller.module.ensemble_param}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.nasnet_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': controller.module.feature_extractor.parameters()}, {'params': controller.module.nas_layers.parameters()}, {'params': controller.module.distill_aux_head1.parameters()}, {'params': controller.module.distill_aux_head2.parameters()}, {'params': controller.module.fc_nas.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.nasnet_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.w_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.w_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/utils/genotypes.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "dag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_91": {
                "variable": {
                    "value": "(edge_max, primitive_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(w.view(-1, 1) * edges)[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_92": {
                "variable": {
                    "value": "(topk_edge_values, topk_edge_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_max.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gumbel_softmax_141": {
                "variable": {
                    "value": "discrete_a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edges[:, :-1].reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gumbel_softmax_143": {
                "logits": {
                    "value": "edges[:, :-1].reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/benchmark201/utils/utils.py": {
        "torch": {
            "save_105": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_108": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDARTS/lib/config.py": {
        "torch": {
            "device_count_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/core/augment_function.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__49": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/core/pretrain_function.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_234": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_288": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_289": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(all_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__48": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_186": {
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "synchronize_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/core/search_function.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_10": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_148": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_217": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__72": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__122": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__177": {
                "parameters": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.w_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/datasets/cifar.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[split_mid:num_train])",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_88": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_89": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "dset_cls(root=config.data_dir, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/datasets/data_utils.py": {
        "torch": {
            "tensor_359": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[target[1] for target in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(imgs), 3, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_48": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_78": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485 * 255, 0.456 * 255, 0.406 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229 * 255, 0.224 * 255, 0.225 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_382": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_384": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "current_stream_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "ndarray": {
                    "value": "nump_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(nump_array, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(nump_array, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_52": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/datasets/imagenet.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[split_mid:num_train])",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_88": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_89": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), ImageNetPolicy(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetDistributedSampler(train_data, indices[:split_mid])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "dset.ImageFolder(config.test_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/augment_cells.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "s_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[i] for i in self.concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/aux_head.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_22": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_46": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_12": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_84": {
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/cdarts_controller.py": {
        "torch": {
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.super_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.super_layers_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.super_layers_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.super_layers_pool_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.fc_super",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_383": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_407": {
                "variable": {
                    "value": "arch_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_409": {
                "variable": {
                    "value": "alpha_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_410": {
                "variable": {
                    "value": "alpha_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_411": {
                "variable": {
                    "value": "beta_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_412": {
                "variable": {
                    "value": "beta_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_432": {
                "variable": {
                    "value": "arch_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_434": {
                "variable": {
                    "value": "alpha_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_435": {
                "variable": {
                    "value": "alpha_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_436": {
                "variable": {
                    "value": "beta_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_437": {
                "variable": {
                    "value": "beta_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_486": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, inplanes, kernel_size=7, stride=2, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_500": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_501": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_511": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_512": {
                "variable": {
                    "value": "stem0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_520": {
                "variable": {
                    "value": "stem1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_702": {
                "variable": {
                    "value": "ensemble_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_714": {
                "variable": {
                    "value": "output_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc_nas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.333 * torch.rand(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.ensemble_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.333 * torch.ones(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "em_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ensemble_param[0] * outputs[0], ensemble_param[1] * outputs[1], ensemble_param[2] * outputs[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_722": {
                "variable": {
                    "value": "(edge_max, primitive_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(w.view(-1, 1) * edges)[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_723": {
                "variable": {
                    "value": "(topk_edge_values, topk_edge_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_max.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nas_layers_num + j",
                            "BinOp"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_770": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_489": {
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_490": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_492": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_502": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_503": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_513": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_514": {
                "num_features": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_515": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_516": {
                "in_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_517": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_521": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_522": {
                "in_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_523": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "softmax_606": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_607": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_608": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_609": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_625": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_626": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_627": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_628": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_712": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_713": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_789": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_415": {
                "data": {
                    "value": "0.001 * torch.randn(i + 2, n_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "0.001 * torch.randn(i + 2, n_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_440": {
                "data": {
                    "value": "0.001 * torch.ones(i + 2, n_ops)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_441": {
                "data": {
                    "value": "0.001 * torch.ones(i + 2, n_ops)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_442": {
                "data": {
                    "value": "0.1 * torch.ones(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_443": {
                "data": {
                    "value": "0.1 * torch.ones(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_581": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_585": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_716": {
                "data": {
                    "value": "torch.zeros_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_741": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_743": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_745": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_746": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_747": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_748": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_770": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_418": {
                "data": {
                    "value": "0.001 * torch.randn(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_419": {
                "data": {
                    "value": "0.001 * torch.randn(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_421": {
                "data": {
                    "value": "0.1 * torch.ones(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_422": {
                "data": {
                    "value": "0.1 * torch.ones(i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_592": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_596": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_normal",
                            "Name"
                        ],
                        [
                            "beta_reduce",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_716": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_normal",
                            "Name"
                        ],
                        [
                            "alpha_reduce",
                            "Name"
                        ],
                        [
                            "weights_normal",
                            "Name"
                        ]
                    ]
                }
            },
            "randn_415": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ops",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_416": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ops",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_440": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ops",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_441": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ops",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_442": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_443": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_418": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_419": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_421": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_422": {
                "*size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/loss.py": {
        "torch": {
            "CosineSimilarity_5": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_6": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_7": {
                "variable": {
                    "value": "smooth_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_15": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "cos(outputs, teacher_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/model_augment.py": {
        "torch": {
            "AdaptiveAvgPool2d_19": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/model_test.py": {
        "torch": {
            "Linear_70": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_channel * self.stem_multiplier",
                            "BinOp"
                        ],
                        [
                            "c_cur * 2 * self.n_nodes",
                            "BinOp"
                        ],
                        [
                            "c_cur * self.n_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_71": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, inplanes, kernel_size=7, stride=2, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "stem",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "feature_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "stem0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_cur // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "stem1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_131": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ],
                        [
                            "self.c_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "C_cur // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_156": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "C_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_cur * 2",
                            "BinOp"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ],
                        [
                            "init_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.nas_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/ops.py": {
        "torch": {
            "transpose_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DilConv(C_in, C_in, kernel_size, stride, padding, dilation=1, affine=affine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv1(x), self.conv2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_116": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_269": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/models/search_cells.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.dag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "s_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/utils/genotypes.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "dag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_91": {
                "variable": {
                    "value": "(edge_max, primitive_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(w.view(-1, 1) * edges)[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_92": {
                "variable": {
                    "value": "(topk_edge_values, topk_edge_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_max.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gumbel_softmax_141": {
                "variable": {
                    "value": "discrete_a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edges[:, :-1].reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gumbel_softmax_143": {
                "logits": {
                    "value": "edges[:, :-1].reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CDARTS/lib/utils/utils.py": {
        "torch": {
            "save_88": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_91": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Cream/lib/core/retrain.py": {
        "torch": {
            "synchronize_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/core/test.py": {
        "torch": {
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/core/train.py": {
        "torch": {
            "softmax_61": {
                "variable": {
                    "value": "soft_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, teacher_cand).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/models/MetaMatchingNetwork.py": {
        "torch": {
            "grad_55": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "kd_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_value * cross_entropy_loss_with_soft_target(output, soft_label)",
                            "BinOp"
                        ],
                        [
                            "self.forward_training(x, model, random_cand, teacher_cand, meta_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.module.rand_parameters(random_cand)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_63": {
                "variable": {
                    "value": "grad_student_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "validation_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(output_2, target[slice:slice * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_validation(input, target, random_cand, model, loss_fn)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.module.rand_parameters(random_cand)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_66": {
                "variable": {
                    "value": "grad_teacher",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "students_weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model.module.rand_parameters(teacher_cand, self.cfg.SUPERNET.PICK_METHOD == 'meta')",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_student_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(validation_loss, model.module.rand_parameters(random_cand), retain_graph=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__22": {
                "parameters": {
                    "value": "model.module.rand_parameters(random_cand)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__34": {
                "parameters": {
                    "value": "model.module.rand_parameters(teacher_cand, self.cfg.SUPERNET.PICK_METHOD == 'meta')",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "soft_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, teacher_cand)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/models/PrioritizedBoard.py": {
        "torch": {
            "sigmoid_38": {
                "variable": {
                    "value": "meta_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(inputx, random_cand)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(outputs[:self.cfg.SUPERNET.SLICE].detach())",
                            "Call"
                        ],
                        [
                            "deepcopy(teacher_output[:self.cfg.SUPERNET.SLICE].detach())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/models/blocks/inverted_residual_block.py": {
        "torch": {}
    },
    "Cream/lib/models/blocks/residual_block.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / expansion)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Cream/lib/utils/builder_util.py": {
        "torch": {}
    },
    "Cream/lib/utils/flops_table.py": {
        "torch": {
            "randn_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Cream/lib/utils/util.py": {
        "torch": {
            "LogSoftmax_167": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "add_weight_decay_supernet(model, args, weight_decay)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ],
                        [
                            "weight_decay / args.lr",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "add_weight_decay_supernet(model, args, weight_decay)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ],
                        [
                            "weight_decay / args.lr",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "add_weight_decay_supernet(model, args, weight_decay)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ],
                        [
                            "weight_decay / args.lr",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "args.opt_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Cream/tools/retrain.py": {
        "torch": {
            "SummaryWriter_53": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(output_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_116": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_125": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_231": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_233": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Cream/tools/test.py": {
        "torch": {
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_46": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(output_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_105": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Cream/tools/train.py": {
        "torch": {
            "set_device_55": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_64": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_193": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_195": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/engine.py": {
        "torch": {
            "CrossEntropyLoss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/irpe.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_like_106": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_293": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_366": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "count_nonzero_111": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rp_abs <= alpha",
                            "Compare"
                        ],
                        [
                            "values == v",
                            "Compare"
                        ]
                    ]
                }
            },
            "matmul_687": {
                "input": {
                    "value": "x.permute(1, 2, 0, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lookup_table_weight[:, rp_bucket.flatten()].view(self.num_heads, L_query, L_key, self.head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_687": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_480": {
                "variable": {
                    "value": "self.lookup_table_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_579": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L * self.num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rp_bucket.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "rp_bucket.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(0, 1).reshape(-1, B * L_query, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_40": {
                "input": {
                    "value": "rp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_position[not_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_484": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.head_dim, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_493": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "rp_abs_out / alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/losses.py": {
        "torch": {
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "variable": {
                    "value": "distillation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_kd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "target": {
                    "value": "teacher_outputs.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_50": {
                "input": {
                    "value": "F.log_softmax(outputs_kd / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(teacher_outputs / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "input": {
                    "value": "outputs_kd / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_52": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/main.py": {
        "torch": {
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_231": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_232": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_296": {
                "variable": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed_checkpoint[:, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "pos_tokens.reshape(-1, orig_size, orig_size, embedding_size).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(pos_tokens, size=(new_size, new_size), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "pos_tokens.permute(0, 2, 3, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_size, new_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "new_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(extra_tokens, pos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_317": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.nb_classes, drop_rate=args.drop, drop_path_rate=args.drop_path, drop_block_rate=None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_218": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_226": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_229": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_273": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_337": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_372": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_355": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/mini_deit_models.py": {
        "torch": {}
    },
    "MiniViT/Mini-DeiT/mini_vision_transformer.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.instances",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "instances",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.drop_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DropPath(drop_path) if drop_path > 0.0 else nn.Identity() for drop_path in drop_paths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, pos_embed_len, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_254": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pos_embed_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_patches if use_cls_token else num_patches",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_219": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth // repeated_times",
                            "BinOp"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "transform_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "transform_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Identity_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/models.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.dist_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 2, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, dist_token, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/rpe_ops/rpe_index.py": {
        "torch": {
            "randn_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "L_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_70": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(L_query, L_key)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L_query * num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_88": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/rpe_ops/setup.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/samplers.py": {
        "torch": {
            "Generator_35": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_38": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-DeiT/utils.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mem_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_229": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/data/build.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(indices)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.DATA.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.DATA.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.DATA.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.DATA.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_34": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/data/cached_image_folder.py": {
        "torch": {}
    },
    "MiniViT/Mini-Swin/data/samplers.py": {
        "torch": {
            "randperm_16": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/lr_scheduler.py": {
        "torch": {}
    },
    "MiniViT/Mini-Swin/main.py": {
        "torch": {
            "log_softmax_34": {
                "variable": {
                    "value": "student_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "targets_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "targets.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-targets_prob * student_likelihood",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SwinTransformerDISTILL(img_size=224, patch_size=4, in_chans=3, num_classes=1000, embed_dim=embed_dim, depths=depths, num_heads=num_heads, window_size=window_size, mlp_ratio=4.0, qkv_bias=True, qk_scale=None, drop_rate=0.0, drop_path_rate=0.1, ape=False, patch_norm=True, use_checkpoint=False, is_student=False)",
                            "Call"
                        ],
                        [
                            "build_model(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.LOCAL_RANK], broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.LOCAL_RANK]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_476": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_72": {
                "variable": {
                    "value": "student_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.normalize(student_hidden, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_73": {
                "variable": {
                    "value": "teacher_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.normalize(teacher_hidden, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_554": {
                "device": {
                    "value": "config.LOCAL_RANK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_559": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.SEED + dist.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "model_teacher",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_teacher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model('regnety_160', pretrained=False, num_classes=config.MODEL.NUM_CLASSES, global_pool='avg')",
                            "Call"
                        ],
                        [
                            "load_teacher_model(type=teacher_type)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model_teacher, device_ids=[config.LOCAL_RANK], broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.LOCAL_RANK]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.DISTILL.TEACHER",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_182": {
                "variable": {
                    "value": "criterion_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_535": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "(student_relation - teacher_relation) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.DISTILL.TEACHER",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "loss_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss_truth.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "loss_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss_truth.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "loss_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss_truth.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "loss_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss_truth.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__302": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__308": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__333": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__339": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__415": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__421": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__435": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__441": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.TRAIN.CLIP_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/models/swin_mlp.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_96": {
                "variable": {
                    "value": "self.spatial_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_heads * self.window_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_heads * self.window_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_255": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinMLPBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, drop=drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_390": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_396": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_413": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_446": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "shifted_x[:, P_t:-P_b, P_l:-P_r, :].contiguous()",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "shifted_x[:, P_t:-P_b, P_l:-P_r, :].contiguous()",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, P_l, P_r, P_t, P_b]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_387": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_414": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_387": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_393": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/models/swin_transformer.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_86": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_89": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_104": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_364": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_427": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_506": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_512": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_530": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_237": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_503": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_88": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_531": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_509": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/models/swin_transformer_distill.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_35": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_38": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_53": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_266": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlockDISTILL(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_368": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_393": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_398": {
                "variable": {
                    "value": "self.fit_dense_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_445": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_189": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_365": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_37": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_394": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_365": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_371": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "in_features": {
                    "value": "int(embed_dim * 2 ** i_layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(fit_size_C * 2 ** i_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/models/swin_transformer_minivit.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_87": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_95": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_97": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.drop_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_491": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_561": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_648": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_655": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_679": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_717": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "self.local_norm_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "x + self.local_conv_list[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "x.view(B, C, H * W).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path[layer_index](self.mlp(norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.forward_feature(x, init_window_shift, index)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.norm1_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.proj_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.proj_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_258": {
                "variable": {
                    "value": "self.norm2_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.local_norm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_275": {
                "variable": {
                    "value": "self.local_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_300": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "self.local_norm_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "x + self.local_conv_list[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "x.view(B, C, H * W).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path[layer_index](self.mlp(norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.forward_feature(x, init_window_shift, index)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_320": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_645": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_96": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_680": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_680": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_645": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_651": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "_window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "MiniViT/Mini-Swin/models/swin_transformer_minivit_distill.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_39": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_220": {
                "variable": {
                    "value": "self.drop_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_397": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_515": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_522": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_546": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_551": {
                "variable": {
                    "value": "self.fit_dense_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_603": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "self.local_norm_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "x + self.local_conv_list[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "x.view(B, C, H * W).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path[layer_index](self.mlp(norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.norm1_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.proj_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.proj_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.norm2_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.local_norm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.local_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_252": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "self.local_norm_list[layer_index](x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "x + self.local_conv_list[layer_index](x)",
                            "BinOp"
                        ],
                        [
                            "x.view(B, C, H * W).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path[layer_index](self.mlp(norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_272": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_512": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_48": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_547": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_512": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_518": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "_window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "_window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_554": {
                "in_features": {
                    "value": "int(embed_dim * 2 ** i_layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(fit_size_C * 2 ** i_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/my_meter.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "sum_v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/optimizer.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.TRAIN.OPTIMIZER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.TRAIN.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_22": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.TRAIN.OPTIMIZER.EPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.TRAIN.OPTIMIZER.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.TRAIN.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MiniViT/Mini-Swin/utils.py": {
        "torch": {
            "load_92": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.MODEL.RESUME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "save_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'max_accuracy': max_accuracy, 'epoch': epoch, 'config': config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.OUTPUT, f'ckpt_epoch_{epoch}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value.permute(1, 0).view(1, nh, sl, sl)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(l2, l2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/aug_tv_transforms.py": {
        "torch": {
            "mm_741": {
                "variable": {
                    "value": "transformed_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.transformation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/dataset.py": {
        "torch": {}
    },
    "TinyViT/data/augmentation/dataset_wrapper.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/distributed_sampler.py": {
        "torch": {
            "Generator_103": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_interleave_111": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(self.dataset)))",
                            "Call"
                        ],
                        [
                            "indices + indices[:padding_size]",
                            "BinOp"
                        ],
                        [
                            "indices[self.rank:self.total_size:self.num_replicas]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(len(self.dataset), generator=g)",
                            "Call"
                        ],
                        [
                            "torch.arange(start=0, end=len(self.dataset))",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(indices, repeats=self.num_repeats, dim=0).tolist()",
                            "Call"
                        ],
                        [
                            "indices[self.rank:self.total_size:self.num_replicas]",
                            "Subscript"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.num_repeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_106": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_108": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/loader.py": {
        "torch": {}
    },
    "TinyViT/data/augmentation/mixup.py": {
        "torch": {
            "full_20": {
                "size": {
                    "value": "(x.size()[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "off_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smoothing / num_classes",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_336": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *batch[0][0].shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[b[1] for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "lam_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(batch_size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "lam_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(batch_size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "lam_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(batch_size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "lam_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(batch_size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_281": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "data": {
                    "value": "lam_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(batch_size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_309": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "ndarray": {
                    "value": "mixed.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "ndarray": {
                    "value": "mixed_i.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "ndarray": {
                    "value": "mixed_j.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "ndarray": {
                    "value": "mixed.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/augmentation/random_erasing.py": {
        "torch": {
            "tensor_29": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.normal(size=shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "(patch_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TinyViT/data/augmentation/transforms.py": {
        "torch": {
            "from_numpy_35": {
                "ndarray": {
                    "value": "np_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(np_img, 2)",
                            "Call"
                        ],
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(np_img, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TinyViT/data/augmentation/transforms_factory.py": {
        "torch": {
            "tensor_38": {
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_160": {
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TinyViT/data/build.py": {
        "torch": {
            "DataLoader_80": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetWrapper(dataset_train, logits_path=config.DISTILL.TEACHER_LOGITS_PATH, topk=config.DISTILL.LOGITS_TOPK, write=config.DISTILL.SAVE_TEACHER_LOGITS)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDistributedSampler(dataset_train, shuffle=True, drop_last=False, padding=True, pair=mixup_active and config.DISTILL.ENABLED)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.DATA.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.DATA.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "not config.DISTILL.SAVE_TEACHER_LOGITS",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDistributedSampler(dataset_val, shuffle=False, drop_last=False, padding=False, pair=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.DATA.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.DATA.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/data/imagenet22k_dataset.py": {
        "torch": {}
    },
    "TinyViT/data/sampler.py": {
        "torch": {
            "Generator_112": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_114": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_116": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indices, indices[:padding_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/lr_scheduler.py": {
        "torch": {}
    },
    "TinyViT/main.py": {
        "torch": {
            "DistributedDataParallel_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.LOCAL_RANK], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.LOCAL_RANK]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_433": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_492": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_495": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.LOCAL_RANK], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_512": {
                "variable": {
                    "value": "timing",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "timing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(timing, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_531": {
                "device": {
                    "value": "config.LOCAL_RANK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_537": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.SEED + dist.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_538": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.SEED + dist.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "synchronize_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_253": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_345": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_447": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_215": {
                "input": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_215": {
                "input": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_memory_allocated_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/models/clip.py": {
        "torch": {
            "MultiheadAttention_34": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('c_fc', nn.Linear(d_model, d_model * 4)), ('gelu', QuickGELU()), ('c_proj', nn.Linear(d_model * 4, d_model))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.resblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ResidualAttentionBlock(width, heads, attn_mask) for _ in range(layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.class_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn(width)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn((input_resolution // patch_size) ** 2 + 1, width)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn(width, output_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.class_embedding.to(x.dtype) + torch.zeros(x.shape[0], 1, x.shape[-1], dtype=x.dtype, device=x.device), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_27": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_76": {
                "*size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_78": {
                "*size": {
                    "value": "(input_resolution // patch_size) ** 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/models/remap_layer.py": {
        "torch": {
            "cat_23": {
                "variable": {
                    "value": "expand_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, dummy_cls]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/models/tiny_vit.py": {
        "torch": {
            "BatchNorm2d_27": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "w.size(1) * self.c.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.c.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.c.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.c.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.c.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d_BN(in_chans, n // 2, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MBConv(dim, dim, conv_expand_ratio, activation, drop_path[i] if isinstance(drop_path, list) else drop_path) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_192": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_196": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_226": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dh + nh_kd * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.attention_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heads, len(attention_offsets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_413": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TinyViTBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, mlp_ratio=mlp_ratio, drop=drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, local_conv_size=local_conv_size, activation=activation) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_481": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_511": {
                "variable": {
                    "value": "self.norm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_conv_size // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(attention_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_346": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.act3(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.dh)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "res_x + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 2).reshape(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, L).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(x))",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, pad_r, 0, pad_b))",
                            "Call"
                        ],
                        [
                            "x.view(B, nH, self.window_size, nW, self.window_size, C).transpose(2, 3).reshape(B * nH * nW, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, nH, nW, self.window_size, self.window_size, C).transpose(2, 3).reshape(B, pH, pW, C)",
                            "Call"
                        ],
                        [
                            "x[:, :H, :W].contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, L, C)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "self.layers[0](x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.mean(1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.norm_head(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_r, 0, pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "in_features": {
                    "value": "embed_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_513": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_477": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/my_meter.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._sum, self._count]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/optimizer.py": {
        "torch": {
            "SGD_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ],
                        [
                            "divide_param_groups_by_lr_scale(parameters)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.TRAIN.OPTIMIZER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.TRAIN.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ],
                        [
                            "divide_param_groups_by_lr_scale(parameters)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.TRAIN.OPTIMIZER.EPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.TRAIN.OPTIMIZER.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.TRAIN.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/save_logits.py": {
        "torch": {
            "DistributedDataParallel_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.LOCAL_RANK], broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.LOCAL_RANK]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_271": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "softmax_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(samples)",
                            "Call"
                        ],
                        [
                            "model(samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_175": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "softmax_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(samples)",
                            "Call"
                        ],
                        [
                            "model(samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_340": {
                "device": {
                    "value": "config.LOCAL_RANK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_348": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.SEED + dist.get_rank() + config.TRAIN.START_EPOCH * dist.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_349": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.SEED + dist.get_rank() + config.TRAIN.START_EPOCH * dist.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "synchronize_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_158": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_233": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_285": {
                "enabled": {
                    "value": "config.AMP_ENABLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "count_nonzero_245": {
                "input": {
                    "value": "indices != saved_logits_index.cuda()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_memory_allocated_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TinyViT/tinyvit_utils.py": {
        "torch": {}
    },
    "TinyViT/utils.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.MODEL.PRETRAINED",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_22": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.MODEL.RESUME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "save_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'max_accuracy': max_accuracy, 'scaler': loss_scaler.state_dict(), 'epoch': epoch, 'config': config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.OUTPUT, f'ckpt_epoch_{epoch}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_266": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ],
                        [
                            "float(norm_type)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradScaler_275": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_260": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "variable": {
                    "value": "relative_position_bias_table_pretrained_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_position_bias_table_pretrained.permute(1, 0).view(1, nH1, S1, S1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(S2, S2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "relative_position_bias_table_pretrained_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_position_bias_table_pretrained.view(1, nH1, S1, S1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(S2, S2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_161": {
                "variable": {
                    "value": "absolute_pos_embed_pretrained_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "absolute_pos_embed_pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[k]",
                            "Subscript"
                        ],
                        [
                            "absolute_pos_embed_pretrained.reshape(-1, S1, S1, C1)",
                            "Call"
                        ],
                        [
                            "absolute_pos_embed_pretrained.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(S2, S2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_178": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, mean_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_266": {
                "tensors": {
                    "value": "[torch.norm(p.grad.detach(), norm_type).to(device) for p in parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__284": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[parameters]",
                            "List"
                        ],
                        [
                            "list(filter(lambda p: p.grad is not None, parameters))",
                            "Call"
                        ],
                        [
                            "[parameters]",
                            "List"
                        ],
                        [
                            "[p for p in parameters if p.grad is not None]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "clip_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, mean_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/datasets/__init__.py": {
        "torch": {}
    },
    "iRPE/DETR-with-iRPE/datasets/coco.py": {
        "torch": {
            "as_tensor_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_125": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] if 'iscrowd' in obj else 0 for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "target[orig_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_169": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_140": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/datasets/coco_eval.py": {
        "torch": {
            "stack_167": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/datasets/coco_panoptic.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "target[image_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[ann_info['image_id'] if 'image_id' in ann_info else ann_info['id']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_59": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_60": {
                "variable": {
                    "value": "target[orig_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_48": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(Image.open(ann_path), dtype=np.uint32)",
                            "Call"
                        ],
                        [
                            "rgb2id(masks)",
                            "Call"
                        ],
                        [
                            "masks == ids[:, None, None]",
                            "Compare"
                        ],
                        [
                            "torch.as_tensor(masks, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[ann['category_id'] for ann in ann_info['segments_info']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "target[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[ann[name] for ann in ann_info['segments_info']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/datasets/transforms.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padded_image.size[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_29": {
                "variable": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "cropped_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_boxes.reshape(-1, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "target[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "target['masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padding[0], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_49": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_boxes[:, 1, :] > cropped_boxes[:, 0, :]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_30": {
                "data": {
                    "value": "[j, i, j, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "[-1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_117": {
                "data": {
                    "value": "[ratio_width, ratio_height, ratio_width, ratio_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/engine.py": {
        "torch": {
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "orig_target_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['orig_size'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "target_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['size'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__55": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/main.py": {
        "torch": {
            "device_118": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model_without_ddp.named_parameters() if 'backbone' not in n and p.requires_grad]}, {'params': [p for (n, p) in model_without_ddp.named_parameters() if 'backbone' in n and p.requires_grad], 'lr': args.lr_backbone}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_145": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(param_dicts, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchSampler_157": {
                "variable": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.BatchSampler(sampler_train, args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_val, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_131": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_151": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_152": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val', args=args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_154": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_155": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_173": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.frozen_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "coco_evaluator.coco_eval['bbox'].eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "output_dir / 'eval' / name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/backbone.py": {
        "torch": {
            "ones_30": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "input": {
                    "value": "m[None].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/detr.py": {
        "torch": {
            "device_318": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.class_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.query_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "backbone.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "empty_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['labels'][J] for (t, (_, J)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_117": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_121": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_logits.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_logits.shape[:2], self.num_classes, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.empty_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_136": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(v['labels']) for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(args.device)",
                            "Call"
                        ],
                        [
                            "pred_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "l1_loss_139": {
                "variable": {
                    "value": "card_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "card_pred.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_lengths.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['boxes'][i] for (t, (_, i)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_153": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'][idx]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([t['boxes'][i] for (t, (_, i)) in zip(targets, indices)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(tgt, i) for (i, (_, tgt)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_229": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(iter(outputs.values())).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_232": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_boxes / get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "scale_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_w, img_h, img_w, img_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(n, k) for (n, k) in zip([input_dim] + h, h + [output_dim]))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "diag_158": {
                "input": {
                    "value": "box_ops.generalized_box_iou(box_ops.box_cxcywh_to_xyxy(src_boxes), box_ops.box_cxcywh_to_xyxy(target_boxes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_195": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(args.dec_layers - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_201": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(args.dec_layers - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_296": {
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_300": {
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/matcher.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['labels'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['boxes'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cdist_71": {
                "variable": {
                    "value": "cost_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'].flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v['boxes'] for v in targets])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/position_encoding.py": {
        "torch": {
            "arange_40": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_45": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_47": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_68": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_emb.unsqueeze(0).repeat(h, 1, 1), y_emb.unsqueeze(1).repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/rpe_attention/irpe.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_like_106": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_293": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_366": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "count_nonzero_111": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rp_abs <= alpha",
                            "Compare"
                        ],
                        [
                            "values == v",
                            "Compare"
                        ]
                    ]
                }
            },
            "matmul_687": {
                "input": {
                    "value": "x.permute(1, 2, 0, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lookup_table_weight[:, rp_bucket.flatten()].view(self.num_heads, L_query, L_key, self.head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_687": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_480": {
                "variable": {
                    "value": "self.lookup_table_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_579": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L * self.num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rp_bucket.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "rp_bucket.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(0, 1).reshape(-1, B * L_query, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_40": {
                "input": {
                    "value": "rp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_position[not_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_484": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.head_dim, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_493": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "rp_abs_out / alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/rpe_attention/multi_head_attention.py": {
        "torch": {
            "Linear_82": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_73": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_79": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_85": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_86": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/rpe_attention/rpe_attention_function.py": {
        "torch": {
            "bmm_323": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "linear(query, q_proj_weight_non_opt, in_proj_bias[0:embed_dim])",
                            "Call"
                        ],
                        [
                            "linear(query, q_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "q.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_358": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.contiguous()",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_359": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.contiguous()",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_367": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.contiguous()",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(value, v_proj_weight_non_opt, in_proj_bias[embed_dim * 2:])",
                            "Call"
                        ],
                        [
                            "linear(value, v_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "linear(value, _w, _b)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "static_v",
                            "Name"
                        ],
                        [
                            "torch.cat([v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_381": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_output_weights, v)",
                            "Call"
                        ],
                        [
                            "attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)",
                            "Call"
                        ],
                        [
                            "linear(attn_output, out_proj_weight, out_proj_bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "out_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "out_proj_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, torch.zeros((k.size(0), 1) + k.size()[2:], dtype=k.dtype, device=k.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_150": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "in_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_150": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_220": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[0:embed_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_221": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[embed_dim:embed_dim * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_223": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[embed_dim * 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_226": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_227": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_228": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_309": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "attn_mask.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "pad(attn_mask, (0, 1))",
                            "Call"
                        ],
                        [
                            "pad(attn_mask, (0, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_311": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_padding_mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "pad(key_padding_mask, (0, 1))",
                            "Call"
                        ],
                        [
                            "pad(key_padding_mask, (0, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_162": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_187": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_196": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_205": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_270": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "attn_mask.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "pad(attn_mask, (0, 1))",
                            "Call"
                        ],
                        [
                            "pad(attn_mask, (0, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_272": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_padding_mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "pad(key_padding_mask, (0, 1))",
                            "Call"
                        ],
                        [
                            "pad(key_padding_mask, (0, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_148": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_153": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_177": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "Name"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_177": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "*size": {
                    "value": "(k.size(0), 1) + k.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "k.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "*size": {
                    "value": "(v.size(0), 1) + v.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/segmentation.py": {
        "torch": {
            "binary_cross_entropy_with_logits_207": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.sigmoid()",
                            "Call"
                        ],
                        [
                            "inputs.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.lay1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_80": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.lay2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_82": {
                "variable": {
                    "value": "self.gn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inter_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.lay3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_84": {
                "variable": {
                    "value": "self.gn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inter_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.lay4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_86": {
                "variable": {
                    "value": "self.gn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inter_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.lay5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_88": {
                "variable": {
                    "value": "self.gn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inter_dims[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.out_lay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_dims[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.adapter1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.adapter2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.adapter3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(k, self.k_linear.weight.unsqueeze(-1).unsqueeze(-1), self.k_linear.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.k_linear.weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.k_linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bqnc,bnchw->bqnhw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "qh * self.normalize_fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.flatten(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_228": {
                "variable": {
                    "value": "outputs_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_masks'].squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(outputs_masks, size=(max_h, max_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(outputs_masks.sigmoid() > self.threshold).cpu()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(max_h, max_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_234": {
                "variable": {
                    "value": "results[i][masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "results[i]['masks'].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "tuple(tt.tolist())",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cur_fpn.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_123": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cur_fpn.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_expand(x, bbox_mask.shape[1]), bbox_mask.flatten(0, 1)], 1)",
                            "Call"
                        ],
                        [
                            "self.lay1(x)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.lay2(x)",
                            "Call"
                        ],
                        [
                            "self.gn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay3(x)",
                            "Call"
                        ],
                        [
                            "self.gn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay4(x)",
                            "Call"
                        ],
                        [
                            "self.gn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "cur_fpn + F.interpolate(x, size=cur_fpn.shape[-2:], mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "self.lay5(x)",
                            "Call"
                        ],
                        [
                            "self.gn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_lay(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cur_fpn.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "m_id",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rgb2id(np_seg_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_351": {
                "variable": {
                    "value": "cur_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_classes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "variable": {
                    "value": "m_id",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "m_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_339": {
                "variable": {
                    "value": "filtered_small",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[area[i] <= 4 for (i, c) in enumerate(cur_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "keep.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/models/transformer.py": {
        "torch": {
            "LayerNorm_84": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(1).repeat(1, bs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_196": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_197": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_198": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_199": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_255": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_256": {
                "variable": {
                    "value": "self.multihead_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_260": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_263": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_264": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_265": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_267": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_337": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_78": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_177": {
                "tensors": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/rpe_ops/rpe_index.py": {
        "torch": {
            "randn_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "L_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_70": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(L_query, L_key)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L_query * num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_88": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/rpe_ops/setup.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/util/box_ops.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_29": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_55": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_78": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_13": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "tensors": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/util/misc.py": {
        "torch": {
            "tensor_106": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_357": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_119": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_322": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_337": {
                "variable": {
                    "value": "max_size_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([img.shape[i] for img in tensor_list]).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_349": {
                "variable": {
                    "value": "padded_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1], 0, padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_353": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(img[0], dtype=torch.int, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_421": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_117": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_459": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_337": {
                "tensors": {
                    "value": "[img.shape[i] for img in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_memory_allocated_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DETR-with-iRPE/util/plot_utils.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/engine.py": {
        "torch": {
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/irpe.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ],
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_like_106": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_293": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_366": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "count_nonzero_111": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rp_abs <= alpha",
                            "Compare"
                        ],
                        [
                            "values == v",
                            "Compare"
                        ]
                    ]
                }
            },
            "matmul_687": {
                "input": {
                    "value": "x.permute(1, 2, 0, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lookup_table_weight[:, rp_bucket.flatten()].view(self.num_heads, L_query, L_key, self.head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_687": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_480": {
                "variable": {
                    "value": "self.lookup_table_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_579": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L * self.num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rp_bucket.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "rp_bucket.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(0, 1).reshape(-1, B * L_query, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_639": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_40": {
                "input": {
                    "value": "rp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_position[not_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_484": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.head_dim, self.num_buckets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_493": {
                "variable": {
                    "value": "self.lookup_table_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_heads, self.num_buckets, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "rp_abs_out / alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/losses.py": {
        "torch": {
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_62": {
                "variable": {
                    "value": "distillation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_kd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "target": {
                    "value": "teacher_outputs.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_55": {
                "input": {
                    "value": "F.log_softmax(outputs_kd / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(teacher_outputs / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "outputs_kd / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_57": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/main.py": {
        "torch": {
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_235": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_232": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_233": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_297": {
                "variable": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed_checkpoint[:, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "pos_tokens.reshape(-1, orig_size, orig_size, embedding_size).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(pos_tokens, size=(new_size, new_size), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "pos_tokens.permute(0, 2, 3, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_size, new_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "new_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(extra_tokens, pos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_318": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.nb_classes, drop_rate=args.drop, drop_path_rate=args.drop_path, drop_block_rate=None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_219": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_227": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_230": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetTar(eval_dir, transform=val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_274": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_338": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_354": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/models.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.dist_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 2, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, dist_token, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/rpe_models.py": {
        "torch": {
            "randn_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/rpe_ops/rpe_index.py": {
        "torch": {
            "randn_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "L_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_70": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(L_query, L_key)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "L_query * num_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "input.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_88": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/rpe_ops/setup.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/rpe_vision_transformer.py": {
        "torch": {
            "Linear_57": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RPEBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, rpe_config=rpe_config) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_144": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/samplers.py": {
        "torch": {
            "Generator_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iRPE/DeiT-with-iRPE/utils.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mem_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_231": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}