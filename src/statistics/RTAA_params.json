{
    "DaSiamRPN/code/net.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.featureExtract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[0], configs[1], kernel_size=11, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "configs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_out * 4 * anchor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "configs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_cls1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "configs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_out * 2 * anchor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_cls2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "configs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.regress_adjust",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * anchor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * anchor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_r2(x_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.r1_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "configs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "self.conv_cls2(x_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.cls1_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/run_SiamRPN.py": {
        "torch": {
            "softmax_71": {
                "input": {
                    "value": "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/run_attack.py": {
        "torch": {
            "clamp_295": {
                "variable": {
                    "value": "x_crop_init",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_crop_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_crop + att_per * 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_crop_init, 0, 255)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_349": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(input, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_351": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "delta[:, best_pscore_id] / scale_z",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(target).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_352": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input[pos_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[pos_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_158": {
                "variable": {
                    "value": "adv_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "where((x_adv.grad > 0) | (x_adv.grad < 0), x_adv.grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.sign(adv_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x_init.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_adv - alpha * adv_grad",
                            "BinOp"
                        ],
                        [
                            "where(x_adv > x + eps, x + eps, x_adv)",
                            "Call"
                        ],
                        [
                            "where(x_adv < x - eps, x - eps, x_adv)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, x_val_min, x_val_max)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x_val_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "x_val_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_293": {
                "variable": {
                    "value": "att_per",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "att_per",
                    "type": "Name",
                    "possible_values": [
                        [
                            "att_per.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.resize(att_per, (1, x_crop.shape[1], x_crop.shape[2], x_crop.shape[3]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(att_per).cuda()",
                            "Call"
                        ],
                        [
                            "x_adv1 - x_crop",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_139": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_truth[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_140": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_pseudo[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "input": {
                    "value": "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/run_defense.py": {
        "torch": {
            "clamp_394": {
                "variable": {
                    "value": "x_crop_init",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_crop_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_crop + att_per * 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_crop_init, 0, 255)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_404": {
                "variable": {
                    "value": "x_adv2_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv2_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_adv1 + def_per * 0.01",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_adv2_mask, 0, 255)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_457": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(input, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_459": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "delta[:, best_pscore_id] / scale_z",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(target).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_460": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input[pos_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[pos_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                            "Call"
                        ],
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label > iou_hi, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label < iou_low, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos_pseudo).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label > iou_hi, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg_pseudo).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label < iou_low, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_158": {
                "variable": {
                    "value": "adv_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "where((x_adv.grad > 0) | (x_adv.grad < 0), x_adv.grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.sign(adv_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x_init.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_adv - alpha * adv_grad",
                            "BinOp"
                        ],
                        [
                            "where(x_adv > x + eps, x + eps, x_adv)",
                            "Call"
                        ],
                        [
                            "where(x_adv < x - eps, x - eps, x_adv)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, x_val_min, x_val_max)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(x_mask.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_adv + mask",
                            "BinOp"
                        ],
                        [
                            "where(x_adv > x + eps, x + eps, x_adv)",
                            "Call"
                        ],
                        [
                            "where(x_adv < x - eps, x - eps, x_adv)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, x_val_min, x_val_max)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x_val_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "x_val_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_178": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                            "Call"
                        ],
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label > iou_hi, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label < iou_low, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pos_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label > iou_hi, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos_pseudo).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label > iou_hi, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pos_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_neg_pseudo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(label < iou_low, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg_pseudo).cuda().long()",
                            "Call"
                        ],
                        [
                            "np.where(label < iou_low, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_neg_pseudo).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_261": {
                "variable": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x_init.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_adv - alpha * adv_grad",
                            "BinOp"
                        ],
                        [
                            "where(x_adv > x + eps, x + eps, x_adv)",
                            "Call"
                        ],
                        [
                            "where(x_adv < x - eps, x - eps, x_adv)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, x_val_min, x_val_max)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(x_mask.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_adv + mask",
                            "BinOp"
                        ],
                        [
                            "where(x_adv > x + eps, x + eps, x_adv)",
                            "Call"
                        ],
                        [
                            "where(x_adv < x - eps, x - eps, x_adv)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, x_val_min, x_val_max)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x_val_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "x_val_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_392": {
                "variable": {
                    "value": "att_per",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "att_per",
                    "type": "Name",
                    "possible_values": [
                        [
                            "att_per.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.resize(att_per, (1, x_crop.shape[1], x_crop.shape[2], x_crop.shape[3]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(att_per).cuda()",
                            "Call"
                        ],
                        [
                            "x_adv1 - x_crop",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_402": {
                "variable": {
                    "value": "def_per",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "def_per",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_per.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.resize(def_per, (1, x_crop.shape[1], x_crop.shape[2], x_crop.shape[3]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(def_per).cuda()",
                            "Call"
                        ],
                        [
                            "x_adv2 - x_adv1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_139": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_truth[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_140": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_pseudo[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_236": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_truth[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_237": {
                "input": {
                    "value": "score[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_pseudo[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "input": {
                    "value": "score.permute(1, 2, 3, 0).contiguous().view(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/test_otb.py": {
        "torch": {
            "load_91": {
                "f": {
                    "value": "join(realpath(dirname(__file__)), 'SiamRPNOTB.model')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/test_otb_attack.py": {
        "torch": {
            "load_101": {
                "f": {
                    "value": "join(realpath(dirname(__file__)), 'SiamRPNOTB.model')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/test_otb_defense.py": {
        "torch": {
            "load_101": {
                "f": {
                    "value": "join(realpath(dirname(__file__)), 'SiamRPNOTB.model')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DaSiamRPN/code/utils.py": {
        "torch": {
            "is_tensor_12": {
                "obj": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_numpy(img)",
                            "Call"
                        ],
                        [
                            "np.transpose(img, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "np.transpose(img, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "to_torch(img).float()",
                            "Call"
                        ],
                        [
                            "to_numpy(torch.squeeze(img, 0))",
                            "Call"
                        ],
                        [
                            "np.transpose(img, (1, 2, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "ndarray",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}