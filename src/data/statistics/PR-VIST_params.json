{
    "story_plotting/src/Generation_Framework.py": {
        "torch": {
            "MarginRankingLoss_25": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_320": {
                "variable": {
                    "value": "datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Prediction_Path_Search(self.args, mode, self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "ques",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ques, ques_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_168": {
                "variable": {
                    "value": "(max_score, max_score_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(ques, relas_text, relas, prevs_text, prevs, ques_pos)",
                            "Call"
                        ],
                        [
                            "model(ques, relas_text, relas, prevs_text, prevs)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "story_plotting/src/Prediction_Path_Search.py": {
        "torch": {}
    },
    "story_plotting/src/VIST_Framework.py": {
        "torch": {
            "MarginRankingLoss_31": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(neg_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_457": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "path_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Train_Dataset_Path_Search(self.args, 'train', self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_459": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "path_valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Train_Dataset_Path_Search(self.args, 'valid', self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_46": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_49": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_527": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "path_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Train_Dataset_Path_Search(self.args, mode, self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "ques",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ques, ques_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "story_plotting/src/data_utilities.py": {
        "torch": {}
    },
    "story_plotting/src/main.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "story_plotting/src/model/ABWIM_plus.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.word_embedding.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.word_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(args.word_embedding).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.rela_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.rela_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_19": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_23": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(args.hidden_size * 2, args.hidden_size * 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_26": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(args.hidden_size * 2, args.hidden_size * 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "self.cnn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_31": {
                "variable": {
                    "value": "self.cnn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "variable": {
                    "value": "self.cnn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_36": {
                "variable": {
                    "value": "self.ques_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.prev_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "rela_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(rela_relation, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_embedding(rela_relation)",
                            "Call"
                        ],
                        [
                            "self.dropout(rela_relation)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "word_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(word_relation, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(word_relation)",
                            "Call"
                        ],
                        [
                            "self.dropout(word_relation)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rela_relation_out, word_relation_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([rela_relation_out, word_relation_out], 0)",
                            "Call"
                        ],
                        [
                            "relation.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "relation.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(relation, self.W)",
                            "Call"
                        ],
                        [
                            "torch.matmul(energy, question_out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "question_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "question_out - atten_previous",
                            "BinOp"
                        ],
                        [
                            "question_out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "question_out.reshape(-1, atten_previous.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear2(question_out)",
                            "Call"
                        ],
                        [
                            "question_out.reshape(atten_previous.shape[0], -1, atten_previous.shape[1])",
                            "Call"
                        ],
                        [
                            "question_out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "question_out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "self.dropout(question_out)",
                            "Call"
                        ],
                        [
                            "self.reduce_prev(rela_prev, word_prev, question_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "energy.view(energy.shape[0], energy.shape[1] * energy.shape[2])",
                            "Call"
                        ],
                        [
                            "tmp_energy / math.sqrt(energy.shape[1])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "atten_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * relation",
                            "BinOp"
                        ],
                        [
                            "torch.sum(atten_relation, 1)",
                            "Call"
                        ],
                        [
                            "atten_relation.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.abwim_atten(question_out, word_relation, rela_relation)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(question, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(question)",
                            "Call"
                        ],
                        [
                            "question + ques_position",
                            "BinOp"
                        ],
                        [
                            "self.dropout(question)",
                            "Call"
                        ],
                        [
                            "question + ques_position",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(question_out, atten_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_151": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation(self.cnn_1(M))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "M.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_pool1d_153": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation(self.cnn_2(M))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "M.shape[2] - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool1d_155": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation(self.cnn_3(M))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "M.shape[2] - 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2, h3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.sen_pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "ques_position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[5]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ques_position, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.sen_pos_embedding(ques_position)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ques_position, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.pos_embedding(ques_position)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_12": {
                "ndarray": {
                    "value": "args.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "ques_position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[5]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ques_position, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.sen_pos_embedding(ques_position)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ques_position, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.pos_embedding(ques_position)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_158": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((h1, h2, h3), 2)",
                            "Call"
                        ],
                        [
                            "torch.max(h, 2)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "story_plotting/src/model/BoV_average.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.word_embedding.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.word_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(args.word_embedding).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.rela_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.rela_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_23": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "variable": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(ques_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(ques_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(ques_x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "rela_text_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_text_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(rela_text_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(rela_text_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(rela_text_x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(rela_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_embedding(rela_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(rela_x)",
                            "Call"
                        ],
                        [
                            "torch.mean(rela_x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "ques",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(ques_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(ques_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(ques_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "rela_text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_text_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(rela_text_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(rela_text_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(rela_text_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(rela_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_embedding(rela_x)",
                            "Call"
                        ],
                        [
                            "self.dropout(rela_x)",
                            "Call"
                        ],
                        [
                            "torch.mean(rela_x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "args.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "story_plotting/src/model/Framework_qag.py": {
        "torch": {
            "MarginRankingLoss_53": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_54": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "self.qa_lang_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.qa_lang_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "self.qg_lang_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.qg_lang_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_195": {
                "variable": {
                    "value": "confid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confid / a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_257": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(neg_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_497": {
                "variable": {
                    "value": "datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "variable"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_504": {
                "variable": {
                    "value": "self.qg_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.qg_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_560": {
                "variable": {
                    "value": "valid_datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PerQuestionDataset(self.args, 'valid', self.word2id, self.rela2id)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_856": {
                "variable": {
                    "value": "datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PerQuestionDataset(self.args, 'train', self.word2id, self.rela2id)",
                            "Call"
                        ],
                        [
                            "PerQuestionDataset(self.args, mode, self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_942": {
                "variable": {
                    "value": "datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PerQuestionDataset(self.args, 'test', self.word2id, self.rela2id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_244": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list_parameter_require_grad(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_247": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list_parameter_require_grad(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_250": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list_parameter_require_grad(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "ques",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ques, ques_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_900": {
                "variable": {
                    "value": "datas",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PerQuestionDataset(self.args, 'valid', self.word2id, self.rela2id)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "quick_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_197": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_861": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_918": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_170": {
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_173": {
                "input": {
                    "value": "torch.softmax(scores, -1)[0] + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_187": {
                "input": {
                    "value": "thred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tanh(2 * f * factor - f) + 1.0) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_764": {
                "variable": {
                    "value": "dual_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(qgconfidence) + qg_NLL_loss - torch.log(qaconfidence) - torch.log(Uhop_cond)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_792": {
                "variable": {
                    "value": "dual_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(qgconfidence) + qg_NLL_loss - torch.log(qaconfidence) - torch.log(Uhop_cond)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_186": {
                "input": {
                    "value": "2 * f * factor - f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_scores - torch.min(_scores)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_760": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_764": {
                "input": {
                    "value": "qgconfidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5566",
                            "float"
                        ]
                    ]
                }
            },
            "log_792": {
                "input": {
                    "value": "qgconfidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5566",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "story_plotting/src/model/HR_BiLSTM_plus.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.word_embedding.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.word_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.from_numpy(args.word_embedding).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.rela_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.rela_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "768 // 2 if args.q_representation == 'bert' else args.hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_28": {
                "variable": {
                    "value": "self.rnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_33": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "rela_text_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_text_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(rela_text_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(rela_text_x)",
                            "Call"
                        ],
                        [
                            "rela_text_x + rela_text_x_pos",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(rela_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_embedding(rela_x)",
                            "Call"
                        ],
                        [
                            "rela_x + rela_x_pos",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "rela_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rela_hs, rela_text_hs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool1d_68": {
                "variable": {
                    "value": "rela_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.cat([rela_hs, rela_text_hs], 0)",
                            "Call"
                        ],
                        [
                            "rela_hs.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "rela_hs.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool1d_123": {
                "variable": {
                    "value": "ques_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(ques_hs1, 0, 1)",
                            "Call"
                        ],
                        [
                            "ques_hs.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "ques_hs1 + ques_hs2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ques_hs.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.sen_pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "variable": {
                    "value": "self.rela_pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.word_embedding.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "rela_text_x_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_text_x_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(rela_text_x_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_pos_embedding(rela_text_x_pos)",
                            "Call"
                        ],
                        [
                            "inputs[7]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "rela_x_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rela_x_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(rela_x_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.rela_pos_embedding(rela_x_pos)",
                            "Call"
                        ],
                        [
                            "inputs[6]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_97": {
                "variable": {
                    "value": "(question, ques_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(ques_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(ques_x)",
                            "Call"
                        ],
                        [
                            "ques_x + ques_pos",
                            "BinOp"
                        ],
                        [
                            "self.dropout(ques_x)",
                            "Call"
                        ],
                        [
                            "ques_x + ques_pos",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.squeeze(question, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "ques_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.squeeze(ques_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "ques_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.squeeze(question, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "variable": {
                    "value": "ques_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_hs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(ques_hs1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(ques_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(ques_x)",
                            "Call"
                        ],
                        [
                            "ques_x + ques_pos",
                            "BinOp"
                        ],
                        [
                            "self.dropout(ques_x)",
                            "Call"
                        ],
                        [
                            "ques_x + ques_pos",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "args.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "ques_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(ques_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.pos_embedding(ques_pos)",
                            "Call"
                        ],
                        [
                            "th.transpose(ques_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.sen_pos_embedding(ques_pos)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "variable": {
                    "value": "ques_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.transpose(ques_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.pos_embedding(ques_pos)",
                            "Call"
                        ],
                        [
                            "th.transpose(ques_pos, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.sen_pos_embedding(ques_pos)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "(ques_h, prev_rela_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "story_plotting/src/utility.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, f'model_{loss:.4f}_{acc:.4f}_{rc:.2f}_{td:.2f}_{td_rc:.2f}.pth')",
                            "Call"
                        ],
                        [
                            "args.path",
                            "Attribute"
                        ],
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_49": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, f'model_{loss:.4f}_{acc:.4f}_{rc:.2f}_{td:.2f}_{td_rc:.2f}.pth')",
                            "Call"
                        ],
                        [
                            "args.path",
                            "Attribute"
                        ],
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_58": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, f'model_{loss:.4f}_{acc:.4f}_{rc:.2f}_{td:.2f}_{td_rc:.2f}.pth')",
                            "Call"
                        ],
                        [
                            "args.path",
                            "Attribute"
                        ],
                        [
                            "os.path.join(path, 'model.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{args.device}'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "story_reworking/1sentence_inference.py": {
        "torch": {
            "tensor_147": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "pred_seq_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "pred_seq_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "previous_gt_seq_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_seq_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_sentence_flat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in pred_sentence_list for item in sublist]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "pred_seq_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_sentence_pos_flat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in pred_sentence_pos_list for item in sublist]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "pred_seq_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_sentence_sen_pos_flat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in pred_sentence_sen_pos_list for item in sublist]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_179": {
                "data": {
                    "value": "[pred_sentence + [Constants.PAD for _ in range(hop_max_seq_len - len(pred_sentence))]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "[list(range(1, len(pred_sentence) + 1)) + [Constants.PAD for _ in range(hop_max_seq_len - len(pred_sentence))]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[[i] * len(pred_sentence) + [Constants.PAD for _ in range(hop_max_seq_len - len(pred_sentence))]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/DataLoader.py": {
        "torch": {
            "DataLoader_812": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ROC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROCDataset(roc_vocab, frame_vocab, text_path=text, hop=hop)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ROC_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_821": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VIST",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ROC_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_831": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VIST",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ROC_collate_test_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_841": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VIST",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ROC_added_termset_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/Loader_manager.py": {
        "torch": {}
    },
    "story_reworking/discriminator/discriminator_model.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.gru2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.hidden2out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru2hidden(hidden.view(-1, 4 * self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_linear(out)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.forward(inp, h)",
                            "Call"
                        ],
                        [
                            "self.forward(inp, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru2hidden(hidden.view(-1, 4 * self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_linear(out)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.forward(inp, h)",
                            "Call"
                        ],
                        [
                            "self.forward(inp, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_66": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "2 * 2 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/discriminator/helpers.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_samples, neg_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos_samples.size()[0] + neg_samples.size()[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_52": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "target.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/discriminator/story_vector.py": {
        "torch": {
            "DataLoader_144": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TermDataset(training_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TermDataset(validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "valid_data.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "POS_val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "POS_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_251": {
                "variable": {
                    "value": "NEG_val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "NEG_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_239": {
                "f": {
                    "value": "saved_model/model_minloss-3-b-B-ep100",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/pytorchtools.py": {
        "torch": {}
    },
    "story_reworking/train.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "gold_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gold.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "gold.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gold.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gold, gold_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_86": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_686": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{opt.device}' if opt.cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred * mask_BOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_EOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_PAD",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_52": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_54": {
                "variable": {
                    "value": "log_prb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred * mask_BOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_EOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_PAD",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r.numel() - nz.numel()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r[nz], z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_pred, z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_pred.size(0), max_seq_len - new_pred.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_pred, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_seq, src_seq_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "src_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_pos, src_pos_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "src_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_sen_pos, src_sen_pos_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "src_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_gold, src_gold_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "tgt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_seq, tgt_seq_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "tgt_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_pos, tgt_pos_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "tgt_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_sen_pos, tgt_sen_pos_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "tgt_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_gold, tgt_gold_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "previous_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_tgt, previous_tgt_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "story_len",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(story_len, story_len_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "src_pad_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(src_seq) - len(src_seq_c)",
                            "BinOp"
                        ],
                        [
                            "max_length - len(src_seq)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "src_seq.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_seq.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_seq, src_pad_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "src_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_pos, src_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "src_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_sen_pos, src_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "src_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_gold, src_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "tgt_pad_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(src_seq) - len(src_seq_c)",
                            "BinOp"
                        ],
                        [
                            "max_length - len(src_seq)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_seq.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tgt_seq.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "tgt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_seq, tgt_pad_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "tgt_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_pos, tgt_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "tgt_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_sen_pos, tgt_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "tgt_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_gold, tgt_pad_seq_clone)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_668": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_689": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{opt.device}' if opt.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred * mask_BOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_EOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_PAD",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((gold, gold_zeros), 1)",
                            "Call"
                        ],
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "tgt_gold[i]",
                            "Subscript"
                        ],
                        [
                            "tgt_gold[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((gold_zeros, gold), 1)",
                            "Call"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((gold_zeros, gold), 1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cal_loss(pred, gold, loss_level, smoothing)",
                            "Call"
                        ],
                        [
                            "-(one_hot * log_prb).sum(dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "loss.masked_select(non_pad_mask).sum()",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(pred, gold, ignore_index=Constants.PAD, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss.view(batch_size, seq_size)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, 1)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(pred, gold, ignore_index=Constants.PAD, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss * reward",
                            "BinOp"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "loss * reward",
                            "BinOp"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_161": {
                "input": {
                    "value": "key_item_1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "key_item_2[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "src_pad_seq_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(src_seq) - len(src_seq_c)",
                            "BinOp"
                        ],
                        [
                            "max_length - len(src_seq)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "src_seq_c.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_seq_c.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "src_seq_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_seq_c, src_pad_seq_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "src_pos_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_pos_c, src_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "src_sen_pos_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_sen_pos_c, src_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "src_gold_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_gold_c, src_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "tgt_pad_seq_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(src_seq) - len(src_seq_c)",
                            "BinOp"
                        ],
                        [
                            "max_length - len(src_seq)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_seq_c.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tgt_seq_c.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "tgt_seq_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_seq_c, tgt_pad_seq_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "tgt_pos_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_pos_c, tgt_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "tgt_sen_pos_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_sen_pos_c, tgt_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "tgt_gold_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_gold_c, tgt_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "previous_tgt_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_tgt_c, tgt_pad_seq_clone_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_732": {
                "params": {
                    "value": "filter(lambda x: x.requires_grad, transformer.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred * mask_BOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_EOS",
                            "BinOp"
                        ],
                        [
                            "pred * mask_PAD",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(src_seq[i], src_pos[i], src_sen_pos[i], tgt_seq[i], tgt_pos[i], tgt_sen_pos[i], previous_tgt[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "pred.view(gold.size(0), gold.size(1))",
                            "Call"
                        ],
                        [
                            "model(frame[i], frame_pos[i], frame_sen_pos[i], targets[i], targets_pos[i], targets_sen_pos[i], previous_targets[:i + 1], story_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((gold, gold_zeros), 1)",
                            "Call"
                        ],
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "tgt_gold[i]",
                            "Subscript"
                        ],
                        [
                            "tgt_gold[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((gold_zeros, gold), 1)",
                            "Call"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "targets_gold[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((gold_zeros, gold), 1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_301": {
                "variable": {
                    "value": "story_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_gold.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_302": {
                "variable": {
                    "value": "story_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_gold.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "gold_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gold.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "gold.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gold.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gold_zeros, gold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_746": {
                "f": {
                    "value": "discriminator/saved_model/model_minloss-3-b-B-ep100-emb512-1",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{opt.device}' if opt.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_319": {
                "variable": {
                    "value": "story_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(story_pred, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "story_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(story_gold, gold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_453": {
                "variable": {
                    "value": "story_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "targets_gold.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_454": {
                "variable": {
                    "value": "story_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "targets_gold.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "variable": {
                    "value": "gold_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gold.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "gold.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gold.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gold_zeros, gold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_572": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ],
                        [
                            "torch.load(opt.model, map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_dir + opt.save_model + '_ppl_{ppl: 8.5f}.chkpt'.format(ppl=math.exp(min(valid_loss, 100)))",
                            "BinOp"
                        ],
                        [
                            "save_dir + opt.save_model + '.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_469": {
                "variable": {
                    "value": "story_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(story_pred, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "story_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(story_gold, gold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ],
                        [
                            "torch.load(opt.model, map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_dir + opt.save_model + '_ppl_{ppl: 8.5f}.chkpt'.format(ppl=math.exp(min(valid_loss, 100)))",
                            "BinOp"
                        ],
                        [
                            "save_dir + opt.save_model + '.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "story_reworking/transformer/Beam.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "self.tgt_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tgt_seq, self.tgt_seq, self.tgt_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self.tgt_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tgt_pos, self.tgt_pos, self.tgt_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "self.tgt_sen_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tgt_sen_pos, self.tgt_sen_pos, self.tgt_sen_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_98": {
                "variable": {
                    "value": "tmp_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_99": {
                "variable": {
                    "value": "tmp_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "dec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.tgt_seq, dec_seq.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "dec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.tgt_pos, dec_seq.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "dec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.tgt_sen_pos, dec_seq.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_115": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_43": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.BOS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_46": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_49": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.tgt_sen_pos[-1][-1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "story_reworking/transformer/Layers.py": {
        "torch": {}
    },
    "story_reworking/transformer/Models.py": {
        "torch": {
            "triu_74": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((len_s, len_s), device=seq.device, dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_95": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_156": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_166": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_167": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len_max_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "tgt_twos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_seq.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "sen_emb_tgt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_twos, tgt_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "tgt_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_sen_pos.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "tgt_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_zeros, tgt_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "tgt_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_zeros, tgt_sen_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out, tgt_word_embbeding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "positional_emb_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positional_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "padding_mask_clone_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(j - 1) * [padding_mask_clone_last]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "padding_mask_clone[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(padding_mask_clone[i][j - 1:], padding_mask_clone_last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "(len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_294": {
                "input": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_word_emb(src_seq)",
                            "Call"
                        ],
                        [
                            "enc_output + self.sen_position_enc(src_sen_pos)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_299": {
                "input": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out, tgt_word_embbeding), 1)",
                            "Call"
                        ],
                        [
                            "dec_output + self.position_enc(tgt_pos)",
                            "BinOp"
                        ],
                        [
                            "dec_output + positional_emb_tensor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/transformer/Modules.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_14": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_17": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/transformer/SubLayers.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_26": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_66": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_68": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_74": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "story_reworking/transformer/Translator.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{opt.device}' if opt.cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_41": {
                "variable": {
                    "value": "model.word_prob_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b.get_current_seq_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_sen_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_92": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b.get_current_seq_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_sen_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_99": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b.get_current_seq_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[b.get_current_sen_pos_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_107": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_seq.size(0) * [pred_seq]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "pred_seq_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_seq.size(0) * [pred_seq_pos]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "pred_seq_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_seq.size(0) * [pred_seq_sen_pos]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "previous_gt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_seq.size(0) * [previous_gt_seq]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "variable": {
                    "value": "previous_gt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_119": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.tgt_word_prj(dec_output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "story_dec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_seq, dec_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "story_dec_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_seq_pos, dec_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "story_dec_sen_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_seq_sen_pos, dec_sen_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_141": {
                "variable": {
                    "value": "word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.tgt_word_prj(dec_output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}