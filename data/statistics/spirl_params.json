{
    "spirl/components/base_model.py": {
        "torch": {
            "stack_122": {
                "variable": {
                    "value": "grad_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list([torch.norm(p.grad.data) for p in self.parameters() if p.grad is not None])",
                            "Call"
                        ],
                        [
                            "torch.stack(grad_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_129": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss[1].value * loss[1].weight for loss in filter(lambda x: x[1].weight > 0, losses.items())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_119": {
                "input": {
                    "value": "p.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/components/checkpointer.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "checkpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CheckpointHandler.get_resume_ckpt_file(epoch, checkpt_path)",
                            "Call"
                        ],
                        [
                            "checkpt_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/components/data_loader.py": {
        "torch": {
            "pop_282": {
                "variable": {
                    "value": "data.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pop_290": {
                "variable": {
                    "value": "data.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/components/evaluator.py": {
        "torch": {
            "tensor_294": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(img)",
                            "Call"
                        ],
                        [
                            "(img.permute(2, 0, 1) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/components/logger.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "plot_graph(array).transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "dummy_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 10, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(arr)",
                            "Call"
                        ],
                        [
                            "arr.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "arr.float()",
                            "Call"
                        ],
                        [
                            "arr",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/components/trainer_base.py": {
        "torch": {
            "save_7": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_24": {
                "tensors": {
                    "value": "[torch.isnan(p.grad).any() for (n, p) in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "any_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_24": {
                "input": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_30": {
                "input": {
                    "value": "x[-1].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_31": {
                "input": {
                    "value": "x[-1].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_73": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/models/bc_mdl.py": {
        "torch": {
            "Sequential_121": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResizeSpatial(self._hp.input_res)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/models/closed_loop_spirl_mdl.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "decode_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(seq_enc[:, :steps], z[:, None].repeat(1, steps, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "inf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs.actions, self._get_seq_enc(inputs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.img_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResizeSpatial(self._hp.prior_input_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "stacked_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs.images[:, t:t + inputs.actions.shape[1]] for t in range(self._hp.n_input_frames)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "*args": {
                    "value": "BaseProcessingLSTM(self._hp, in_dim=input_size, out_dim=self._hp.nz_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "self._hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hp.nz_vae * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/models/skill_prior_mdl.py": {
        "torch": {
            "chunk_288": {
                "variable": {
                    "value": "per_prior_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map2torch(inputs, device=self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self._hp.n_prior_nets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_308": {
                "variable": {
                    "value": "loss.breakdown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[chunk.mean() for chunk in torch.chunk(loss.breakdown, self._hp.n_prior_nets)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "self.cond_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResizeSpatial(self._hp.prior_input_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "inf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs.actions, enc_cond[:, None].repeat(1, inputs.actions.shape[1], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "*args": {
                    "value": "BaseProcessingLSTM(self._hp, in_dim=input_size, out_dim=self._hp.nz_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "modules": {
                    "value": "[self._build_prior_net() for _ in range(self._hp.n_prior_nets)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "inf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inf_input, self._learned_prior_input(inputs)[:, None].repeat(1, inf_input.shape[1], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(state, device=self._hp.device)",
                            "Call"
                        ],
                        [
                            "state[None]",
                            "Subscript"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_340": {
                "input": {
                    "value": "torch.stack(divergences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "*args": {
                    "value": "ResizeSpatial(self._hp.prior_input_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "*args": {
                    "value": "BaseProcessingLSTM(self._hp, in_dim=self._hp.action_dim + self._hp.nz_enc, out_dim=self._hp.nz_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_413": {
                "*args": {
                    "value": "self.cond_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "in_features": {
                    "value": "self._hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hp.nz_vae * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "*args": {
                    "value": "Predictor(self._hp, input_size=self.prior_input_size, output_size=self._hp.nz_mid, num_layers=self._hp.num_prior_net_layers, mid_size=self._hp.nz_mid_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_340": {
                "tensors": {
                    "value": "divergences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mc_kl_divergence(*pair) for pair in itertools.permutations(priors, r=2)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_407": {
                "in_features": {
                    "value": "self._hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hp.nz_vae * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "input": {
                    "value": "model_output.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_249": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, size), requires_grad=True, device=self._hp.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_308": {
                "input": {
                    "value": "loss.breakdown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self._hp.n_prior_nets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "(1, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "(1, self._hp.nz_vae * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/modules/flow_models.py": {
        "torch": {
            "tensor_192": {
                "variable": {
                    "value": "pydata",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.random.normal(loc=(1.0, 0.0), scale=(0.1, 0.1), size=(1000, 2)), np.random.normal(loc=(-1.0, 0.0), scale=(0.1, 0.1), size=(1000, 2)), np.random.normal(loc=(0.0, 1.0), scale=(0.1, 0.1), size=(1000, 2)), np.random.normal(loc=(0.0, -1.0), scale=(0.1, 0.1), size=(1000, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sample_train_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.flows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[RealNVP(2) for _ in range(3)]",
                            "ListComp"
                        ],
                        [
                            "flows",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_233": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "(batch_size, self._flow_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_inputs[0].device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "(batch_size, self._flow_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_inputs[0].device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_85": {
                "input": {
                    "value": "s1_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s1(lower, cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.s1(lower, cond_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "s2_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s2(upper, cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.s2(upper, cond_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "-s2_transformed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "-s1_transformed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "-s1_transformed",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "-s2_transformed",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "[x] + additional_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_80": {
                "input": {
                    "value": "s1_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s1(lower, cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.s1(lower, cond_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "s2_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s2(upper, cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.s2(upper, cond_inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/modules/layers.py": {
        "torch": {
            "normal_23": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_25": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "self.params.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.params.normalize",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "self.params.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.params.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.params.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.params.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.params.normalize",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_167": {
                "in_channels": {
                    "value": "self.params.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.params.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.params.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.params.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.params.normalize",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_27": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_142": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPad2d_145": {
                "padding": {
                    "value": "self.params.asym_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_165": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/modules/losses.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(targets, device=estimates.device, dtype=estimates.dtype)",
                            "Call"
                        ],
                        [
                            "Gaussian(targets)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "estimates.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "estimates.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_48": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/modules/mdn.py": {
        "torch": {
            "transpose_155": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "trainable_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(256, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Predictor(hp, input_size=2, output_size=hp.nz_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "pydata",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dist.sample().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, num_gaussians)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size * num_gaussians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size * num_gaussians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_190": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_47": {
                "input": {
                    "value": "torch.log(self.pi) + MultivariateGaussian(self.mu, self.log_sigma).log_prob(x[:, None])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "[c.entropy() for c in self._components]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "(self.pi, self.mu.flatten(start_dim=1), self.log_sigma.flatten(start_dim=1), self.pi.shape[1] * torch.ones((self.pi.shape[0], 1), device=self.pi.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, -1.0, 0.0, 0.0], [0.0, 0.0, 1.0, -1.0]])[None].repeat(256, 1, 1).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "self.tensor2gmm(pi)",
                            "Call"
                        ],
                        [
                            "tensor[:, num_gaussians:num_gaussians + num_gaussians * nz].reshape(-1, num_gaussians, nz)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fcn(mu, dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "data": {
                    "value": "np.log(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[0, -1].long()",
                            "Call"
                        ],
                        [
                            "num_gaussians",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_19": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "input": {
                    "value": "self.pi(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "input": {
                    "value": "self.log_sigma(inputs).reshape(-1, self.num_gaussians, self.output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[0.7, 0.1, 0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "(self.pi.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[[1.0, -1.0, 0.0, 0.0], [0.0, 0.0, 1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_53": {
                "tensor": {
                    "value": "Categorical(self.pi).sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.pi.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Categorical_53": {
                "probs": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/modules/recurrent_modules.py": {
        "torch": {
            "Linear_147": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hp.nz_mid_lstm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LSTMCell(hidden_size, hidden_size) for i in range(self.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hp.nz_mid_lstm",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "self.hidden_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_state_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_173": {
                "variable": {
                    "value": "var_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "layer_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat(layer, 1) for layer in state]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_174": {
                "input": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm",
                            "variable"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_149": {
                "input_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hp.nz_mid_lstm",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hp.nz_mid_lstm",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/modules/subnetworks.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, n_dim) + init_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_56": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros_like(mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_223": {
                "variable": {
                    "value": "candidate_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pixel_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_source",
                            "Method Argument"
                        ],
                        [
                            "pixel_source",
                            "Method Argument"
                        ],
                        [
                            "pixel_source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_233": {
                "variable": {
                    "value": "self.flow_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "affine_grid_247": {
                "variable": {
                    "value": "identity_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.new_tensor([[1, 0, 0], [0, 1, 0]]).reshape(1, 2, 3).repeat_interleave(image.size()[0], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_249": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(image, sample_pos)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "sample_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "identity_grid + flow.permute(0, 2, 3, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self.attention_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiheadAttention(hp) for _ in range(hp.n_attention_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.predictor_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[get_predictor(hp, hp.nz_enc, hp.nz_attn_key, num_layers=2) for _ in range(hp.n_attention_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz_attn_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nz_attn_key",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz_attn_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nz_attn_key",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.v_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_product(q, k) / math.sqrt(nz_k) * self.temperature",
                            "BinOp"
                        ],
                        [
                            "MultiheadAttention.mask_out(attn_scores, start_ind, end_ind)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "layer_norm_301": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention(query, enc_demo_key_seq, enc_demo_seq, s_ind, e_ind, forced_attention_step=timestep if self._hp.forced_attention else None)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "norm_shape_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_demo_seq.shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "layer_norm_302": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictor(x) + query",
                    "type": "BinOp",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "norm_shape_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_355": {
                "variable": {
                    "value": "scores_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_product(q, k) / math.sqrt(nz_k) * self.temperature",
                            "BinOp"
                        ],
                        [
                            "MultiheadAttention.mask_out(attn_scores, start_ind, end_ind)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_477": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq, time]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(*inp).chunk(2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(*inp).chunk(2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "hp.ngf * 2 ** (n - 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hp.nz_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "data": {
                    "value": "self._hp.attention_temperature * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_580": {
                "tensors": {
                    "value": "(vector_feature, img_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_207": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_293": {
                "input": {
                    "value": "start_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_ind",
                            "Method Argument"
                        ],
                        [
                            "start_ind",
                            "Method Argument"
                        ],
                        [
                            "start_ind",
                            "Method Argument"
                        ],
                        [
                            "start_ind",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ceil_293": {
                "input": {
                    "value": "end_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_ind",
                            "Method Argument"
                        ],
                        [
                            "end_ind",
                            "Method Argument"
                        ],
                        [
                            "end_ind",
                            "Method Argument"
                        ],
                        [
                            "end_ind",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_57": {
                "input": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(*inp).chunk(2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_318": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/modules/variational_inference.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_embed_133": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_241": {
                "tensors": {
                    "value": "[p.log_prob(x) - q.log_prob(x) for x in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_241": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_23": {
                "variable": {
                    "value": "(mu, log_sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(mu, 2, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fcn(mu, dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(size, device=device)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fcn(mu, dim)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[self.mu, self.log_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "[self.z1, self.g2.sample()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_235": {
                "tensors": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_26": {
                "input": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(mu, 2, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fcn(log_sigma, dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(size, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fcn(log_sigma, dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "[d.mu for d in dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "[d.mu ** 2 + d.sigma ** 2 for d in dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "sigma_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([d.mu ** 2 + d.sigma ** 2 for d in dists]).sum(0) - mu_avg ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "tensor.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "[-1.0, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_31": {
                "input": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_84": {
                "input": {
                    "value": "self.tensor()",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/agents/ac_agent.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.critics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._hp.critic(self._hp.critic_params) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.critic_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._hp.critic(self._hp.critic_params) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "min_214": {
                "variable": {
                    "value": "q_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*[critic(experience_batch.observation, self._prep_action(policy_output.action)).q for critic in self.critics]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "min_221": {
                "variable": {
                    "value": "q_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*[critic_target(experience_batch.observation_next, self._prep_action(policy_output.action)).q for critic_target in self.critic_targets]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clamp_244": {
                "input": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "experience_batch.reward * self._hp.reward_scale + (1 - experience_batch.done) * self._hp.discount_factor * value_next",
                            "BinOp"
                        ],
                        [
                            "self._clip_q_target(q_target)",
                            "Call"
                        ],
                        [
                            "q_target.detach()",
                            "Call"
                        ],
                        [
                            "q_target",
                            "Method Argument"
                        ],
                        [
                            "q_target",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (1 - self._hp.discount_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self._hp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/agents/prior_sac_agent.py": {
        "torch": {
            "min_36": {
                "variable": {
                    "value": "q_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*[critic(experience_batch.observation, self._prep_action(policy_output.action)).q for critic in self.critics]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "min_44": {
                "variable": {
                    "value": "q_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*[critic_target(experience_batch.observation_next, self._prep_action(policy_output.action)).q for critic_target in self.critic_targets]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clamp_72": {
                "input": {
                    "value": "super().alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "self._hp.alpha_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/components/agent.py": {
        "torch": {}
    },
    "spirl/rl/components/critic.py": {
        "torch": {
            "cat_53": {
                "tensors": {
                    "value": "(obs, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/components/environment.py": {
        "torch": {}
    },
    "spirl/rl/components/policy.py": {
        "torch": {
            "tanh_42": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dist.rsample()",
                            "Call"
                        ],
                        [
                            "self._tanh_squash_output(action, log_prob)",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softplus_44": {
                "input": {
                    "value": "-2.0 * action",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "torch.tensor(2 * self._hp.max_action_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "(self._hp.action_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "2 * self._hp.max_action_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/policies/basic_policies.py": {
        "torch": {
            "Module_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "(batch_size, self._hp.action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "obs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "self._hp.scale * torch.ones((batch_size, self._hp.action_dim), device=obs.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "(batch_size, self._hp.action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "obs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/policies/cl_model_policies.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "self._log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._hp.initial_log_sigma * np.ones(self.action_dim, dtype=np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(split_obs.cond_input, self.last_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(split_obs.cond_input, split_obs.z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/policies/mlp_policies.py": {
        "torch": {
            "Sequential_57": {
                "*args": {
                    "value": "super()._build_network()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "Encoder(self._updated_encoder_params())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/policies/prior_policies.py": {
        "torch": {
            "clamp_82": {
                "input": {
                    "value": "divergence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "divergence",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-self._hp.max_divergence_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self._hp.max_divergence_range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/train.py": {
        "torch": {
            "is_available_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_276": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/rl/utils/mpi.py": {
        "torch": {
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "copy_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "copy_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_grads[pointer:pointer + len_grads].reshape(grads_shape[key_name])",
                            "Call"
                        ],
                        [
                            "torch.tensor(copy_grads).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_132": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "copy_params",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "copy_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[pointer:pointer + len_param].reshape(params_shape[key_name])",
                            "Call"
                        ],
                        [
                            "torch.tensor(copy_params).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/train.py": {
        "torch": {
            "save_360": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(folder, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_383": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_384": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_214": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._hp.init_grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/utils/dist_utils.py": {
        "torch": {
            "clamp_16": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.sum(dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_22": {
                "variable": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(rate, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_41": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_12": {
                "input": {
                    "value": "torch.clamp(tensor, eps, 1 - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "input": {
                    "value": "(logits + gumbel_noise) / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_34": {
                "input": {
                    "value": "torch.cumsum(probs, dim=dim) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "log_prob_unnormalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(rate) * values - rate - (values + 1).lgamma()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_7": {
                "input": {
                    "value": "dist * safe_log_prob(dist, eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_12": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "uniform + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "int(val == self._val)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._val.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_34": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "preds + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(rate, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/utils/eval_utils.py": {
        "torch": {
            "Tensor_80": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ar2ten(img1)",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ar2ten(img2)",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_99": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_100": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_101": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/utils/general_utils.py": {
        "torch": {
            "cat_544": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[add_n_dims(tensor, max_n_dims - len(tensor.shape)) for tensor in inp]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_591": {
                "variable": {
                    "value": "end_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_mask * torch.arange(max_seq_len, dtype=torch.float, device=pad_mask.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, parameters)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, skips[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_591": {
                "start": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_mask.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__152": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([group['params'] for group in self.param_groups])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.gradient_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_486": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spirl/utils/ndim.py": {
        "torch": {
            "cat_73": {
                "tensors": {
                    "value": "arrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_80": {
                "input": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/utils/pytorch_utils.py": {
        "torch": {
            "baddbmm_142": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_norm.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.flatten(start_dim=2)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "x2.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_237": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "start_ind.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_635": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_255": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(array).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(array).to(device)",
                            "Call"
                        ],
                        [
                            "tensor.to(dtype)",
                            "Call"
                        ],
                        [
                            "tensors[1:]",
                            "Subscript"
                        ],
                        [
                            "tensors[1:]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_526": {
                "data": {
                    "value": "torch.full((1,), init_log_value)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learnable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learnable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(array).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(array).to(device)",
                            "Call"
                        ],
                        [
                            "tensor.to(dtype)",
                            "Call"
                        ],
                        [
                            "tensors[1:]",
                            "Subscript"
                        ],
                        [
                            "tensors[1:]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_121": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self._res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_382": {
                "*size": {
                    "value": "seq_shape[:replace_dim] + (size,) + seq_shape[replace_dim + 1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_403": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_526": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "init_log_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_log_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_542": {
                "*size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_544": {
                "*size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_547": {
                "*size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_632": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_221": {
                "input": {
                    "value": "p.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_330": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_331": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spirl/utils/vis_utils.py": {
        "torch": {
            "tensor_50": {
                "data": {
                    "value": "array * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_77": {
                "tensor": {
                    "value": "plot_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack_with_separator(imgs, dim=2)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(imgs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(seqs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_83": {
                "tensor": {
                    "value": "plot_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack_with_separator(imgs, dim=2)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(imgs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(seqs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_92": {
                "tensor": {
                    "value": "plot_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack_with_separator(imgs, dim=2)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(imgs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ],
                        [
                            "stack_with_separator(seqs, dim=3)[:n_logged_samples]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "spirl/utils/wandb.py": {
        "torch": {}
    }
}