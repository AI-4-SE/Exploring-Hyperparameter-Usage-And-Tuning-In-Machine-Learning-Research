{
    "advbox_family/ODD/attack_methods/eotb_attack.py": {
        "tensorflow": {
            "placeholder_107": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_of_EOT_transforms, 448, 448, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 448, 448, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.punishment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.smoothness_punishment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_118": {
                "variable": {
                    "value": "init_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.7 * np.random.normal(scale=0.8, size=[1, 448, 448, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 448, 448, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.7 * np.random.normal(scale=0.8, size=[1, 448, 448, 3]))",
                            "Call"
                        ]
                    ]
                }
            },
            "atanh_126": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_128": {
                "variable": {
                    "value": "self.masked_inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_150": {
                "variable": {
                    "value": "self.shuru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.masked_inter_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_151": {
                "variable": {
                    "value": "self.constrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.shuru",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_154": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_178": {
                "variable": {
                    "value": "self.distance_L2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.perturbation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "self.punishment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_185": {
                "variable": {
                    "value": "self.non_smoothness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sub_lala1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_191": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_198": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "MODEL_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.object_detector.get_yolo_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_137": {
                "variable": {
                    "value": "self.masked_inter_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.masked_inter_batch, self.masked_inter]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "advbox_family/ODD/object_detectors/yolo_tiny_model_updated.py": {
        "tensorflow": {
            "placeholder_228": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 448, 448, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.fc_19[:, 0:980]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.fc_19[:, 0:980].shape.as_list()[0], 7, 7, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.fc_19[:, 980:1078]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.fc_19[:, 980:1078].shape.as_list()[0], 7, 7, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_93": {
                "variable": {
                    "value": "self.p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.c[:, :, :, 14]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.s[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "variable": {
                    "value": "self.p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.c[:, :, :, 14]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.s[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.p1, self.p2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "variable": {
                    "value": "self.batch_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "self.Ctarget",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.batch_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_103": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_108": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_152": {
                "variable": {
                    "value": "inputs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "pad_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_size, pad_size], [pad_size, pad_size], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, pad_mat)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[size, size, int(channels), filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[dim, hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "str(idx) + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_155": {
                "variable": {
                    "value": "conv_biased",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs_pad, weight, strides=[1, stride, stride, 1], padding='VALID', name=str(idx) + '_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_conv_biased'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_201": {
                "variable": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs_processed, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, size, int(channels), filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_158": {
                "x": {
                    "value": "self.alpha * conv_biased",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "conv_biased",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv, biases, name=str(idx) + '_conv_biased')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_leaky_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_169": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "str(idx) + '_pool'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "inputs_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases_name[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_202": {
                "x": {
                    "value": "self.alpha * ip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(inputs_processed, weight), biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_fc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_62": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_200": {
                "x": {
                    "value": "tf.matmul(inputs_processed, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2], shape=[hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=biases_name[:-2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_fc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "a": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs_transposed, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[size, size, int(channels), filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[dim, hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "a": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs_transposed, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[size, size, int(channels), filters], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2], shape=[dim, hiddens], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=weight_name[:-2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarialbox/attacks/tf/tools.py": {
        "tensorflow": {
            "gradients_28": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_67": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_33": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_56": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x - r",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_76": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x - r",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_47": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_48": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_div(grad, avoid_nan_norm)",
                            "Call"
                        ],
                        [
                            "old_div(grad, tf.sqrt(square))",
                            "Call"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_34": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_42": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "adversarialbox/models/tensorflow.py": {
        "tensorflow": {
            "gradients_116": {
                "ys": {
                    "value": "self._logits[:, label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._input",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "applications/StealthTshirt/StealthTshirtDemo.py": {
        "tensorflow": {
            "placeholder_46": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 448, 448, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_66": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([size, size, int(channels), filters], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[filters])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "inputs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 448, 448, 3), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_size, pad_size], [pad_size, pad_size], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, pad_mat)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([size, size, int(channels), filters], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([dim, hiddens], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "str(idx) + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_84": {
                "variable": {
                    "value": "conv_biased",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs_pad, weight, strides=[1, stride, stride, 1], padding='VALID', name=str(idx) + '_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[filters]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[hiddens]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_conv_biased'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([dim, hiddens], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[hiddens])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_112": {
                "variable": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs_processed, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[filters]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[hiddens]))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_87": {
                "x": {
                    "value": "self.alpha * conv_biased",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "conv_biased",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv, biases, name=str(idx) + '_conv_biased')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_leaky_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_92": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 448, 448, 3), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "str(idx) + '_pool'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_99": {
                "variable": {
                    "value": "inputs_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 448, 448, 3), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_114": {
                "x": {
                    "value": "self.alpha * ip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(inputs_processed, weight), biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_fc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_76": {
                "shape": {
                    "value": "[size, size, int(channels), filters]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_105": {
                "shape": {
                    "value": "[dim, hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_106": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hiddens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_110": {
                "x": {
                    "value": "tf.matmul(inputs_processed, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[filters]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[hiddens]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(idx) + '_fc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs_transposed, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([size, size, int(channels), filters], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([dim, hiddens], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "a": {
                    "value": "inputs_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs_transposed, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([size, size, int(channels), filters], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([dim, hiddens], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "applications/face_recognition_attack/facenet_fr.py": {
        "tensorflow": {
            "Session_88": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_100": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_101": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_116": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_117": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings - target_emb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.square(embeddings - target_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_125": {
                "x": {
                    "value": "embeddings - target_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "applications/face_recognition_attack/facenet_fr_advbox_deepfool.py": {
        "tensorflow": {
            "Session_88": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_100": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_101": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_116": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_117": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings - target_emb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "tf.square(embeddings - target_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_123": {
                "x": {
                    "value": "embeddings - target_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "applications/face_recognition_attack/facenet_fr_advbox_fgsm.py": {
        "tensorflow": {
            "Session_88": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_100": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_101": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_116": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_117": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings - target_emb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.square(embeddings - target_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_125": {
                "x": {
                    "value": "embeddings - target_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tools.py": {
        "tensorflow": {
            "GFile_73": {
                "variable": {
                    "value": "proto_as_ascii_lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "uid_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_synset_to_human_label_map.txt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_84": {
                "variable": {
                    "value": "proto_as_ascii",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_2012_challenge_label_map_proto.pbtxt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Exists_67": {
                "filename": {
                    "value": "uid_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_synset_to_human_label_map.txt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fatal_68": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "uid_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_synset_to_human_label_map.txt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Exists_69": {
                "filename": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_2012_challenge_label_map_proto.pbtxt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fatal_70": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/imagenet_2012_challenge_label_map_proto.pbtxt'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fatal_96": {
                "msg": {
                    "value": "Failed to locate: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/imagenet_tutorial_deepfool_tf.py": {
        "tensorflow": {
            "Session_54": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_61": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.graph_def",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_57": {
                "name": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/imagenet_tutorial_fgsm_tf.py": {
        "tensorflow": {
            "Session_52": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_59": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.graph_def",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_55": {
                "name": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DataPoison/poison_mnist_pytorch.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./mnist/', train=True, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./mnist/', train=False, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./results/model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./results/optimizer.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_111": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nll_loss_154": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nll_loss_172": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "adversarialbox/attacks/cw2_pytorch.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dist_102": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "newimg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(modifier + timg) * boxmul + boxplus",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tanh(timg) * boxmul + boxplus",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output * tlab",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - tlab) * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_110": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other - real + k",
                            "BinOp"
                        ],
                        [
                            "-other + real + k",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(loss1, min=0)",
                            "Call"
                        ],
                        [
                            "confidence * loss1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "np.eye(num_labels)[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "np.eye(num_labels)[pre_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "np.arctanh((img - boxplus) / boxmul * 0.999999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "input": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(np.arctanh((img - boxplus) / boxmul * 0.999999)).to(device).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_99": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "input": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(np.arctanh((img - boxplus) / boxmul * 0.999999)).to(device).float())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarialbox/models/pytorch.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/imagenet_tools_pytorch.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "old_div(img - mean, std)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(img).to(device).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/imagenet_tutorial_fgsm_pytorch.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "old_div(img - mean, std)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(img).to(device).float().unsqueeze(0)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/mnist_model_pytorch.py": {
        "torch": {
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST('./mnist-pytorch/data', train=True, transform=torchvision.transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST('./mnist-pytorch/data', train=False, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(1, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(32, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(64, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(64 * 3 * 3, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./mnist-pytorch/net.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "64 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_144": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/mnist_tutorial_fgsm_pytorch.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./mnist-pytorch/data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./mnist-pytorch/net.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}