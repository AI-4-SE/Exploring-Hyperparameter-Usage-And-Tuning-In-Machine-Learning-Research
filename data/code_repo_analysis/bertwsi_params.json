{
    "wsi/wsi_clustering.py": {
        "sklearn": {
            "DictVectorizer_36": {
                "variable": {
                    "value": "dict_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfTransformer_42": {
                "variable": {
                    "value": "transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "LinearSVC_109": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "wsi/lm_bert.py": {
        "torch": {
            "from_numpy_121": {
                "variable": {
                    "value": "pattern_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pattern_w, dtype=np.float32).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_37": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "torch_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(tokenized_sents_vocab_idx), max_len), dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "logits_target_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_sents), logits_all_tokens.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "logits_target_tokens_joint_patt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_sents) // n_patterns, logits_target_tokens.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "pre_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_target_tokens_joint_patt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(batch_sents) // n_patterns, logits_target_tokens.shape[1])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.bert.bert.embeddings.word_embeddings.weight.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_161": {
                "variable": {
                    "value": "(topk_vals, topk_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(logits_target_tokens_joint_patt, self.bert.bert.embeddings.word_embeddings.weight.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "wsisettings.prediction_cutoff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "probs_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(pre_softmax, wsisettings.prediction_cutoff, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}