{
    "SentEval/senteval/mrpc.py": {
        "sklearn": {
            "f1_score_100": {
                "y_true": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrpc_embed['test']['y']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "SentEval/senteval/sick.py": {
        "sklearn": {
            "mean_squared_error_122": {
                "variable": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yhat.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "self.sick_data['test']['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "SentEval/senteval/tools/validation.py": {
        "sklearn": {
            "StratifiedKFold_81": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_82": {
                "variable": {
                    "value": "innerskf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_182": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_320": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_245": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_339": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_142": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_305": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_214": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_118": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ],
                        [
                            "regs",
                            "variable"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/corpus/lang.py": {
        "sklearn": {
            "CountVectorizer_40": {
                "variable": {
                    "value": "word_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "preprocess",
                    "type": "variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "treebank_tokenizer.tokenize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_77": {
                "variable": {
                    "value": "char_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/helpers.py": {
        "sklearn": {
            "classification_report_35": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(true_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.argmax(axis=1)",
                            "Call"
                        ],
                        [
                            "pred_labels.tolist()",
                            "Call"
                        ],
                        [
                            "[config.ID2LABEL[label] for label in pred_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "target_names": {
                    "value": "config.LABELS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/third_party/web/analogy.py": {
        "sklearn": {}
    },
    "src/third_party/web/datasets/analogy.py": {
        "sklearn": {
            "check_random_state_77": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bunch_118": {
                "category_high_level": {
                    "value": "np.array(category_high_level)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(word_pairs)",
                    "type": "Call",
                    "possible_values": []
                },
                "category": {
                    "value": "np.array(category)",
                    "type": "Call",
                    "possible_values": []
                },
                "wikipedia_categories": {
                    "value": "wordnet_categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'Antonym', 'Attribute', 'Causes', 'DerivedFrom', 'Entails', 'HasContext', 'InstanceOf', 'IsA', 'MadeOf', 'MemberOf', 'PartOf', 'RelatedTo', 'SimilarTo'}",
                            "Set"
                        ]
                    ]
                },
                "wordnet_categories": {
                    "value": "wikipedia_categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'adjective-to-adverb', 'all-capital-cities', 'city-in-state', 'comparative', 'currency', 'man-woman', 'nationality-adjective', 'past-tense', 'plural-nouns', 'plural-verbs', 'present-participle', 'superlative'}",
                            "Set"
                        ]
                    ]
                }
            },
            "Bunch_196": {
                "X": {
                    "value": "np.vstack(questions).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "np.hstack(answers).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "category": {
                    "value": "np.hstack(category).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "category_high_level": {
                    "value": "np.hstack(category_high_level).astype('object')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_276": {
                "X": {
                    "value": "np.vstack(questions).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "np.hstack(answers).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "category": {
                    "value": "np.hstack(category).astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "category_high_level": {
                    "value": "np.hstack(category_high_level).astype('object')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_402": {
                "X_prot": {
                    "value": "_change_list_to_np(prototypes)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "_change_list_to_np(questions)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scores[which_scoring]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'platinium': platinium_scores, 'golden': golden_scores}",
                            "Dict"
                        ]
                    ]
                },
                "categories_names": {
                    "value": "categories_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "categories_descriptions": {
                    "value": "categories_descriptions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "src/third_party/web/datasets/categorization.py": {
        "sklearn": {
            "Bunch_120": {
                "X": {
                    "value": "data.X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "freq": {
                    "value": "data.X[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "frequency": {
                    "value": "data.X[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rank": {
                    "value": "data.X[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rfreq": {
                    "value": "data.X[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/third_party/web/datasets/similarity.py": {
        "sklearn": {
            "Bunch_45": {
                "X": {
                    "value": "data[:, 0:2].astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * data[:, 2].astype(np.float)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bunch_57": {
                "X": {
                    "value": "data[:, 0:2].astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * data[:, 2].astype(np.float)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bunch_124": {
                "X": {
                    "value": "data.values[:, 0:2].astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "data.values[:, 2:].astype(np.float) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bunch_235": {
                "X": {
                    "value": "data[:, 0:2].astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "data[:, 2].astype(np.float) * 10.0 / 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bunch_273": {
                "X": {
                    "value": "data[:, 0:2].astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "data[:, 2].astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "sd": {
                    "value": "np.std(data[:, 3:].astype(np.float))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_355": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                },
                "sd": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data.values[:, 2:15].astype(np.float), axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.std(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SD(SimLex)'].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_400": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                },
                "sd": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data.values[:, 2:15].astype(np.float), axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.std(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SD(SimLex)'].values",
                            "Attribute"
                        ]
                    ]
                },
                "conc": {
                    "value": "conc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[['conc(w1)', 'conc(w2)', 'concQ']].values",
                            "Attribute"
                        ]
                    ]
                },
                "POS": {
                    "value": "POS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[['POS']].values",
                            "Attribute"
                        ]
                    ]
                },
                "assoc": {
                    "value": "assoc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[['Assoc(USF)', 'SimAssoc333']].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_443": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                },
                "topic": {
                    "value": "topic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['topic'].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_463": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_482": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_202": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                },
                "sd": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data.values[:, 2:15].astype(np.float), axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.std(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SD(SimLex)'].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bunch_204": {
                "X": {
                    "value": "X.astype('object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.values[:, 2].astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.mean(scores, axis=1)",
                            "Call"
                        ],
                        [
                            "data['SimLex999'].values",
                            "Attribute"
                        ],
                        [
                            "data['score'].values",
                            "Attribute"
                        ],
                        [
                            "data[3].values",
                            "Attribute"
                        ],
                        [
                            "data[2].values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/third_party/web/datasets/utils.py": {
        "sklearn": {
            "Bunch_60": {
                "X": {
                    "value": "np.array(X, dtype='object')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(y).astype('object')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/third_party/web/embedding.py": {
        "sklearn": {
            "pairwise_distances_272": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "v.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/third_party/web/evaluate.py": {
        "sklearn": {
            "AgglomerativeClustering_113": {
                "n_clusters": {
                    "value": "len(set(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "affinity": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_140": {
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "n_init": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "len(set(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_126": {
                "n_clusters": {
                    "value": "len(set(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cosine', 'euclidean']",
                            "List"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['average', 'complete']",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "SentEval/examples/infersent.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "params_senteval[infersent]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "INFERSENT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'infersent.allnli.pickle'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "SentEval/examples/models.py": {
        "torch": {
            "LSTM_35": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_53": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len))",
                            "Call"
                        ],
                        [
                            "sent_len.unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_234": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_66": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.use_cuda else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.use_cuda else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_55": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.use_cuda else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.use_cuda else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "SentEval/senteval/tools/classifier.py": {
        "torch": {
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1111",
                            "Method Argument"
                        ],
                        [
                            "1111",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1111",
                            "Method Argument"
                        ],
                        [
                            "1111",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(Xbatch).data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.nclasses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, params['nhid'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SentEval/senteval/tools/ranking.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.imgproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.imgdim, self.projdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.sentproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.sentdim, self.projdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "anchor1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgproj * sentproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "anchor2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentproj * imgproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "img_sentc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgproj * sentcproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "sent_imgc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentproj * imgcproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "cost_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - anchor1 + img_sentc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "cost_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_89": {
                "variable": {
                    "value": "cost_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - anchor2 + sent_imgc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "cost_img",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_302": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_embed[5 * index:5 * index + 5]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ims.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_340": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_img.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sent_embed.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.imgdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.projdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.sentdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.projdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "input": {
                    "value": "torch.pow(imgproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "input": {
                    "value": "torch.pow(imgcproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "input": {
                    "value": "torch.pow(sentproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "torch.pow(sentcproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "torch.pow(output, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "torch.pow(output, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_288": {
                "tensors": {
                    "value": "img_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "tensors": {
                    "value": "sent_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "img_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "tensors": {
                    "value": "sent_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "imgproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "imgproj / torch.sqrt(torch.pow(imgproj, 2).sum(1, keepdim=True)).expand_as(imgproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_51": {
                "input": {
                    "value": "imgcproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgproj(imgc)",
                            "Call"
                        ],
                        [
                            "imgcproj / torch.sqrt(torch.pow(imgcproj, 2).sum(1, keepdim=True)).expand_as(imgcproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_53": {
                "input": {
                    "value": "sentproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "sentproj / torch.sqrt(torch.pow(sentproj, 2).sum(1, keepdim=True)).expand_as(sentproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_55": {
                "input": {
                    "value": "sentcproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sentproj(sentc)",
                            "Call"
                        ],
                        [
                            "sentcproj / torch.sqrt(torch.pow(sentcproj, 2).sum(1, keepdim=True)).expand_as(sentcproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ],
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_73": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ],
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "SentEval/senteval/tools/relatedness.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.nclasses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_48": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.l2reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "permutation[i:i + self.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "SentEval/senteval/utils.py": {
        "torch": {}
    },
    "scripts/evaluate_model.py": {
        "torch": {
            "load_194": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "modelpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.modelpath",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/evaluate_word_sim.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word_dict['token2id'])",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_63": {
                "variable": {
                    "value": "char_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(char_dict['char2id'])",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_140": {
                "variable": {
                    "value": "old_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "old_state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'best_model_state_dict.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/test.py": {
        "torch": {
            "load_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ext_experiment_path, 'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/layers/layers.py": {
        "torch": {
            "LSTM_35": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.char_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_129": {
                "variable": {
                    "value": "mult_combined_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_130": {
                "variable": {
                    "value": "diff_combined_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1 - input_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "combined_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, input_2, mult_combined_vec, diff_combined_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "input_1.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_x_dirs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.char_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers/pooling.py": {
        "torch": {
            "mul_82": {
                "variable": {
                    "value": "masked_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.unsqueeze(2).repeat(1, 1, hidden_dim)",
                            "Call"
                        ],
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.unsqueeze(2).repeat(1, 1, hidden_x_dirs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_86": {
                "variable": {
                    "value": "aggregated_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(sequences, masks)",
                            "Call"
                        ],
                        [
                            "torch.mul(sequences, masks)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_130": {
                "variable": {
                    "value": "aggregated_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregated_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(masked_sequences, 1)",
                            "Call"
                        ],
                        [
                            "self.sum_pooling_layer(sequences, masks=masks)",
                            "Call"
                        ],
                        [
                            "torch.div(aggregated_sequences, sent_lengths)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['lengths']",
                            "Subscript"
                        ],
                        [
                            "sent_lengths.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "sent_lengths.repeat(1, hidden_x_dirs)",
                            "Call"
                        ],
                        [
                            "sent_lengths.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_160": {
                "variable": {
                    "value": "masked_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.unsqueeze(2).repeat(1, 1, hidden_dim)",
                            "Call"
                        ],
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "kwargs['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.unsqueeze(2).repeat(1, 1, hidden_x_dirs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_165": {
                "variable": {
                    "value": "(max_sequences, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(sequences, masks)",
                            "Call"
                        ],
                        [
                            "torch.mul(sequences, masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_219": {
                "variable": {
                    "value": "(out_fw, out_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_221": {
                "variable": {
                    "value": "h_t_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lengths_fw.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_222": {
                "variable": {
                    "value": "h_t_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lengths_bw.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "last_hidden_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t_fw, h_t_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "last_hidden_out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[max_pooled, mean_pooled, last_pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_214": {
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lengths_fw.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base.py": {
        "torch": {
            "LSTM_235": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_374": {
                "variable": {
                    "value": "self.dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.sent_aggregation_layer.out_dim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "word_reprs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_word_batch, char_lvl_word_repr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "in_features": {
                    "value": "self.sent_aggregation_layer.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.scalar_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.char_encoding_layer.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "gate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scalar_gate(emb_word_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.vector_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.char_encoding_layer.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.char_encoding_layer.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "gate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vector_gate(emb_word_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/optim/optim.py": {
        "torch": {
            "SGD_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__82": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_55": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer.py": {
        "torch": {}
    },
    "src/utils/logger.py": {
        "torch": {
            "save_208": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.run_savepath, filename)",
                            "Call"
                        ],
                        [
                            "path_override if path_override else savepath",
                            "IfExp"
                        ],
                        [
                            "os.path.join(self.run_savepath, filename + '.png')",
                            "Call"
                        ],
                        [
                            "path_override if path_override else savepath",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/ops.py": {
        "torch": {
            "pow_62": {
                "variable": {
                    "value": "M2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix1 - matrix2",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "M2_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_76": {
                "variable": {
                    "value": "n_m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix1",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "n_m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix2",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_80": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(matrix1, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(tensor1, 2, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "n_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(matrix2, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(tensor2, 2, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_83": {
                "variable": {
                    "value": "colprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "matrix2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "colsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "colprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(matrix1, matrix2)",
                            "Call"
                        ],
                        [
                            "torch.mul(tensor1, tensor2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_88": {
                "variable": {
                    "value": "cosine_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "colsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(colprod, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(colprod, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_107": {
                "variable": {
                    "value": "n_m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_108": {
                "variable": {
                    "value": "n_m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_111": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(matrix1, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(tensor1, 2, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "n_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(matrix2, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(tensor2, 2, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_114": {
                "variable": {
                    "value": "colprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "colsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "colprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(matrix1, matrix2)",
                            "Call"
                        ],
                        [
                            "torch.mul(tensor1, tensor2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_119": {
                "variable": {
                    "value": "cosine_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "colsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(colprod, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(colprod, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "col_norm + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_150": {
                "variable": {
                    "value": "t1_x_t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix1.view(d, n1, 1)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, n2)",
                            "Call"
                        ],
                        [
                            "tensor1.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, seq_len_q, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix2.view(d, 1, n2)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, n1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "tensor2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, seq_len_p, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_151": {
                "variable": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1_x_t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(t1, t2)",
                            "Call"
                        ],
                        [
                            "torch.mul(t1, t2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_153": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix1.view(d, n1, 1)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, n2)",
                            "Call"
                        ],
                        [
                            "tensor1.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, seq_len_q, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_154": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix2.view(d, 1, n2)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, n1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "tensor2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, seq_len_p, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_155": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(t1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.norm(t1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(t2, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.norm(t2, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_190": {
                "variable": {
                    "value": "t1_x_t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix1.view(d, n1, 1)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, n2)",
                            "Call"
                        ],
                        [
                            "tensor1.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, seq_len_q, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix2.view(d, 1, n2)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, n1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "tensor2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, seq_len_p, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_192": {
                "variable": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1_x_t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(t1, t2)",
                            "Call"
                        ],
                        [
                            "torch.mul(t1, t2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_195": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix1.view(d, n1, 1)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, n2)",
                            "Call"
                        ],
                        [
                            "tensor1.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "t1.repeat(1, 1, seq_len_q, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix2.view(d, 1, n2)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, n1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "tensor2.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "t2.repeat(1, seq_len_p, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_197": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(t1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.norm(t1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(t2, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.norm(t2, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_197": {
                "variable": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_225": {
                "variable": {
                    "value": "Wv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "W.view(1, 1, perspectives, hidden)",
                            "Call"
                        ],
                        [
                            "W.repeat(batch_size, seq_len, 1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "W.view(batch_size, seq_len * perspectives, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v1_broadcasted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v1.repeat(1, l)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_226": {
                "variable": {
                    "value": "Wv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "W.view(1, 1, perspectives, hidden)",
                            "Call"
                        ],
                        [
                            "W.repeat(batch_size, seq_len, 1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "W.view(batch_size, seq_len * perspectives, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v2_broadcasted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2.repeat(1, l)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_275": {
                "variable": {
                    "value": "Wm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "W.view(1, 1, perspectives, hidden)",
                            "Call"
                        ],
                        [
                            "W.repeat(batch_size, seq_len, 1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "W.view(batch_size, seq_len * perspectives, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "m1_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m1.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "m1_exp.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "m1_exp.repeat(1, 1, perspectives, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "m1_exp.view(batch_size, seq_len * perspectives, hidden).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_276": {
                "variable": {
                    "value": "Wm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "W.view(1, 1, perspectives, hidden)",
                            "Call"
                        ],
                        [
                            "W.repeat(batch_size, seq_len, 1, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "W.view(batch_size, seq_len * perspectives, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "m2_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m2.unsqueeze(3).contiguous()",
                            "Call"
                        ],
                        [
                            "m2_exp.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "m2_exp.repeat(1, 1, perspectives, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "m2_exp.view(batch_size, seq_len * perspectives, hidden).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_64": {
                "input": {
                    "value": "M2_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(M2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_157": {
                "input": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(t1_x_t2, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sum(t1_x_t2, 3).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_199": {
                "input": {
                    "value": "dotprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(t1_x_t2, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sum(t1_x_t2, 3).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "col_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(n_m1, n_m2)",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.mul(norm1, norm2).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/tester.py": {
        "torch": {}
    },
    "src/utils/torch.py": {
        "torch": {
            "pack_padded_sequence_54": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_batch",
                            "variable"
                        ],
                        [
                            "sent.index_select(0, idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_len.tolist()",
                            "Call"
                        ],
                        [
                            "[int(elem) for elem in sent_len_list]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_98": {
                "variable": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "powered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch_tensor)",
                            "Call"
                        ],
                        [
                            "torch.pow(torch_tensor, order)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_99": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(powered, dim, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_118": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_119": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(summed, 1 / order)",
                            "Call"
                        ],
                        [
                            "torch.norm(embeddings.weight, p=order, dim=dim, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(embeddings.weight, norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_94": {
                "variable": {
                    "value": "powered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_96": {
                "variable": {
                    "value": "powered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if use_cuda else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if use_cuda else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_60": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output, batch_first=batch_first, padding_value=config.PAD_ID)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(select_dim, idx_unsort)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "config.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if use_cuda else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if use_cuda else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/word_similarity.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_10": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Embedding_275": {
                "variable": {
                    "value": "torch_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "*embedding_matrix.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_276": {
                "variable": {
                    "value": "torch_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_296": {
                "variable": {
                    "value": "char_torch_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "*char_embedding_matrix.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_297": {
                "variable": {
                    "value": "char_torch_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(char_embedding_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_331": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_226": {
                "seed": {
                    "value": "hp.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_227": {
                "seed": {
                    "value": "hp.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}