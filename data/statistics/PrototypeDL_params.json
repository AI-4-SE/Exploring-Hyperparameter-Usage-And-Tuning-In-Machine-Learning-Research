{
    "CAE_MNIST.py": {
        "tensorflow": {
            "placeholder_99": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "X_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, input_size], name='X')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_height, input_width, n_input_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "lambda_class_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_class_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "lambda_ae_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_ae_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "lambda_2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_2_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "lambda_1_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_1_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "feature_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "el4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(el3, weights['enc_f4'], biases['enc_b4'], stride_4, 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flatten_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "feature_vectors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "prototype_feature_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform(shape=[n_prototypes, n_features], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "prototype_feature_vectors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_212": {
                "variable": {
                    "value": "deconv_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.shape(feature_vectors)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv_batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "reshape_feature_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(el4, shape=[-1, flatten_size], name='feature_vectors')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, l4_shape[1], l4_shape[2], l4_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "X_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dl1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_layer(dl2, weights['dec_f1'], biases['dec_b1'], output_shape=[deconv_batch_size, input_height, input_width, n_input_channel], strides=stride_1, padding='SAME', nonlinearity=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X_decoded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_236": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, input_size], name='X')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "X_true",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_246": {
                "variable": {
                    "value": "prototype_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prototype_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_distances(feature_vectors, prototype_feature_vectors)",
                            "Call"
                        ],
                        [
                            "tf.identity(prototype_distances, name='prototype_distances')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prototype_distances",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_249": {
                "variable": {
                    "value": "feature_vector_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_vector_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_distances(prototype_feature_vectors, feature_vectors)",
                            "Call"
                        ],
                        [
                            "tf.identity(feature_vector_distances, name='feature_vector_distances')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_vector_distances",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prototype_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_distances(feature_vectors, prototype_feature_vectors)",
                            "Call"
                        ],
                        [
                            "tf.identity(prototype_distances, name='prototype_distances')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "last_layer['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_253": {
                "variable": {
                    "value": "probability_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(prototype_distances, last_layer['w'], name='logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "probability_distribution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_262": {
                "variable": {
                    "value": "ae_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "list_of_norms(X_decoded - X_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ae_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_263": {
                "variable": {
                    "value": "class_error",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, n_classes], name='Y')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(prototype_distances, last_layer['w'], name='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_264": {
                "variable": {
                    "value": "class_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=Y, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.identity(class_error, name='class_error')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "class_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "error_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_min(feature_vector_distances, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "error_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_266": {
                "variable": {
                    "value": "error_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_min(prototype_distances, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "error_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_273": {
                "variable": {
                    "value": "total_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_class_t * class_error + lambda_ae_t * ae_error + lambda_1_t * error_1 + lambda_2_t * error_2",
                            "BinOp"
                        ],
                        [
                            "tf.identity(total_error, name='total_error')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_276": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "correct_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_279": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "global_variables_initializer_287": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_331": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "n_saves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "ConfigProto_333": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_171": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter",
                            "Method Argument"
                        ],
                        [
                            "filter",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_177": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter",
                            "Method Argument"
                        ],
                        [
                            "filter",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_284": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate).minimize(total_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_110": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_1, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_2, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_3, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_4, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_f4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_4, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_f4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_130": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_3, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_f3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_2, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_f2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_138": {
                "initial_value": {
                    "value": "tf.random_normal(filter_shape_1, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "initial_value": {
                    "value": "tf.zeros([n_map_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "initial_value": {
                    "value": "tf.zeros([n_map_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "initial_value": {
                    "value": "tf.zeros([n_map_3], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_b3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "initial_value": {
                    "value": "tf.zeros([n_map_4], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_b4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "initial_value": {
                    "value": "tf.zeros([n_map_3], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_b4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "initial_value": {
                    "value": "tf.zeros([n_map_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_b3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "initial_value": {
                    "value": "tf.zeros([n_map_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "initial_value": {
                    "value": "tf.zeros([n_input_channel], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "initial_value": {
                    "value": "tf.random_uniform(shape=[n_prototypes, n_classes], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "last_layer_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_min_265": {
                "input_tensor": {
                    "value": "feature_vector_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_distances(prototype_feature_vectors, feature_vectors)",
                            "Call"
                        ],
                        [
                            "tf.identity(feature_vector_distances, name='feature_vector_distances')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_266": {
                "input_tensor": {
                    "value": "prototype_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_distances(feature_vectors, prototype_feature_vectors)",
                            "Call"
                        ],
                        [
                            "tf.identity(prototype_distances, name='prototype_distances')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_276": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(prototype_distances, last_layer['w'], name='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_277": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, n_classes], name='Y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1), name='correct_prediction')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_329": {
                "name": {
                    "value": "hyperparameters",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(name=name, value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_336": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "shape": {
                    "value": "[n_map_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "shape": {
                    "value": "[n_map_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "shape": {
                    "value": "[n_map_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "shape": {
                    "value": "[n_map_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "shape": {
                    "value": "[n_map_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "[n_map_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "[n_map_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "shape": {
                    "value": "[n_input_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "feature_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(el4, shape=[-1, flatten_size], name='feature_vectors')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_329": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters.items()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_182": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "autoencoder_helpers.py": {
        "tensorflow": {
            "reshape_28": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "list_of_norms(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "list_of_norms(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.pow(X, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_40": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data_preprocessing.py": {
        "tensorflow": {}
    }
}