{
    "AttGAN/attgan.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers + [Conv2dBlock(n_in, n_out, (4, 4), stride=2, padding=1, norm_fn=norm_fn, acti_fn=acti_fn)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers + [Conv2dBlock(n_in, n_out, (4, 4), stride=2, padding=1, norm_fn=norm_fn, acti_fn=acti_fn)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zs[-1], a_tile]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.fc_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearBlock(1024 * self.f_size * self.f_size, fc_dim, fc_norm_fn, fc_acti_fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearBlock(1024 * self.f_size * self.f_size, fc_dim, fc_norm_fn, fc_acti_fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "self.optim_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "args.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "self.optim_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "args.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_165": {
                "variable": {
                    "value": "gc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dc_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "att_b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l1_loss_166": {
                "variable": {
                    "value": "gr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.G.decode(zs_a, att_a_)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "img_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_222": {
                "variable": {
                    "value": "dc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dc_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "att_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_253": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_162": {
                "variable": {
                    "value": "gf_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_164": {
                "variable": {
                    "value": "gf_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'G': self.G.state_dict(), 'D': self.D.state_dict(), 'optim_G': self.optim_G.state_dict(), 'optim_D': self.optim_D.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'G': self.G.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'G': self.G.state_dict(), 'D': self.D.state_dict(), 'optim_G': self.optim_G.state_dict(), 'optim_D': self.optim_D.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'G': self.G.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, zs[len(self.dec_layers) - 2 - i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, a_tile]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_192": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_like_190": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_200": {
                "outputs": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interpolate(real, fake).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_215": {
                "input": {
                    "value": "d_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_216": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_219": {
                "input": {
                    "value": "d_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_220": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_215": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_219": {
                "input": {
                    "value": "d_real",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_220": {
                "input": {
                    "value": "d_fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_202": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "AttGAN/data.py": {
        "torch": {
            "DataLoader_132": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, 128, 'valid', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA(args.data_path, args.attr_path, 128, 'valid', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, 128, 'valid', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA(args.data_path, args.attr_path, 128, 'valid', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(self.labels[index] + 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(self.labels[index] + 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/nn.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "norm_fn == 'none'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "norm_fn == 'none'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "norm_fn == 'none'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BatchNorm1d_9": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_12": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_26": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/switchable_norm.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_51": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_126": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_207": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_155": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/test.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[img_a]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/test_multi.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[img_a]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/test_slide.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA(args.data_path, args.attr_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ],
                        [
                            "CelebA_HQ(args.data_path, args.attr_path, args.image_list_path, args.img_size, 'test', args.attrs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[img_a]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AttGAN/torchsummary.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[dtype] * len(input_size)",
                            "BinOp"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_44": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_47": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "FaderNetworks/classifier.py": {
        "torch": {
            "save_84": {
                "obj": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Classifier(params).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(params.dump_path, '%s.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaderNetworks/data/preprocess.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([img.transpose((2, 0, 1))[None] for img in all_images], 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_49": {
                "obj": {
                    "value": "data[:20000].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'images_%i_%i_20000.pth' % (IMG_SIZE, IMG_SIZE)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([img.transpose((2, 0, 1))[None] for img in all_images], 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "IMG_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'images_%i_%i.pth' % (IMG_SIZE, IMG_SIZE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{k: np.zeros(N_IMAGES, dtype=np.bool) for k in attr_keys}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "ATTR_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'attributes.pth'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "FaderNetworks/interpolate.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "ae",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "interpolations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "interpolations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(interpolations, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[x.unsqueeze(1) for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaderNetworks/src/loader.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(DATA_PATH, images_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(DATA_PATH, 'attributes.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(1) for x in attrs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "batch_x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "batch_x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "FaderNetworks/src/model.py": {
        "torch": {
            "ModuleList_98": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "enc_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dec_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers[self.n_layers - self.n_skip:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.proj_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.conv_out_fm, self.hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.proj_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.conv_out_fm, self.hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[dec_outputs[-1], y.expand(bs, self.n_attr, size, size)]",
                            "List"
                        ],
                        [
                            "torch.cat(input, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_264": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[:, k:k + n_cat].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributes[:, k:k + n_cat].max(1)[1].view(-1)",
                            "Call"
                        ],
                        [
                            "(y + Variable(shift.cuda())) % n_cat",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor(bs).random_(j - i)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(bs).fill_(new_value)",
                            "Call"
                        ],
                        [
                            "y.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_fm",
                            "Name"
                        ],
                        [
                            "n_out",
                            "Name"
                        ],
                        [
                            "self.init_fm",
                            "Attribute"
                        ],
                        [
                            "n_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_fm",
                            "Name"
                        ],
                        [
                            "min(2 * n_out, max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_in, self.max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_out, self.max_fm)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*enc_layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*dec_layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "in_features": {
                    "value": "self.conv_out_fm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_167": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_attr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "self.img_fm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_fm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_190": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_fm",
                            "Name"
                        ],
                        [
                            "min(2 * n_out, max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_in, self.max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_out, self.max_fm)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_237": {
                "in_features": {
                    "value": "self.conv_out_fm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_attr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "enc_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_52": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "n_dec_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_out + n_attr + (n_out if skip_connection else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_dec_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_fm",
                            "Name"
                        ],
                        [
                            "n_out",
                            "Name"
                        ],
                        [
                            "self.init_fm",
                            "Attribute"
                        ],
                        [
                            "n_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_fm",
                            "Name"
                        ],
                        [
                            "min(2 * n_out, max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_in, self.max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_out, self.max_fm)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if n == self.n_patch_dis_layers - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_fm",
                            "Name"
                        ],
                        [
                            "min(2 * n_out, max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_in, self.max_fm)",
                            "Call"
                        ],
                        [
                            "min(2 * n_out, self.max_fm)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_199": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "in_channels": {
                    "value": "n_dec_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_out + n_attr + (n_out if skip_connection else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_dec_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "n_dec_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_out + n_attr + (n_out if skip_connection else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_dec_out * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_59": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "p": {
                    "value": "dec_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "FaderNetworks/src/training.py": {
        "torch": {
            "binary_cross_entropy_125": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ptc_dis(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "1 - y_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_126": {
                "input": {
                    "value": "fake_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ptc_dis(Variable(dec_outputs[-1].data))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(real_preds.size()).fill_(params.smooth_label).cuda())",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(ptc_dis_preds.size()).fill_(params.smooth_label).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_189": {
                "variable": {
                    "value": "ptc_dis_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ptc_dis_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ptc_dis(dec_outputs_flipped[-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "1 - y_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, '%s_%s.pth' % (name, filename))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaderNetworks/src/utils.py": {
        "torch": {
            "load_202": {
                "variable": {
                    "value": "to_reload",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "to_reload",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(to_reload)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaderNetworks/train.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "eval_clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params.eval_clf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attack_attgan.py": {
        "torch": {
            "argmax_238": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_241": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.attrib_gen.get_optim_params()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "args.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.attgan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_286": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_67": {
                "variable": {
                    "value": "attr_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attr_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.attr_b * 2 - 1) * self.thresh_int",
                            "BinOp"
                        ],
                        [
                            "torch.min(attr_b, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(attr_b, torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "attr_b.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_68": {
                "variable": {
                    "value": "attr_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attr_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.attr_b * 2 - 1) * self.thresh_int",
                            "BinOp"
                        ],
                        [
                            "torch.min(attr_b, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(attr_b, torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "attr_b.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "self.input_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA_Dataset(args.attrib_path, args.data_dir, train, args.train_attribute, transform=custom_transforms, att_gan=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_193": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_247": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "old_model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "model_state_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.attgan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_299": {
                "variable": {
                    "value": "inp_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "self.params.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "attrib_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.attrib_gen.attr_a.clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_204": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attack_fadernets.py": {
        "torch": {
            "argmax_145": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_148": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[model.attrib_gen.a1, model.attrib_gen.a2, model.attrib_gen.a3]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "args.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_245": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a1 + a1_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 6))",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0, 0.0]) - a2 + a2_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a3 + a3_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_52": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a1_p, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "a1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), a1_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a2_p, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "a2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), a2_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "a3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a3_p, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "a3_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), a3_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "alpha_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alpha1, alpha2, alpha3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_128": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_196": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_46": {
                "variable": {
                    "value": "a1_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a1",
                            "Attribute"
                        ],
                        [
                            "torch.min(a1_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a1_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "variable": {
                    "value": "a1_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a1",
                            "Attribute"
                        ],
                        [
                            "torch.min(a1_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a1_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_48": {
                "variable": {
                    "value": "a2_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a2",
                            "Attribute"
                        ],
                        [
                            "torch.min(a2_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a2_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_49": {
                "variable": {
                    "value": "a2_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a2",
                            "Attribute"
                        ],
                        [
                            "torch.min(a2_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a2_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_50": {
                "variable": {
                    "value": "a3_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a3",
                            "Attribute"
                        ],
                        [
                            "torch.min(a3_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a3_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_51": {
                "variable": {
                    "value": "a3_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a3",
                            "Attribute"
                        ],
                        [
                            "torch.min(a3_p, self.eps)",
                            "Call"
                        ],
                        [
                            "torch.max(a3_p, -self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_90": {
                "variable": {
                    "value": "old_model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "model_state_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "self.params.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 6))",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0, 0.0]) - a2 + a2_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "attack_fadernets_seq.py": {
        "torch": {
            "argmax_190": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[model.attrib_1.a1, model.attrib_2.a1, model.attrib_3.a1]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "args.gen1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_228": {
                "variable": {
                    "value": "args.gen2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "args.gen3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_273": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.a1, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "a1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), self.a1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "model_state_d_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "model_state_d_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "model_state_d_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ],
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_200": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "self.params.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 6), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "attack_single_attribute.py": {
        "torch": {
            "argmax_120": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.target_model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[model.attrib_gen.a1]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "args.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_167": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a1 + a1_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.a1, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "a1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), self.a1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "old_model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "model_state_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "self.params.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "celebA_data_loader.py": {
        "torch": {}
    },
    "constrained_attack.py": {
        "torch": {
            "argmax_123": {
                "variable": {
                    "value": "true_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.target_model(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_157": {
                "variable": {
                    "value": "true_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.target_model(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "attrib_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - attrib_tuple[0], attrib_tuple[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "attrib_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "attrib_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - attrib_tuple[1], attrib_tuple[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "attrib_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "pred_recon_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_recon_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_recon_left)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_165": {
                "variable": {
                    "value": "pred_recon_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_recon_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_recon_right)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_200": {
                "variable": {
                    "value": "label_attrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_attrib",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_213": {
                "variable": {
                    "value": "args.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_232": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a1 + a1_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "self.a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a2 + a2_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self.a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 0.0]) - a3 + a3_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.a1, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "a1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), self.a1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.a2, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "a2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), self.a2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "a3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.a3, torch.tensor(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "a3_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0), self.a3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "attrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - alpha, alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "attrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_185": {
                "variable": {
                    "value": "label_attrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_attrib",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[alpha1, alpha2, alpha3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "old_model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "model_state_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params.fader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "[1 - perm_attrib, perm_attrib]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "self.params.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_134": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "zeros_75": {
                "variable": {
                    "value": "Y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nclasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "model_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_min.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_max.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_12": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(torch.argmax(target).unsqueeze(0).to(device))",
                            "Call"
                        ],
                        [
                            "model.target_model(img.to(device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_12": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_69": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(torch.argmax(target).unsqueeze(0).to(device))",
                            "Call"
                        ],
                        [
                            "model.target_model(img.to(device))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_36": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * eps * torch.rand_like(x) - eps",
                            "BinOp"
                        ],
                        [
                            "fgsm(model, x, target, eps_step, targeted, device=device)",
                            "Call"
                        ],
                        [
                            "torch.max(x_min.to(device), x)",
                            "Call"
                        ],
                        [
                            "torch.min(x_max.to(device), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_47": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(torch.argmax(target).unsqueeze(0).to(device))",
                            "Call"
                        ],
                        [
                            "model.target_model(img.to(device))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mod_models.py": {
        "torch": {
            "load_92": {
                "variable": {
                    "value": "stored_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/data/FaderNetworks/models/eye_smile_young_ae.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "stored_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stored_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open('eye_smile_young_state.pth', 'wb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "dl_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolder(path, transform=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(weights, len(weights))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "resnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'run_{:03d}'.format(idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(output_path, 'run_{:03d}'.format(idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(path, mode)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'resmodel.pth')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "WeightedRandomSampler_101": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "make_weights_for_balanced_classes(ds.imgs, len(ds.classes))",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "output_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'rtype': self.rtype, 'n_classes': self.n_classes, 'model_state_dict': sd}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'run_{:03d}'.format(idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(output_path, 'run_{:03d}'.format(idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(path, mode)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'resmodel.pth')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "simple_classifier.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "xprime_batch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xprime_batch_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_182": {
                "variable": {
                    "value": "wts",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_209": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nn.ParameterList(cl.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_min.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_max.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 32, kernel_size=3, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.flatten_size, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "dataset": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA_Dataset(args.attrib_path, args.data_dir, train, args.train_attribute, transform=custom_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_177": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_210": {
                "parameters": {
                    "value": "cl.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_56": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * eps * torch.rand_like(x) - eps",
                            "BinOp"
                        ],
                        [
                            "fgsm(model, x, target, eps_step, targeted)",
                            "Call"
                        ],
                        [
                            "torch.max(x_min.to(device), x)",
                            "Call"
                        ],
                        [
                            "torch.min(x_max.to(device), x)",
                            "Call"
                        ],
                        [
                            "x_batch[i, ...].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l3(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_113": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "self.flatten_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/state_dict_update.py": {
        "torch": {
            "load_4": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/data/FaderNetworks/models/male.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_6": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/data/FaderNetworks/models/updated_male.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/test_classifier.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "dataset": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CelebA_Dataset(args.attrib_path, args.data_dir, test, args.test_attribute, transform=custom_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "/data/work2/AdversarialFaderNetworks/new_class_model/best_model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_70": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}