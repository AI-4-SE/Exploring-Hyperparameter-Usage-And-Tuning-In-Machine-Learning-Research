{
    "ctrl/ctrl.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "self.logsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.ones(self.env.n + self.env.m) * 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "self.env.n + self.env.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "self.env.n + self.env.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "io.BytesIO(b)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ctrl/dataset.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.D, Dnew]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "self.ts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ts, ts]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "t0s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randint(0, 1 + self.T - T, len(idx))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "st_at_rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.D[seq_idx_, t0:t0 + T] for (t0, seq_idx_) in zip(t0s, idx)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ts[seq_idx_, t0:t0 + T] for (t0, seq_idx_) in zip(t0s, idx)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D, rewards]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "[N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "at.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "[N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "at.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_127": {
                "tensors": {
                    "value": "[actions] * s.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions] * s.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[actions] * s.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions] * s.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_130": {
                "tensors": {
                    "value": "[tmp] * s.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_149": {
                "tensors": {
                    "value": "[tmp] * s.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ctrl/dynamics.py": {
        "torch": {
            "zeros_70": {
                "variable": {
                    "value": "t0s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "ts_ode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(1, device=ts_ode.device), ts_ode]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "ts_ode_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ts_ode_sorted, ts_ode_sorted[-1:] + 0.001]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "r0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s0.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "s0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "r0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "s0r0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0, r0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0] * self.P",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "V0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[*s0.shape[:-1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "s0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "V0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[*s0.shape[:-1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "s0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[ds, dv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_69": {
                "start": {
                    "value": "T + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "[ts[:-1]] * s0.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "rts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rt[:, i, Tidx[i]] for i in range(N)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.item() if isinstance(t, torch.Tensor) else t",
                            "IfExp"
                        ],
                        [
                            "t if isinstance(t, torch.Tensor) else torch.tensor(t).to(self.device)",
                            "IfExp"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_158": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_187": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "ts_ode.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_185": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sv[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "st[-1] + delta_t_ * ds",
                            "BinOp"
                        ],
                        [
                            "st[-1] + delta_t_ * ds",
                            "BinOp"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_158": {
                "tensors": {
                    "value": "Vt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[V0]",
                            "List"
                        ],
                        [
                            "torch.stack(Vt)[:H].permute(1, 2, 0, 3).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "Vt.reshape([L, self.P, N, H]).view(L * self.P, N, H)",
                            "Call"
                        ],
                        [
                            "[V0]",
                            "List"
                        ],
                        [
                            "torch.stack(Vt)[:H].permute(1, 2, 0, 3)",
                            "Call"
                        ],
                        [
                            "Vt.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_187": {
                "tensors": {
                    "value": "Vt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[V0]",
                            "List"
                        ],
                        [
                            "torch.stack(Vt)[:H].permute(1, 2, 0, 3).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "Vt.reshape([L, self.P, N, H]).view(L * self.P, N, H)",
                            "Call"
                        ],
                        [
                            "[V0]",
                            "List"
                        ],
                        [
                            "torch.stack(Vt)[:H].permute(1, 2, 0, 3)",
                            "Call"
                        ],
                        [
                            "Vt.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_82": {
                "condition": {
                    "value": "ts_norm[n, t] == ts_ode_sorted",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "ctrl/policy.py": {
        "torch": {
            "Tanh_6": {
                "variable": {
                    "value": "tanh_",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctrl/utils.py": {
        "torch": {
            "stack_59": {
                "variable": {
                    "value": "act_hats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(at_hat.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_59": {
                "variable": {
                    "value": "act_hats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_330": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ctrl._f.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_354": {
                "variable": {
                    "value": "ds_dt_opt_L",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ds_dt_opt] * ctrl.n_ens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_360": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ctrl._f.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cholesky_391": {
                "variable": {
                    "value": "L_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(inputs, inputs, ell, sf, eps=eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_418": {
                "variable": {
                    "value": "tanh_",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_542": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "s0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_543": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s0[idx_.item()] for idx_ in idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[numpy_to_torch(ctrl.env.reset()) for _ in range(Ntest)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "mean_act",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(at_hat.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "mean_act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_150": {
                "variable": {
                    "value": "mean_act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_197": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_([p.grad for p in ctrl._g.parameters()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_272": {
                "variable": {
                    "value": "grad_norm_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_([p.grad for p in opt_pars if p is not None and p.grad is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_336": {
                "variable": {
                    "value": "opt_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ds_dt_opt_hat - ds_dt_opt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_407": {
                "variable": {
                    "value": "smooth_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obtain_smooth_test_acts(env, T, sf=sf, ell=ell) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_408": {
                "variable": {
                    "value": "ells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ell] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "ells",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "sfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sf] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_409": {
                "variable": {
                    "value": "sfs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_410": {
                "variable": {
                    "value": "tss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ts] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_410": {
                "variable": {
                    "value": "tss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_432": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[numpy_to_torch(env.reset(), env.device) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LambdaLR_478": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "my_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda ep: min(10.0, 10 ** (ep / 100)) / 10",
                            "Lambda"
                        ]
                    ]
                }
            },
            "sum_529": {
                "variable": {
                    "value": "opt_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ds_dt_opt_hat - ds_dt_opt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_58": {
                "tensors": {
                    "value": "list(at_hat.keys())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "td_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "td_error ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_329": {
                "tensors": {
                    "value": "[a_opt] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_359": {
                "tensors": {
                    "value": "[a_opt] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_393": {
                "*size": {
                    "value": "[L, N, T, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_393": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "st_at",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[st, at]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_449": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(env.reset(), dtype=torch.float32) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "st_at",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[st_obs, at]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_521": {
                "tensors": {
                    "value": "[a_opt] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_553": {
                "tensors": {
                    "value": "[at] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "rep_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(rep_buf, D.N)",
                            "Call"
                        ],
                        [
                            "D.N",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "D.N if rep_buf < 1 else rep_buf",
                            "IfExp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "D.N if rep_buf < 1 else rep_buf",
                            "IfExp"
                        ],
                        [
                            "D.N if rep_buf < 1 else rep_buf",
                            "IfExp"
                        ],
                        [
                            "D.N",
                            "Attribute"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "[st] * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_235": {
                "tensors": {
                    "value": "[st] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_237": {
                "input": {
                    "value": "ctrl.logsn[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_363": {
                "tensors": {
                    "value": "[s_opt, a_opt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_364": {
                "loc": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctrl._f._f.get_probs(torch.cat([s_opt, a_opt], -1))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctrl._f._f.get_probs(torch.cat([s_opt, a_opt], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_397": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(H / env.dt)",
                            "Call"
                        ],
                        [
                            "D.T",
                            "Attribute"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "env.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_406": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(H / env.dt)",
                            "Call"
                        ],
                        [
                            "D.T",
                            "Attribute"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "env.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_413": {
                "tensors": {
                    "value": "[t.view([1, 1])] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "data": {
                    "value": "env.reset()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/base_env.py": {
        "torch": {
            "atan2_129": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sintheta / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "costheta / C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "torch_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "torch_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g(self.torch_transform_states(s_), t_) for (s_, t_) in zip(st, ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_74": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exponential_78": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1 / self.dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_92": {
                "tensors": {
                    "value": "[numpy_to_torch(self.reset()) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_like_105": {
                "input": {
                    "value": "st_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.torch_transform_states(st)",
                            "Call"
                        ],
                        [
                            "st_obs + torch.randn_like(st_obs) * self.obs_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_106": {
                "tensors": {
                    "value": "[ts] * st_obs.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/ctacrobot.py": {
        "torch": {
            "cat_93": {
                "tensors": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dv",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_124": {
                "tensors": {
                    "value": "[theta1, theta2, vel1, vel2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "[dtheta1, dtheta2, ddtheta1, ddtheta2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[theta1.cos(), theta1.sin(), theta2.cos(), theta2.sin(), vel1, vel2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_143": {
                "input": {
                    "value": "theta1 + theta2 - pi / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "action ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_161": {
                "input": {
                    "value": "th1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_161": {
                "input": {
                    "value": "th1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_146": {
                "input": {
                    "value": "theta1 - pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_162": {
                "input": {
                    "value": "th1 + th2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_163": {
                "input": {
                    "value": "th1 + th2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_142": {
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(cos_th2, sin_th2)",
                            "Call"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_144": {
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(cos_th2, sin_th2)",
                            "Call"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_145": {
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(cos_th2, sin_th2)",
                            "Call"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_147": {
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(cos_th2, sin_th2)",
                            "Call"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_141": {
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(cos_th2, sin_th2)",
                            "Call"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "envs/ctcartpole.py": {
        "torch": {
            "cat_59": {
                "tensors": {
                    "value": "[ds[..., 0:1], dv[..., 0:1], ds[..., 1:2], dv[..., 1:2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "state_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_dot, self.length * theta.cos(), self.length * theta.sin(), theta_dot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "[x, x_dot, theta, theta_dot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_123": {
                "variable": {
                    "value": "costheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_124": {
                "variable": {
                    "value": "sintheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_145": {
                "variable": {
                    "value": "ee_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x + sin_th_len, cos_th_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[ds[..., 0:1], dv[..., 0:1], ds[..., 1:3], dv[..., 1:2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "[x * 0.0, d1, x * 0.0, d2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_131": {
                "tensors": {
                    "value": "[x_dot, xacc, -sintheta * theta_dot / C, costheta * theta_dot / C, thetaacc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "tensors": {
                    "value": "[x_dot, xacc, theta_dot, thetaacc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_80": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_80": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_93": {
                "tensors": {
                    "value": "[x * 0.0, d1, x * 0.0, x * 0.0, d2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_138": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_138": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_[..., 2:3]",
                            "Subscript"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "self.trigonometric2angle(costheta, sintheta)",
                            "Call"
                        ],
                        [
                            "state[..., 2]",
                            "Subscript"
                        ],
                        [
                            "s[..., 2:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_147": {
                "input": {
                    "value": "err ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "xdot ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_155": {
                "input": {
                    "value": "a ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "envs/ctpendulum.py": {
        "torch": {
            "cat_49": {
                "tensors": {
                    "value": "[ds, dv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "[theta * 0.0, torch.ones_like(theta_dot) * 3.0 / (m * l ** 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "[theta, vel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[theta.cos(), theta.sin(), theta_dot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_93": {
                "tensors": {
                    "value": "[thdot, -3 * g / (2 * l) * torch.sin(th + np.pi) + 3.0 / (m * l ** 2) * action[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "action ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "[-sinth * thdot, costh * thdot, -3 * g / (2 * l) * torch.sin(th + np.pi) + 3.0 / (m * l ** 2) * action[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_68": {
                "input": {
                    "value": "theta_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[..., 1:2]",
                            "Subscript"
                        ],
                        [
                            "state[..., 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_93": {
                "input": {
                    "value": "th + np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_98": {
                "input": {
                    "value": "th + np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "runner.py": {
        "torch": {
            "device_3": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_default_dtype_4": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/benn.py": {
        "torch": {
            "randperm_30": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_ens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_19": {
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_20": {
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "data": {
                    "value": "torch.Tensor(n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "data": {
                    "value": "torch.Tensor(n_ens, 1, n_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_26": {
                "data": {
                    "value": "torch.Tensor(n_ens, 1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "data": {
                    "value": "torch.Tensor(1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/bnn.py": {
        "torch": {
            "ParameterList_18": {
                "variable": {
                    "value": "self.weight_mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_19": {
                "variable": {
                    "value": "self.bias_mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_74": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[L, P]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight_mus[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_32": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_40": {
                "variable": {
                    "value": "self.weight_logsigs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_41": {
                "variable": {
                    "value": "self.bias_logsigs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "1 + torch.exp(sig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight_mu.view([-1]) for weight_mu in self.weight_mus]",
                            "ListComp"
                        ],
                        [
                            "mus + [bias_mu.view([-1]) for bias_mu in self.bias_mus]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(mus)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_143": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight_mu.view([-1]) for weight_mu in self.weight_mus]",
                            "ListComp"
                        ],
                        [
                            "mus + [bias_mu.view([-1]) for bias_mu in self.bias_mus]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(mus)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__transform_sig(torch.cat(logsigs))",
                            "Call"
                        ],
                        [
                            "torch.cat([weight_sig.view([-1]) for weight_sig in self.weight_logsigs])",
                            "Call"
                        ],
                        [
                            "torch.cat([sigs, bias_sigs])",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_144": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(mus)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(mus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_73": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[L, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight_mus[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(L, -1) for w in weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_sig.view([-1]) for weight_sig in self.weight_logsigs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.Tensor(n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_35": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_53": {
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "logsigs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight_logsig.view([-1]) for weight_logsig in self.weight_logsigs]",
                            "ListComp"
                        ],
                        [
                            "logsigs + [bias_logsigs.view([-1]) for bias_logsigs in self.bias_logsigs]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_144": {
                "input": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight_mu.view([-1]) for weight_mu in self.weight_mus]",
                            "ListComp"
                        ],
                        [
                            "mus + [bias_mu.view([-1]) for bias_mu in self.bias_mus]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(mus)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_144": {
                "input": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight_mu.view([-1]) for weight_mu in self.weight_mus]",
                            "ListComp"
                        ],
                        [
                            "mus + [bias_mu.view([-1]) for bias_mu in self.bias_mus]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(mus)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.view(L, -1) for b in biases]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights, biases]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "bias_sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_sig.view([-1]) for bias_sig in self.bias_logsigs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "sigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigs, bias_sigs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "torch.Tensor(1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_37": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "data": {
                    "value": "torch.Tensor(n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_45": {
                "data": {
                    "value": "torch.Tensor(1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "[L, 1, weight_mu.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "weight_mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x] * L)",
                            "Call"
                        ],
                        [
                            "act(norm(self.dropout(torch.baddbmm(bias, x, weight))))",
                            "Call"
                        ],
                        [
                            "act(norm(self.dropout(F.linear(x, weight.T, bias))))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(weights, biases, self.acts, self.norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weight_mus, self.bias_mus, self.acts, self.norms)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "baddbmm_125": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(weights, biases, self.acts, self.norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weight_mus, self.bias_mus, self.acts, self.norms)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x] * L)",
                            "Call"
                        ],
                        [
                            "act(norm(self.dropout(torch.baddbmm(bias, x, weight))))",
                            "Call"
                        ],
                        [
                            "act(norm(self.dropout(F.linear(x, weight.T, bias))))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(weights, biases, self.acts, self.norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weight_mus, self.bias_mus, self.acts, self.norms)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/dropout_bnn.py": {
        "torch": {
            "ParameterList_16": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_17": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bernoulli_50": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "1 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "[L, 1, self.layers_dim[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "data": {
                    "value": "torch.Tensor(n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "data": {
                    "value": "torch.Tensor(n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_27": {
                "normalized_shape": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/enn.py": {
        "torch": {
            "ParameterList_16": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_17": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_55": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "weights_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Parameter(weight[:N]) for weight in self.weights]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterList_56": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "biases_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Parameter(bias[:N]) for bias in self.biases]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "randperm_59": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_ens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_115": {
                "variable": {
                    "value": "self.sp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.max_logsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.min_logsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-2 * torch.ones([n_out])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "data": {
                    "value": "weight[:N]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "data": {
                    "value": "bias[:N]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "[x] * self.n_ens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "data": {
                    "value": "torch.Tensor(n_ens, n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "data": {
                    "value": "torch.Tensor(n_ens, 1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_95": {
                "tensors": {
                    "value": "[x] * self.n_ens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "baddbmm_123": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(weight, bias)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x] * self.n_ens) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "norm(act(x_))",
                            "Call"
                        ],
                        [
                            "torch.stack([x] * self.n_ens) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "norm(act(x_))",
                            "Call"
                        ],
                        [
                            "x.mean(0) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_27": {
                "normalized_shape": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "baddbmm_97": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(weight, bias)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x] * self.n_ens) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "norm(act(x_))",
                            "Call"
                        ],
                        [
                            "torch.stack([x] * self.n_ens) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "norm(act(x_))",
                            "Call"
                        ],
                        [
                            "x.mean(0) if x2d else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ],
                        [
                            "zip(self.weights, self.biases, self.acts, self.layer_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_136": {
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_probs(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/ibnn.py": {
        "torch": {
            "ParameterList_20": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_21": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_31": {
                "variable": {
                    "value": "self.z_mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_32": {
                "variable": {
                    "value": "self.z_logsigs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_43": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_ens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_109": {
                "variable": {
                    "value": "qhat",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.mean([0])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "sig_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__transform_sig(logsig).pow(2).mean(0)[0].pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_110": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.ones_like(mu_)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(sig_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "kl_",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "kls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "[L, 1, z_mu.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "torch.Tensor(n_in, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_35": {
                "data": {
                    "value": "torch.Tensor(n_ens, 1, n_node)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_38": {
                "data": {
                    "value": "torch.Tensor(n_ens, 1, n_node)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_93": {
                "tensors": {
                    "value": "[x] * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_110": {
                "input": {
                    "value": "sig_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__transform_sig(logsig).pow(2).mean(0)[0].pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.Tensor(1, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "sum_22": {
                "variable": {
                    "value": "X1s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "X1s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_53": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.bmm(x, y_t)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_80": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_87": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_88": {
                "variable": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_45": {
                "tensors": {
                    "value": "[y] * x.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-0.5 * dnorm2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_120": {
                "input": {
                    "value": "-0.5 * dnorm2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / ell",
                            "BinOp"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x if isinstance(x, torch.Tensor) else torch.tensor(x)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_84": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_88": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / ell",
                            "BinOp"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x if isinstance(x, torch.Tensor) else torch.tensor(x)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CELU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_25": {
                "input": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 / ell",
                            "BinOp"
                        ],
                        [
                            "X1 / ell",
                            "BinOp"
                        ],
                        [
                            "X1",
                            "Method Argument"
                        ],
                        [
                            "X1",
                            "Method Argument"
                        ],
                        [
                            "X1",
                            "Method Argument"
                        ],
                        [
                            "X1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "X1.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "X1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_90": {
                "input": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_122": {
                "n": {
                    "value": "X1.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "X1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "value0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sigmoid_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / ell",
                            "BinOp"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x if isinstance(x, torch.Tensor) else torch.tensor(x)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}