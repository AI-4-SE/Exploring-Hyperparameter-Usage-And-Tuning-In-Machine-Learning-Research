{
    "utils/procedures.py": {
        "sklearn": {
            "contingency_matrix_119": {
                "variable": {
                    "value": "contingency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Tensor_59": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "precision_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precisions.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.unsqueeze(2) - prototypes.t().unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "features - prototypes[prototype]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "extended_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff2.permute(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "precision_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(precisions.unsqueeze(0), diff)",
                            "Call"
                        ],
                        [
                            "torch.matmul(multiprecisions.unsqueeze(0), diff.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "diagonal_148": {
                "variable": {
                    "value": "mahalanobis_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "extended_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(diff2.permute(2, 0, 1), precision_diff)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_149": {
                "variable": {
                    "value": "mahalanobis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mahalanobis_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diagonal(extended_product, offset=0, dim1=1, dim2=2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(features.size(0), prototypes.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "mahalanobis_square",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_162": {
                "variable": {
                    "value": "mahalanobis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mahalanobis_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diagonal(extended_product, offset=0, dim1=1, dim2=2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(features.size(0), prototypes.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_22": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_124": {
                "input": {
                    "value": "x + (x ** 2 + 1) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "x + (x ** 2 - 1) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosine_similarity_140": {
                "x1": {
                    "value": "features.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "prototypes.t().unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "precision_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "multiprecisions.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "diff.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "precision_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(precisions.unsqueeze(0), diff)",
                            "Call"
                        ],
                        [
                            "torch.matmul(multiprecisions.unsqueeze(0), diff.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_26": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_38": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_132": {
                "input": {
                    "value": "(1 + x) / (1 - x + 1e-06) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_43": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_136": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities",
                            "Call"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_72": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities",
                            "Call"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "agents/classifier.py": {
        "torch": {
            "SGD_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.original_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_57": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.args.learning_rate_decay_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.learning_rate_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.best_model_file_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_327": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_393": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analize.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "DataLoader_12": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root=data_root, split='train', download=True, transform=TF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_16": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root=data_root, split='test', download=True, transform=TF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=True, download=True, transform=TF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=TF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=True, download=True, transform=TF, target_transform=TTF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=False, download=True, transform=TF, target_transform=TTF)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testsetout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(dataroot, transform=input_TF)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(dataroot, transform=input_TF)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testsetout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(dataroot, transform=input_TF)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(dataroot, transform=input_TF)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detect.py": {
        "torch": {
            "set_device_23": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "pre_trained_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_path, 'model' + str(args.execution) + '.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:' + str(args.gpu)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_156": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_160": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(logits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "example.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda worker_id: random.seed(base_seed + worker_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1 * 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_54": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9, nesterov=True, weight_decay=1 * 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 200, 250]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_157": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint/ckpt.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "oodloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "oodset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='data/svhn', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "oodloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "oodset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='data/svhn', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "oodloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "oodset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(dataroot, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='data/svhn', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "base_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "base_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'acc': acc, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint/ckpt.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loaders/image.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "trainset_loader_for_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset_for_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda worker_id: random.seed(self.args.seed + worker_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "trainset_loader_for_infer",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset_for_infer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "valset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "outlier_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.outlier_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda worker_id: random.seed(self.args.seed + worker_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "losses/isomax.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_17": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "compute_mode": {
                    "value": "donot_use_mm_for_euclid_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_44": {
                "variable": {
                    "value": "intra_inter_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(features, self.prototypes, p=2.0, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_45": {
                "variable": {
                    "value": "inter_intra_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(features, self.prototypes, p=2.0, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Softmax_37": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "probabilities_at_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities_for_training[range(distances.size(0)), targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_43": {
                "n": {
                    "value": "distances.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses/isomaxplus.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.distance_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_46": {
                "variable": {
                    "value": "intra_inter_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.distance_scale) * torch.cdist(F.normalize(features), F.normalize(self.prototypes), p=2.0, compute_mode='donot_use_mm_for_euclid_dist')",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "inter_intra_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.distance_scale) * torch.cdist(F.normalize(features), F.normalize(self.prototypes), p=2.0, compute_mode='donot_use_mm_for_euclid_dist')",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "abs_19": {
                "input": {
                    "value": "self.distance_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_19": {
                "x1": {
                    "value": "F.normalize(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "F.normalize(self.prototypes)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "compute_mode": {
                    "value": "donot_use_mm_for_euclid_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Softmax_39": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "probabilities_at_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities_for_training[range(distances.size(0)), targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_19": {
                "input": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_45": {
                "n": {
                    "value": "distances.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses/softmax.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_26": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_34": {
                "variable": {
                    "value": "intra_inter_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.matmul(self.weights.t()) + self.bias",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_35": {
                "variable": {
                    "value": "inter_intra_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets_one_hot != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.Tensor([float('Inf')]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.matmul(self.weights.t()) + self.bias",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_33": {
                "n": {
                    "value": "logits.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "set_printoptions_16": {
                "edgeitems": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "linewidth": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/densenet.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_172": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_182": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_20": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_56": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(penultimate, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/proper_resnet.py": {
        "torch": {
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_108": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_55": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_57": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}