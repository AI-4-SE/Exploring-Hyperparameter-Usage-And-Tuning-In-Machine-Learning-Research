{
    "evaluation/calc_errors.py": {
        "sklearn": {
            "mean_absolute_error_63": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "original[:num_frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(predicted_file)",
                            "Call"
                        ],
                        [
                            "predicted[:length]",
                            "Subscript"
                        ],
                        [
                            "remove_velocity(predicted)",
                            "Call"
                        ],
                        [
                            "predicted",
                            "Method Argument"
                        ],
                        [
                            "predicted",
                            "Method Argument"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "sklearn": {
            "train_test_split_79": {
                "variable": {
                    "value": "(X_train, X_validation, Y_train, Y_validation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "N_validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(X) - N_train",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "motion_repr_learning/ae/DAE.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self._train_data_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_info.train_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self._train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self._train_data_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Train_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_input_producer_71": {
                "variable": {
                    "value": "train_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self._train_data]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "train_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.training_epochs + FLAGS.pretraining_epochs * FLAGS.num_hidden_layers",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shuffle_batch_72": {
                "variable": {
                    "value": "self._train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([self._train_data], num_epochs=train_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Train_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self._valid_data_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_info.eval_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "self._valid_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self._valid_data_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Valid_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_input_producer_83": {
                "variable": {
                    "value": "valid_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self._valid_data]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "FLAGS.training_epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_85": {
                "variable": {
                    "value": "self._valid_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([self._valid_data], num_epochs=FLAGS.training_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Valid_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_163": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.bias_add(tf.matmul(x, w), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "curr_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq_pl",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.chunk_length * FLAGS.frame_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_275": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(6.0 / (w_shape[0] + w_shape[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "self[name_w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'Variables/' + name_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform(w_shape, -1 * a, a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_291": {
                "variable": {
                    "value": "self[name_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'Variables/' + name_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros(b_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "middle_layer.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Respres.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_282": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(self[name_w])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "wgt_ + str(i) + _loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_286": {
                "name": {
                    "value": "name_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'matrix' + str(i + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "self[name_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_296": {
                "variable": {
                    "value": "self[name_w + _pretr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "Var/ + name_w + _pretr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform(w_shape, -1 * a, a)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_300": {
                "variable": {
                    "value": "self[name_b + _pretr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "Var/ + name_b + _pretr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros(b_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "b_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.__shape[i + 1],)",
                            "Tuple"
                        ],
                        [
                            "(self.__shape[i],)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "self[name_b_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'Var/' + name_b_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(b_shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_n_117": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_163": {
                "value": {
                    "value": "tf.matmul(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._b(i + 1)",
                            "Call"
                        ],
                        [
                            "self._b(i + 1)",
                            "Call"
                        ],
                        [
                            "self._b(i + 1, '_pretrained')",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "Joint_run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_210": {
                "name": {
                    "value": "Decoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_275": {
                "x": {
                    "value": "6.0 / (w_shape[0] + w_shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_283": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(self[name_w]), wd, name='wgt_' + str(i) + '_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "AE_Variables",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_116": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self._reconstruction_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._w(i + 1)",
                            "Call"
                        ],
                        [
                            "self._w(i + 1)",
                            "Call"
                        ],
                        [
                            "self._w(i + 1, '_pretrained')",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "curr_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(network_input, [self.batch_size, FLAGS.chunk_length * FLAGS.frame_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(curr_layer, dropout)",
                            "Call"
                        ],
                        [
                            "self._feedforward(curr_layer, w, b)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_220": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(layer, dropout)",
                            "Call"
                        ],
                        [
                            "self._feedforward(layer, w, b)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_282": {
                "t": {
                    "value": "self[name_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "shape": {
                    "value": "b_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.__shape[i + 1],)",
                            "Tuple"
                        ],
                        [
                            "(self.__shape[i],)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "get_collection_117": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_194": {
                "variable": {
                    "value": "middle_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(network_input, [self.batch_size, FLAGS.chunk_length * FLAGS.frame_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(curr_layer, dropout)",
                            "Call"
                        ],
                        [
                            "self._feedforward(curr_layer, w, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "'hidden' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_217": {
                "name": {
                    "value": "'hidden' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "shape": {
                    "value": "b_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.__shape[i + 1],)",
                            "Tuple"
                        ],
                        [
                            "(self.__shape[i],)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "name_scope_193": {
                "name": {
                    "value": "middle_layer",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "motion_repr_learning/ae/train.py": {
        "tensorflow": {
            "ConfigProto_85": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_65": {
                "seed": {
                    "value": "fl.FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fl.FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "trainable_variables_114": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_115": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(nn._loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1000000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "train_error",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "train_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "eval_error",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "eval_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_123": {
                "variable": {
                    "value": "train_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Train_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(), name='train_error')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_124": {
                "variable": {
                    "value": "eval_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Validation_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(), name='eval_error')",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_127": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fl.FLAGS.summary_dir",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_138": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_139": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tf_debug.TensorBoardDebugWrapperSession(sess, 'taras-All-Series:6064')",
                            "Call"
                        ],
                        [
                            "nn.session",
                            "Attribute"
                        ],
                        [
                            "nn.session",
                            "Attribute"
                        ],
                        [
                            "nn.session",
                            "Attribute"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "local_variables_initializer_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_145": {
                "variable": {
                    "value": "pretrain_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fl.FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "'layer_{0}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_115": {
                "ys": {
                    "value": "nn._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_449": {
                "name": {
                    "value": "pretraining_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "motion_repr_learning/ae/utils/flags.py": {
        "tensorflow": {}
    },
    "motion_repr_learning/ae/utils/utils.py": {
        "tensorflow": {
            "convert_to_tensor_93": {
                "variable": {
                    "value": "net_output_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(output, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_94": {
                "variable": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(target, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_97": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net_output_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tf.cast(output, tf.float32), name='input')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tf.cast(target, tf.float32), name='target')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "squared_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(error_scaled, name='square')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "averaging",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "reconstruction_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_101": {
                "variable": {
                    "value": "error_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(net_output_tf, target_tf)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_vals[np.newaxis, :] + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_105": {
                "x": {
                    "value": "error_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(error, max_vals[np.newaxis, :] + 1e-15)",
                            "Call"
                        ],
                        [
                            "error",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "square",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}