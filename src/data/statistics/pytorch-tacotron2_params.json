{
    "main.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJSpeechDataset(args.train_dir, args.train_csv, text_transformer=text_to_sequence, audio_transformer=spectrogram)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomBucketBatchSampler(dataset, batch_size=args.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextAudioCollate()",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "optimizier",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "prediction.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "torch": {
            "BCEWithLogitsLoss_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "randint_419": {
                "variable": {
                    "value": "text_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "(N, Ti)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_423": {
                "variable": {
                    "value": "feat_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(N, To, feature_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "package",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Embedding_101": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_110": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_126": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(text_padded)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.convs(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.linear1(x)), p=self.p, training=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(self.linear2(x)), p=self.p, training=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([Ti, Ti - 2, Ti - 4])",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_130": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.feature_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_hidden_size + encoder_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.stop_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_hidden_size + encoder_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "expand_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(go_frame, feat_padded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "feat_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(feat_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "feat_outputs.masked_fill(decoder_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feat_outputs + [feat_output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(feat_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(stop_tokens, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "stop_tokens.masked_fill(decoder_mask.squeeze(), 1000.0)",
                            "Call"
                        ],
                        [
                            "stop_tokens + [stop_token]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(stop_tokens, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(attention_weights, dim=1)",
                            "Call"
                        ],
                        [
                            "attention_weights + [attention_weight]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(attention_weights, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "feat_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(feat_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "feat_outputs.masked_fill(decoder_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feat_outputs + [feat_output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(feat_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(stop_tokens, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "stop_tokens.masked_fill(decoder_mask.squeeze(), 1000.0)",
                            "Call"
                        ],
                        [
                            "stop_tokens + [stop_token]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(stop_tokens, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "variable": {
                    "value": "stop_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(attention_weights, dim=1)",
                            "Call"
                        ],
                        [
                            "attention_weights + [attention_weight]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(attention_weights, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(step_input, self.attention_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "linear_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, self.attention_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "prenet_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prenet_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "prenet_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_292": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "location_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_303": {
                "variable": {
                    "value": "self.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "location_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(31 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_355": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(torch.tanh(Ws + self.Vh + Uf)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "energies.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self._cal_energy(query, values, cumulative_attention_weights, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_357": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_391": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(postnet_kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_392": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_394": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_416": {
                "seed": {
                    "value": "223",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_396": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_149": {
                "input_size": {
                    "value": "prenet_dim + encoder_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "decoder_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_150": {
                "input_size": {
                    "value": "decoder_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "decoder_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_291": {
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_292": {
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_399": {
                "variable": {
                    "value": "tanh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_400": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_220": {
                "input": {
                    "value": "stop_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stop_linear(linear_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_333": {
                "input": {
                    "value": "Ws + self.Vh + Uf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/optimizer.py": {
        "torch": {}
    },
    "utils/data.py": {
        "torch": {
            "max_172": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJSpeechDataset(wav_path, csv_file)",
                            "Call"
                        ],
                        [
                            "LJSpeechDataset(wav_path, csv_file, text_transformer=text_to_sequence, audio_transformer=spectrogram)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomBucketBatchSampler(dataset, batch_size=5, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextAudioCollate()",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_89": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_131": {
                "variable": {
                    "value": "(input_lengths, ids_sorted_decreasing)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.LongTensor([len(x[0]) for x in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_101": {
                "variable": {
                    "value": "random_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(batches)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_99": {
                "n": {
                    "value": "len(batches) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/solver.py": {
        "torch": {
            "Tensor_28": {
                "variable": {
                    "value": "self.tr_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "self.cv_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "self.vis_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.epochs + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "package",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.continue_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.tr_loss[0:epoch + 1], self.cv_loss[0:epoch + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__143": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.serialize(model, self.optimizer, epoch + 1, tr_loss=self.tr_loss, cv_loss=self.cv_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_folder, 'epoch%d.pth.tar' % (epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_folder, self.model_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.serialize(model, self.optimizer, epoch + 1, tr_loss=self.tr_loss, cv_loss=self.cv_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_folder, 'epoch%d.pth.tar' % (epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_folder, self.model_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}