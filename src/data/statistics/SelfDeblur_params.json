{
    "correlation_package/correlation_package/corr_cuda.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "rbot1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "rbot2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, nOutputPlane, nOutputRows, nOutputCols]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "rbot1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "rbot2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.input1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.input2",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "correlation_package/setup.py": {
        "torch": {}
    },
    "correlation_package/test/test.py": {
        "torch": {
            "mean_22": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(A_, B_)",
                            "Call"
                        ],
                        [
                            "Correlation(3, 3, 20, 1, 2, 1)(A_, B_)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(A_, B_)",
                            "Call"
                        ],
                        [
                            "Correlation(3, 3, 20, 1, 2, 1)(A_, B_)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_10": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reblur_package/reblur_package/flow_blurrer.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "out_blur_image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, target_img_H, target_img_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mesh_vertex_texture.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "out_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, target_img_H, target_img_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mesh_vertex_texture.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "grad_texture",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, mesh_vertex_H, mesh_vertex_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad_blur_image.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "grad_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, 2, mesh_vertex_H, mesh_vertex_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad_blur_image.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "reblur_package/reblur_package/flow_forward_warp_mask.py": {
        "torch": {
            "zeros_12": {
                "variable": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, 1, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_flow.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_14": {
                "variable": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([B, 1, H, W], dtype=torch.float32, device=input_flow.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output_mask, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "output_mask > 1e-05",
                            "Compare"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "reblur_package/reblur_package/utils.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reblur_package/setup.py": {
        "torch": {}
    },
    "reblur_package/test/test_flow_blurrer_backward.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Batch_size, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Batch_size, 3, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Batch_size, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Batch_size, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error2[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(blur_image[:, :, :, :] - 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(images[:, :, :, :] - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(images[:, :, :, :] - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(blur_image - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_79": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error2[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(blur_image[:, :, :, :] - 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(images[:, :, :, :] - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(images[:, :, :, :] - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ],
                        [
                            "(blur_image - 1.0) ** 2",
                            "BinOp"
                        ],
                        [
                            "error2 * mask.float()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "reblur_package/test/test_flow_blurrer_forward.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('data/0.png')",
                            "Call"
                        ],
                        [
                            "im1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im1).cuda().unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_15": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('data/10.png')",
                            "Call"
                        ],
                        [
                            "im2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im2).cuda().unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "[im1, im2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "*size": {
                    "value": "[2, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reblur_package/test/test_flow_forward_warp_mask.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/dataloader.py": {
        "torch": {
            "DataLoader_123": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_reader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset_reader(opts.dataset_root_dir, data_augmentor, opts.seq_len)",
                            "Call"
                        ],
                        [
                            "Dataset_reader(opts.dataset_root_dir, data_augmentor, opts.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "opts.shuffle_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_reader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset_reader(opts.dataset_root_dir, data_augmentor, opts.seq_len)",
                            "Call"
                        ],
                        [
                            "Dataset_reader(opts.dataset_root_dir, data_augmentor, opts.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "opts.shuffle_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/image_proc.py": {
        "torch": {
            "arange_21": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "flow_fxy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flow_fx, flow_fy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_44": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_fxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([flow_fx, flow_fy], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "fx_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, -1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "fy_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [-1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.conv_x.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.conv_y.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_57": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "fxy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "fxy_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [0, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.conv_xy.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "self_deblur_net/inference.py": {
        "torch": {
            "set_device_15": {
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/inference_demo.py": {
        "torch": {
            "from_numpy_60": {
                "ndarray": {
                    "value": "im_blur.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/losses.py": {
        "torch": {
            "abs_10": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/metrics.py": {
        "torch": {
            "Tensor_9": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(img1 - img2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/model_base.py": {
        "torch": {
            "save_12": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_20": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_43": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'optimizer_' + name)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'optimizer_' + name)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.opts.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/model_deblur_net.py": {
        "torch": {
            "Adam_24": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net_G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_28": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/model_self_deblur_net.py": {
        "torch": {
            "Upsample_31": {
                "variable": {
                    "value": "self.upsampleX4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.loss_tv_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "self.loss_tv_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.net_deblur.parameters()}, {'params': self.net_flow.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "flow_to_numpy_rgb(self.flow_curr_to_prev).transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/model_self_flow_net.py": {
        "torch": {
            "Upsample_25": {
                "variable": {
                    "value": "self.upsampleX4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_26": {
                "variable": {
                    "value": "self.downsampleX2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.loss_lr_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "self.loss_lr_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net_flow.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "flow_to_numpy_rgb(self.pred_flow_prev_to_curr_0[0]).transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "flow_to_numpy_rgb(self.pred_flow_prev_to_curr_0[1]).transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "flow_to_numpy_rgb(self.pred_flow_prev_to_curr_0[2]).transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/net_basics.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_36": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(n_in, n_out, False, None, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ker_sz - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if bn == False else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/net_deblur.py": {
        "torch": {
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/net_pwc.py": {
        "torch": {
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "int(in_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_138": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_139": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_153": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_155": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_0(corr6), corr6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/train_deblur_net.py": {
        "torch": {}
    },
    "self_deblur_net/train_self_deblur_net.py": {
        "torch": {
            "abs_78": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_curr - t_prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "self_deblur_net/train_self_flow_net.py": {
        "torch": {}
    },
    "self_deblur_net/transforms.py": {
        "torch": {
            "from_numpy_89": {
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image / 255.0",
                            "BinOp"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}