{
    "src/lpsrgan.py": {
        "tensorflow": {
            "get_collection_59": {
                "variable": {
                    "value": "self.g_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_104": {
                "variable": {
                    "value": "self.d_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_115": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "downscaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.l2_loss(fake_output - tf.ones_like(fake_output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.l2_loss(real_output - tf.ones_like(true_output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.l2_loss(fake_output + tf.zeros_like(fake_output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_150": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(fake_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_153": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(real_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "real_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_156": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(fake_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "add_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_130": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_phi[i] - imitation_phi[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "content_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inference_content_loss(x, imitation)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "l2_loss",
                            "Name"
                        ],
                        [
                            "content_loss + l2_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "deconv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deconv_layer(x, [3, 3, 64, 3], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 24, 24, 64], 1)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 256, 64], [self.batch_size, 24, 24, 256], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, mid)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 64, 64], [self.batch_size, 48, 48, 64], 1)",
                            "Call"
                        ],
                        [
                            "pixel_shuffle_layer(x, 2, 16)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "deconv_layer(x, [3, 3, 3, 16], [self.batch_size, 96, 96, 3], 1)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 3, 64], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 64], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 64, 128], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 128], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 128, 256], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 256], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 256, 512], 1)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv_layer(x, [3, 3, 512, 512], 2)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "batch_normalize(x, is_training)",
                            "Call"
                        ],
                        [
                            "flatten_layer(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1024)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "full_connection_layer(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "deconv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "deconv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "deconv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "deconv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "conv6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "conv7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "conv8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_124": {
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_140": {
                "t": {
                    "value": "fake_output - tf.ones_like(fake_output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_142": {
                "t": {
                    "value": "real_output - tf.ones_like(true_output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_144": {
                "t": {
                    "value": "fake_output + tf.zeros_like(fake_output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "'block{}a'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "'block{}b'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "input": {
                    "value": "real_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_140": {
                "input": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "true_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_144": {
                "input": {
                    "value": "fake_output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/test/test.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_17": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_18": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_21": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_19": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_22": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_27": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_31": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_33": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vgg_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[var_ for var_ in var if 'vgg19' in var_.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Variable_21": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_37": {
                "checkpoint_dir": {
                    "value": "backup/",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_38": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "lpsrgan",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/layer.py": {
        "tensorflow": {
            "get_variable_9": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "filter_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "filter_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "pop_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "pop_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_var",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_140": {
                "variable": {
                    "value": "xc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_5": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_39": {
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_47": {
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_55": {
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_76": {
                "x": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_81": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_82": {
                "variable": {
                    "value": "train_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_84": {
                "variable": {
                    "value": "train_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_119": {
                "pred": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "bn_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "bn_inference",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a, b, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 2, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_141": {
                "values": {
                    "value": "[PS(x_, r) for x_ in xc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_15": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=[in_dim, out_dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_91": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a * r, b * r, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_initializer_13": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_15": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_68": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_74": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_86": {
                "control_inputs": {
                    "value": "[train_mean, train_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_87": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_99": {
                "stddev": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_105": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_111": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_117": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "input": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "input": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vgg19/train.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_23": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_25": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_29": {
                "checkpoint_dir": {
                    "value": "backup/",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_30": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "vgg19",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vgg19/vgg19.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_109": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.one_hot(t, 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=tf.one_hot(t, 100), logits=out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "vgg19",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "conv1a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "conv1b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "conv2a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "conv2b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "conv3a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "conv3b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "conv3c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "conv3d",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "conv4a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "conv4b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "conv4c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "conv4d",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "conv5a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "conv5b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "conv5c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "conv5d",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_110": {
                "indices": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}