{
    "evaluate.py": {
        "sklearn": {
            "roc_auc_score_166": {
                "variable": {
                    "value": "auc_all_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dfs['target'] == mel_idx",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "dfs['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_171": {
                "variable": {
                    "value": "auc_all_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dfs2['target'] == mel_idx",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "dfs2['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_174": {
                "variable": {
                    "value": "auc_20_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dfs3['target'] == mel_idx",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "dfs3['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_178": {
                "variable": {
                    "value": "auc_20_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dfs3['target'] == mel_idx",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "dfs3['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_98": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(TARGETS == mel_idx).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "PROBS[:, mel_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_99": {
                "variable": {
                    "value": "auc_20",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(TARGETS[is_ext == 0] == mel_idx).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "PROBS[is_ext == 0, mel_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_90": {
                "variable": {
                    "value": "LOGITS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "LOGITS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(LOGITS).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "PROBS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "PROBS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(PROBS).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "TARGETS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "TARGETS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(TARGETS).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_205": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_206": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(df_valid, 'valid', meta_features, transform=transforms_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_154": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelClass(args.enet_type, n_meta_features=n_meta_features, n_meta_dim=[int(nd) for nd in args.n_meta_dim.split(',')], out_dim=args.out_dim)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_fold{fold}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_20_fold{fold}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_final_fold{fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_147": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_fold{fold}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_20_fold{fold}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_final_fold{fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "sklearn": {
            "roc_auc_score_157": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(TARGETS == mel_idx).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "PROBS[:, mel_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_158": {
                "variable": {
                    "value": "auc_20",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(TARGETS[is_ext == 0] == mel_idx).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "PROBS[is_ext == 0, mel_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_149": {
                "variable": {
                    "value": "LOGITS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "LOGITS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(LOGITS).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "PROBS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "PROBS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(PROBS).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "TARGETS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "TARGETS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(TARGETS).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(df_train, 'train', meta_features, transform=transforms_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(dataset_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(df_valid, 'valid', meta_features, transform=transforms_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_200": {
                "variable": {
                    "value": "scheduler_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr)",
                            "Call"
                        ]
                    ]
                },
                "T_0": {
                    "value": "args.n_epochs - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_269": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_270": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelClass(args.enet_type, n_meta_features=n_meta_features, n_meta_dim=[int(nd) for nd in args.n_meta_dim.split(',')], out_dim=args.out_dim, pretrained=True)",
                            "Call"
                        ],
                        [
                            "apex.parallel.convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_229": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_final_fold{fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], args.out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RandomSampler_174": {
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(df_train, 'train', meta_features, transform=transforms_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_222": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_fold{fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_226": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_best_20_fold{fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(row.filepath)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "res['image'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "self.csv.iloc[index][self.meta_features]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "self.csv.iloc[index].target",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sigmoid_8": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(0.5) for _ in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_ch + n_meta_dim[1]",
                            "BinOp"
                        ],
                        [
                            "self.enet.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.enet.last_linear.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_50": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(0.5) for _ in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_ch + n_meta_dim[1]",
                            "BinOp"
                        ],
                        [
                            "self.enet.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.enet.last_linear.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_91": {
                "variable": {
                    "value": "self.enet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_119": {
                "variable": {
                    "value": "self.enet.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(0.5) for _ in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_ch + n_meta_dim[1]",
                            "BinOp"
                        ],
                        [
                            "self.enet.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.enet.last_linear.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_136": {
                "variable": {
                    "value": "self.enet.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.meta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_meta_features, n_meta_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.meta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_meta_features, n_meta_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.meta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_meta_features, n_meta_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "n_meta_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "num_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "n_meta_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_82": {
                "num_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "num_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "n_meta_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "num_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "n_meta_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "num_features": {
                    "value": "n_meta_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {}
    }
}