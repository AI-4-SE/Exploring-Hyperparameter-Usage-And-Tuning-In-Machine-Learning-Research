{
    "agent.py": {
        "torch": {
            "max_64": {
                "variable": {
                    "value": "(mxs, ixs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "UCT",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_like_67": {
                "variable": {
                    "value": "random_ints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ixs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ixs + needs_random.type(torch.long) * random_ints",
                            "BinOp"
                        ]
                    ]
                },
                "low": {
                    "value": "UCT.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "obj * valids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "available_action_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.N[states] * valids",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "debate.py": {
        "torch": {
            "zeros_like_32": {
                "variable": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "judge(final_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "judge.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST('./data/', train=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_data.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SparseMNIST(args.pixels, args.batches * args.batch_size, args.data_folder, train=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SparseMNIST(args.pixels, args.test_batches * args.eval_batch_size, args.data_folder, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0).type(torch.float32) / 255",
                            "BinOp"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_51": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([1] * indices.size(0), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.pixels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SparseMNIST(args.pixels, args.val_batches * args.eval_batch_size, args.data_folder, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "(mask.type(torch.float32), sparse)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[1] * indices.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "len(nonzero)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_judge.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file + '-best.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_144": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_103": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ],
                        [
                            "model(sparse)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utilities.py": {
        "torch": {
            "save_83": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '-' + filename",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._get(self._to_tuple(key)).unsqueeze(0) for key in keys]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "len(key)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}