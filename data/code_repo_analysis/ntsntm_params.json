{
    "nTSNTM.py": {
        "tensorflow": {
            "GPUOptions_425": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_426": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_427": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.remaining_stick",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(shape=[self.batch_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_94": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_95": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, self.n_topic)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_topic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_96": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.n_topic, self.n_topic]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "band_part_98": {
                "variable": {
                    "value": "self.mat2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[self.batch_size, self.n_topic, self.n_topic], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_151": {
                "variable": {
                    "value": "fullvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_154": {
                "variable": {
                    "value": "enc_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "enc_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.variable_parser(fullvars, 'encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_155": {
                "variable": {
                    "value": "dec_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "dec_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.variable_parser(fullvars, 'decoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "run_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_57": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "utils.small_linear(self.enc_vec, self.n_topic, scope='a')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_58": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "utils.small_linear(self.enc_vec, self.n_topic, scope='b')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "digamma_80": {
                "variable": {
                    "value": "psi_b_taylor_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "variable": {
                    "value": "self.kld_ku",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1 + self.a * self.b) * self.Beta_fn(1.0 / self.a, self.b)",
                            "BinOp"
                        ],
                        [
                            "kl + -(self.b - 1) / self.b",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "utils.mlp(doc_vec, [self.n_hidden, 3], self.non_linearity, scope='weight')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "v_mid1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.v_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.n_topic, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_112": {
                "variable": {
                    "value": "self.remaining_stick",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.stick_segment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.v_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.vocab_size, self.n_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.n_topic, self.n_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "beta_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.n_topic, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.vocab_size, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "beta_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(topic_vec, word_vec, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "self.depend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(tf.glorot_uniform_initializer()((self.n_topic, self.n_topic2))) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "self.theta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.depend",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "topic_vec2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.n_topic2, self.n_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "beta_mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(topic_vec2, word_vec, transpose_b=True) / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.theta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "self.depend2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(tf.glorot_uniform_initializer()((self.n_topic2, self.n_topic3)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "self.theta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.theta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.depend2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "topic_vec3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.n_topic3, self.n_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "self.beta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "beta_mat3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(topic_vec3, word_vec, transpose_b=True) / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "self.logits3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.theta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.beta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_145": {
                "variable": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(self.final_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_159": {
                "x": {
                    "value": "tf.lgamma(a) + tf.lgamma(b) - tf.lgamma(a + b)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_93": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "band_part_99": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[self.batch_size, self.n_topic, self.n_topic], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "self.n_topic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "tf.multiply(self.final_logits, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_426": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "1 - tf.square(self.mean) + 2 * self.logsigm - tf.exp(2 * self.logsigm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_85": {
                "x": {
                    "value": "self.Beta_fn(prior_alpha, prior_beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_103": {
                "x": {
                    "value": "tf.exp(self.logsigm)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal((batch_size, self.n_hidden), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_109": {
                "input": {
                    "value": "v_mid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.v_samples, [self.batch_size, self.n_topic, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, self.n_topic)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_110": {
                "x": {
                    "value": "self.mat2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.v_mid2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_111": {
                "input_tensor": {
                    "value": "self.v_mid3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "topic_vec2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.n_topic2, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.vocab_size, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "tf.multiply(self.logits2, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_131": {
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.n_topic2, self.n_topic3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "topic_vec3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.n_topic3, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.glorot_uniform_initializer()((self.vocab_size, self.n_hidden)))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "tf.multiply(self.logits3, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_144": {
                "x": {
                    "value": "tf.transpose(self.eta[:, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(self.logits3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "a": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_147": {
                "x": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_159": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_103": {
                "x": {
                    "value": "self.logsigm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "initial_value": {
                    "value": "tf.glorot_uniform_initializer()((self.n_topic, self.n_topic2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_128": {
                "x": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_139": {
                "x": {
                    "value": "self.logits3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_142": {
                "x": {
                    "value": "tf.transpose(self.eta[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(self.logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "x": {
                    "value": "tf.transpose(self.eta[:, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(self.logits2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "a": {
                    "value": "self.logits3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_65": {
                "x": {
                    "value": "2 * self.logsigm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "a": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "get_variable_90": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=tf.random_normal_initializer(mean=0, stddev=0.01, seed=0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "matrix * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0, stddev=0.01, seed=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0, stddev=0.01, seed=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=tf.random_normal_initializer(mean=0, stddev=0.01, seed=0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "matrix * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=tf.random_normal_initializer(mean=0, stddev=0.01, seed=0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "matrix * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "variable": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_86": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "constant_initializer_137": {
                "variable": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_109": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_111": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}