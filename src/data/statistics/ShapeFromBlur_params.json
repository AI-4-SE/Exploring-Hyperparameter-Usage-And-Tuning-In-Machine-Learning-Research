{
    "models/encoder.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, config['input_frames'], 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.quaternion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, config['input_frames'], 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "ivertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ivertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(ivertices).unsqueeze(0).type(self.translation.dtype)",
                            "Call"
                        ],
                        [
                            "mesh_normalize(ivertices)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "ivertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_5": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - mesh_middle",
                            "BinOp"
                        ],
                        [
                            "vertices / mesh_biggest.view(bs, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.ivertices + self.vertices",
                            "BinOp"
                        ],
                        [
                            "self.ivertices",
                            "Attribute"
                        ],
                        [
                            "mesh_normalize(vertices)",
                            "Call"
                        ],
                        [
                            "vertices - vertices.mean(1)[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_6": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - mesh_middle",
                            "BinOp"
                        ],
                        [
                            "vertices / mesh_biggest.view(bs, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.ivertices + self.vertices",
                            "BinOp"
                        ],
                        [
                            "self.ivertices",
                            "Attribute"
                        ],
                        [
                            "mesh_normalize(vertices)",
                            "Call"
                        ],
                        [
                            "vertices - vertices.mean(1)[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_10": {
                "input": {
                    "value": "vertices.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, ivertices.shape[0], 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.texture_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 3, self.config['texture_size'], self.config['texture_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.face_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, faces.shape[0], 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "variable": {
                    "value": "self.face_features_oper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config['input_frames']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config['input_frames']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_58": {
                "tensors": {
                    "value": "translation_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "quaternion_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ivertices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "face_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config['texture_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config['texture_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/kaolin_wrapper.py": {
        "torch": {}
    },
    "models/loss.py": {
        "torch": {
            "zeros_54": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(YM.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.laplacian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.laplacian, x)",
                            "Call"
                        ],
                        [
                            "x.pow(2).mean(dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_16": {
                "variable": {
                    "value": "modelled_renders",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(renders[:, :, :, :3] * renders[:, :, :, 3:], renders[:, :, :, 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_16": {
                "variable": {
                    "value": "modelled_renders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "hs_frames_renderer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_batch[:, :, None, 3:] * (1 - renders[:, :, :, 3:]) + renders[:, :, :, :3], renders[:, :, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "hs_frames_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hs_frames[:, :, :, :3], hs_frames[:, :, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_75": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_77": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "laplacian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.nv, self.nv]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_70": {
                "input": {
                    "value": "A_union_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "YM + YpM - A_inter_B",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/rendering.py": {
        "torch": {
            "ones_30": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config['erode_renderer_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['erode_renderer_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "all_renders",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_renders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_renders, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "renders",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "renders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(renders, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_42": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.config['fmo_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis_to_rotation_matrix(quaternion_to_angle_axis(quaternion[:, frmi, 1]))",
                            "Call"
                        ],
                        [
                            "quaternion[:, frmi, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(rotation_matrix, rotation_matrix_step)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis_to_rotation_matrix(quaternion_to_angle_axis(quaternion[:, frmi, 0]) / self.config['fmo_steps'] / 2)",
                            "Call"
                        ],
                        [
                            "quaternion[:, frmi, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "result_rgba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gauss(result), gauss(gauss(ren_mask[:, None].float())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "result_rgba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result, ren_mask[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimize.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shapefromblur.py": {
        "torch": {
            "cat_155": {
                "variable": {
                    "value": "modelled_renders",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(renders[:, :, :, :3] * renders[:, :, :, 3:4], renders[:, :, :, 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "modelled_renders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_158": {
                "variable": {
                    "value": "renders_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "renders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.defmo(input_batch.to(self.device))",
                            "Call"
                        ],
                        [
                            "rendering(translation, quaternion, vertices, face_features, texture_maps)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_30": {
                "variable": {
                    "value": "self.defmo.rendering.times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "nsplits * self.config['factor']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transforms.ToTensor()(im_crop), transforms.ToTensor()(bgr_crop))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transforms.ToTensor()(im_crop), transforms.ToTensor()(self.bgr_crop))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "hs_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, nsplits * self.config['factor'], 4, input_batch.shape[-2], input_batch.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_168": {
                "input": {
                    "value": "expected_hs_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch[:, :, None, 3:] * (1 - renders[:, :, :, 3:4]) + renders[:, :, :, :3] * renders[:, :, :, 3:4]",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}