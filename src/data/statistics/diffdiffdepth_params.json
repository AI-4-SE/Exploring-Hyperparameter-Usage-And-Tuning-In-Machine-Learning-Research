{
    "LAHBPCG.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channels, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConstantPad2d_45": {
                "variable": {
                    "value": "self.pady",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad2d_46": {
                "variable": {
                    "value": "self.padx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_509": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr[0] * dr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "idx0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.index_map[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_191": {
                "variable": {
                    "value": "ns_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "s_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_192": {
                "variable": {
                    "value": "we_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "e_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_193": {
                "variable": {
                    "value": "nw_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "w_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_194": {
                "variable": {
                    "value": "ws_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "s_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_195": {
                "variable": {
                    "value": "se_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "s_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_196": {
                "variable": {
                    "value": "en_inrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "n_ind < self.max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "AN_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channels, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "AW_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channels, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_307": {
                "variable": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ns_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.we_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_522": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr[i + 1] * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_or_66": {
                "input": {
                    "value": "x < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "x >= self.width",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_67": {
                "input": {
                    "value": "y < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "y >= self.width",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_298": {
                "input": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nw_weight + ws_weight + se_weight + en_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_316": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_317": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_328": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_329": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_333": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_334": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_338": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_339": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_343": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_344": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_348": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_349": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_353": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_354": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_358": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_359": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_363": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_364": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_368": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_369": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_515": {
                "input": {
                    "value": "dr * wr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_309": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_310": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_311": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_312": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_313": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_314": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_318": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_319": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_321": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_322": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_323": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_324": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_325": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_326": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_330": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_331": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_335": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_336": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_340": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_341": {
                "input": {
                    "value": "self.nw_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_345": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_346": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_350": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_351": {
                "input": {
                    "value": "self.ws_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_355": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_356": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_360": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_361": {
                "input": {
                    "value": "self.se_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_365": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_366": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_370": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_371": {
                "input": {
                    "value": "self.en_inrange[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ns_or_we",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(self.ns_inrange[k], self.we_inrange[k])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "L1Loss_17": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_46": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.mean(torch.abs(image_gradients_x), 1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "weights_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.mean(torch.abs(image_gradients_y), 1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Upsample_86": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scaleFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "scaleFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_100": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_106": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_112": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world2views(xw, yw, zw, imposes, cam.flatten())",
                            "Call"
                        ],
                        [
                            "ox / float(w - 1) * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "od * imdxy[:, :, 0].unsqueeze(-1).unsqueeze(-1) + x",
                            "BinOp"
                        ],
                        [
                            "ox / float(w - 1) * 2 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_113": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world2views(xw, yw, zw, imposes, cam.flatten())",
                            "Call"
                        ],
                        [
                            "oy / float(h - 1) * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "od * imdxy[:, :, 1].unsqueeze(-1).unsqueeze(-1) + y",
                            "BinOp"
                        ],
                        [
                            "oy / float(h - 1) * 2 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_or_114": {
                "input": {
                    "value": "oy < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "oy > h - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nproj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "rpj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(im.shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(im.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ],
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(loss_reproj, 0) / (u + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_230": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scaleFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "scaleFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_251": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_257": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world2views(xw, yw, zw, imposes, cam.flatten())",
                            "Call"
                        ],
                        [
                            "ox / float(w - 1) * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "od * imdxy[:, :, 0].unsqueeze(-1).unsqueeze(-1) + x",
                            "BinOp"
                        ],
                        [
                            "ox / float(w - 1) * 2 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_258": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world2views(xw, yw, zw, imposes, cam.flatten())",
                            "Call"
                        ],
                        [
                            "oy / float(h - 1) * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "od * imdxy[:, :, 1].unsqueeze(-1).unsqueeze(-1) + y",
                            "BinOp"
                        ],
                        [
                            "oy / float(h - 1) * 2 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_or_259": {
                "input": {
                    "value": "oy < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "oy > h - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nproj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_297": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "rpj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_317": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ],
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_327": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(loss_reproj, 0) / (u + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_361": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scaleFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "scaleFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_376": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_378": {
                "variable": {
                    "value": "gx_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, -1, 0], [0, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_379": {
                "variable": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_380": {
                "variable": {
                    "value": "gxy_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(gx_o) + torch.square(gy_o) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_387": {
                "variable": {
                    "value": "gx_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, -1, 0], [0, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_388": {
                "variable": {
                    "value": "gy_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_389": {
                "variable": {
                    "value": "gxy_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(gx_i) + torch.square(gy_i) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv2d(img[:, i, :, :].unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)), padding=1) for i in range(img.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv2d(img[:, i, :, :].unsqueeze(0), torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]]).view((1, 1, 3, 3)), padding=1) for i in range(img.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ox[:, i, :, :], oy[:, i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_155": {
                "variable": {
                    "value": "rpj[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((ox[:, i, :, :], oy[:, i, :, :]), -1)",
                            "Call"
                        ],
                        [
                            "torch.stack((ox[:, i, :, :], oy[:, i, :, :]), -1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_171": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_173": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpj[0, :, :, :, :] - imcp[0, :, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_183": {
                "variable": {
                    "value": "gx_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_184": {
                "variable": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ox[:, i, :, :], oy[:, i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_304": {
                "variable": {
                    "value": "rpj[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((ox[:, i, :, :], oy[:, i, :, :]), -1)",
                            "Call"
                        ],
                        [
                            "torch.stack((ox[:, i, :, :], oy[:, i, :, :]), -1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_313": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_315": {
                "variable": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpj[0, :, :, :, :] - imcp[0, :, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_321": {
                "variable": {
                    "value": "gx_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_322": {
                "variable": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_reproj.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "pred_gradients_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_x(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_50": {
                "input": {
                    "value": "pred_gradients_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_y(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_52": {
                "input": {
                    "value": "smoothness_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(pred_gradients_y) * weights_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_106": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nproj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_251": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_270": {
                "*size": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nproj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_370": {
                "*size": {
                    "value": "(c, h * scaleFactor, w * scaleFactor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_391": {
                "input": {
                    "value": "torch.sum(torch.square(torch.exp(-gxy_i) * gxy_o))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "torch.abs(image_gradients_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "torch.abs(image_gradients_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_132": {
                "input": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(c, nproj, h * w) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.ones(c, nproj, h * w) * -1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.reshape((yi * w + xi).long(), (c, nproj, h * w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_135": {
                "input": {
                    "value": "torch.logical_not(cIdx)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "occIdx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(comp, -1, torch.reshape((yi * w + xi).long(), (c, nproj, h * w))) < i",
                            "Compare"
                        ],
                        [
                            "occIdx.reshape(c, nproj, h, w)",
                            "Call"
                        ],
                        [
                            "torch.gather(comp, -1, torch.reshape((yi * w + xi).long(), (c, nproj, h * w))) > i",
                            "Compare"
                        ],
                        [
                            "occIdx.reshape(c, nproj, h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "input": {
                    "value": "(yi * w + xi).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c, nproj, h * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "torch.sqrt(torch.pow(gx_o, 2) + torch.pow(gy_o, 2) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ],
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_281": {
                "input": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(c, nproj, h * w) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.ones(c, nproj, h * w) * -1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.reshape((yi * w + xi).long(), (c, nproj, h * w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_284": {
                "input": {
                    "value": "torch.logical_not(cIdx)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "occIdx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(comp, -1, torch.reshape((yi * w + xi).long(), (c, nproj, h * w))) < i",
                            "Compare"
                        ],
                        [
                            "occIdx.reshape(c, nproj, h, w)",
                            "Call"
                        ],
                        [
                            "torch.gather(comp, -1, torch.reshape((yi * w + xi).long(), (c, nproj, h * w))) > i",
                            "Compare"
                        ],
                        [
                            "occIdx.reshape(c, nproj, h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_288": {
                "input": {
                    "value": "(yi * w + xi).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c, nproj, h * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_323": {
                "input": {
                    "value": "torch.sqrt(torch.pow(gx_o, 2) + torch.pow(gy_o, 2) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "loss_reproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ],
                        [
                            "torch.abs(vgg16_4(rpj[0, :, :, :, :]) - vgg16_4(imcp[0, :, :, :, :]))",
                            "Call"
                        ],
                        [
                            "torch.abs(rpj[0, :, :, :, :] - imcp[0, :, :, :, :])",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_reproj, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(loss_reproj, 0) / (u + 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_383": {
                "input": {
                    "value": "imc[0, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.2",
                            "float"
                        ]
                    ]
                }
            },
            "pow_384": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2126 * torch.pow(imc[0, 0, :, :], gamma) + 0.7152 * torch.pow(imc[0, 1, :, :], gamma) + 0.0722 * torch.pow(imc[0, 2, :, :], gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_391": {
                "input": {
                    "value": "torch.square(torch.exp(-gxy_i) * gxy_o)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "input": {
                    "value": "img[:, i, :, :].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "input": {
                    "value": "img[:, i, :, :].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]]).view((1, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "image_gradients_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_x(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_47": {
                "input": {
                    "value": "image_gradients_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_y(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "input": {
                    "value": "(yi * w + xi).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c, nproj, h * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logical_not_135": {
                "input": {
                    "value": "cIdx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "od != i",
                            "Compare"
                        ],
                        [
                            "od != i",
                            "Compare"
                        ]
                    ]
                }
            },
            "sqrt_185": {
                "input": {
                    "value": "torch.pow(gx_o, 2) + torch.pow(gy_o, 2) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_281": {
                "input": {
                    "value": "(yi * w + xi).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c, nproj, h * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logical_not_284": {
                "input": {
                    "value": "cIdx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "od != i",
                            "Compare"
                        ],
                        [
                            "od != i",
                            "Compare"
                        ]
                    ]
                }
            },
            "sqrt_323": {
                "input": {
                    "value": "torch.pow(gx_o, 2) + torch.pow(gy_o, 2) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_380": {
                "input": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o.unsqueeze(0), torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3)), padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_389": {
                "input": {
                    "value": "gy_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(L.unsqueeze(0), torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3)), padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_391": {
                "input": {
                    "value": "torch.exp(-gxy_i) * gxy_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o.clone()",
                            "Call"
                        ],
                        [
                            "od.unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ],
                        [
                            "o.clone().unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "input": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o.clone()",
                            "Call"
                        ],
                        [
                            "od.unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ],
                        [
                            "o.clone().unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_268": {
                "input": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o.clone()",
                            "Call"
                        ],
                        [
                            "od.unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ],
                        [
                            "o.clone().unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_268": {
                "input": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o.clone()",
                            "Call"
                        ],
                        [
                            "od.unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ],
                        [
                            "o.clone().unsqueeze(1).expand(-1, nproj, -1, -1)",
                            "Call"
                        ],
                        [
                            "((od - torch.min(od)) / (torch.max(od) - torch.min(od)) * (nDepths - 1)).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_391": {
                "input": {
                    "value": "-gxy_i",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_185": {
                "input": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o.unsqueeze(0), torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3)), padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_323": {
                "input": {
                    "value": "gy_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(loss_reproj.unsqueeze(0), torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]]).view((1, 1, 3, 3)).expand(-1, nproj, -1, -1), padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o.unsqueeze(0), torch.Tensor([[1, 0, 0], [-1, 0, 0], [0, 0, 0]]).view((1, 1, 3, 3)), padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mvs_util.py": {
        "torch": {
            "tensor_260": {
                "variable": {
                    "value": "new_pts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_pts_x[o][:num_new_pts]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "new_pts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_pts_y[o][:num_new_pts]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "(new_pts_x.float().unsqueeze(1), new_pts_y.float().unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d, new_pts_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "(new_pts_x.float().unsqueeze(1), new_pts_y.float().unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d, new_pts_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_271": {
                "*size": {
                    "value": "(num_new_pts,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_272": {
                "*size": {
                    "value": "(num_new_pts,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "points2raster.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "wsz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "winSz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "winSz",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "sig_d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "sig_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.7054",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "sig_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "nSamples_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "mu_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "ci",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "6.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "tileSz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sz[0] // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p, d.unsqueeze(-1), dw.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, tileCt_yx, tileMaxPts, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "maxPts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_68": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((c, tileCt_yx, tileMaxPts, 4))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "o.expand(-1, -1, -1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_72": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(-wsz, wsz + 1).float(), torch.arange(-wsz, wsz + 1).float(), torch.linspace(int_a, int_b, nSamples_z)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ceil_79": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ox + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_80": {
                "variable": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oy + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "two",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "logical_or_84": {
                "input": {
                    "value": "px < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "px >= tileSz_p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, tileCt_yx, tileSz_p * tileSz_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, tileCt_yx, tileSz_p * tileSz_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, tileCt_yx, tileSz_p * tileSz_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(c, sz[0], sz[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_54": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tileCt_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tileCt_y * tileCt_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_58": {
                "input": {
                    "value": "pd[:, :, 0] < xt + tileSz_p",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "pd[:, :, 0] >= xt",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unique_60": {
                "variable": {
                    "value": "(_, ct)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx.nonzero()[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_65": {
                "input": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(idx.nonzero()[:, 0], return_counts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_108": {
                "variable": {
                    "value": "t_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_z * c_i.unsqueeze(-1).expand(-1, -1, -1, -1, nSamples_z) * torch.sqrt(PI / two) * gaussianIntegral_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y * tileSz_p + x).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c, tileCt_yx, (wsz * 2 + 1) * (wsz * 2 + 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_114": {
                "variable": {
                    "value": "m_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((c, tileCt_yx, tileSz_p * tileSz_p), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M.scatter(2, idx, e_i * m_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(torch.logical_and(pd[:, :, 0] < xt + tileSz_p, pd[:, :, 0] >= xt), torch.logical_and(pd[:, :, 1] < yt + tileSz_p, pd[:, :, 1] >= yt))",
                            "Call"
                        ],
                        [
                            "torch.reshape((y * tileSz_p + x).long(), (c, tileCt_yx, (wsz * 2 + 1) * (wsz * 2 + 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_24": {
                "input": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_92": {
                "input": {
                    "value": "(pz - mu_z) / (torch.sqrt(two) * sig_z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((c, tileCt_yx, tileSz_p * tileSz_p), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(R, (c, tileCt_y, tileCt_x, tileSz_p, tileSz_p))[:, :, :, wsz:-wsz, wsz:-wsz]",
                            "Subscript"
                        ],
                        [
                            "R.permute(0, 2, 3, 1, 4).contiguous().view(c, tileCt_y, tileSz, -1).view(c, sz[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(c, tileCt_y, tileCt_x, tileSz_p, tileSz_p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((c, tileCt_yx, tileSz_p * tileSz_p), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(K, (c, tileCt_y, tileCt_x, tileSz_p, tileSz_p))[:, :, :, wsz:-wsz, wsz:-wsz]",
                            "Subscript"
                        ],
                        [
                            "K.permute(0, 2, 3, 1, 4).contiguous().view(c, tileCt_y, tileSz, -1).view(c, sz[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(c, tileCt_y, tileCt_x, tileSz_p, tileSz_p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logical_and_59": {
                "input": {
                    "value": "pd[:, :, 1] < yt + tileSz_p",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "pd[:, :, 1] >= yt",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_66": {
                "tensors": {
                    "value": "[F.pad(t, (0, 0, 0, torch.abs(tileMaxPts - t.shape[0])), value=-10000000000.0) for t in torch.split(pd[idx.nonzero(as_tuple=True)], ct.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[xt, yt, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_72": {
                "start": {
                    "value": "-wsz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "wsz + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_73": {
                "start": {
                    "value": "-wsz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "wsz + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_74": {
                "start": {
                    "value": "int_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_z - 3 * sig_z",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "int_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_z + 3 * sig_z",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "nSamples_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(8)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "input": {
                    "value": "-((x - ox[:, :, i, :, :]).square() + (y - oy[:, :, i, :, :]).square()) / (2 * sig_d.square())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-(((x - ox[:, :, i, :, :]).square() / (2 * sig_d.square()) + (y - oy[:, :, i, :, :]).square() / (2 * sig_d.square())).unsqueeze(-1).expand(-1, -1, -1, -1, nSamples_z) + (z - mu_z).square() / (2 * sig_z.square()))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_66": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, torch.abs(tileMaxPts - t.shape[0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "-10000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "input": {
                    "value": "two",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_101": {
                "input": {
                    "value": "-torch.pow(((x - ox[:, :, i, :, :]).square() + (y - oy[:, :, i, :, :]).square()) / (2 * sig_w.square()), phi)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_108": {
                "input": {
                    "value": "PI / two",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "g_i * t_i * dz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_66": {
                "tensor": {
                    "value": "pd[idx.nonzero(as_tuple=True)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "ct.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_66": {
                "input": {
                    "value": "tileMaxPts - t.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_101": {
                "input": {
                    "value": "((x - ox[:, :, i, :, :]).square() + (y - oy[:, :, i, :, :]).square()) / (2 * sig_w.square())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_ssim/__init__.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "run_mvs.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "poses[np.r_[:cposeidx, cposeidx + 1:poses.shape[0]], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "I_invpose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "invposes[cposeidx, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvs_util.load_cameras(os.path.join(base_dir, 'sparse/0/cameras.txt'))",
                            "Call"
                        ],
                        [
                            "torch.tensor(cam, dtype=torch.float32, device=config.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts2D[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts2D[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "6 * filters.sobel(rgb2gray(I[cposeidx, :, :, :]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "S[:, [0, -1], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(6 * filters.sobel(rgb2gray(I[cposeidx, :, :, :])), dtype=torch.float32, device=config.device).unsqueeze(0).repeat(batch_sz, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_49": {
                "variable": {
                    "value": "S[:, :, [0, -1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(6 * filters.sobel(rgb2gray(I[cposeidx, :, :, :])), dtype=torch.float32, device=config.device).unsqueeze(0).repeat(batch_sz, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "I[cposeidx, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_51": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "I[np.r_[:cposeidx, cposeidx + 1:I.shape[0]], :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_53": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-S",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-S",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer_s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[S]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate_smoothness * 0.9 ** npass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[D]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate_disp * 0.9 ** npass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizer_w",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[W]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate_dw * 0.8 ** npass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizer_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[P]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate_xy * 0.75 ** npass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_171": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "I.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_74": {
                "input": {
                    "value": "-W",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "config.tile_max_pts",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vggfeatures.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg16.features.children())[:4]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}