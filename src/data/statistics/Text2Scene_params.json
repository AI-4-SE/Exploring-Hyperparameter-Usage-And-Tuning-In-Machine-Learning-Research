{
    "lib/abstract_utils.py": {
        "torch": {
            "zeros_254": {
                "variable": {
                    "value": "onehots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "imgs_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_np",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(imgs_np, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(imgs_np, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_152": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/composites_utils.py": {
        "torch": {
            "zeros_802": {
                "variable": {
                    "value": "onehots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_850": {
                "variable": {
                    "value": "imgs_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_np",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(imgs_np, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(imgs_np, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_878": {
                "variable": {
                    "value": "vols_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vols_np",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[vol_normalize(input_vols[i]) for i in range(len(input_vols))]",
                            "ListComp"
                        ],
                        [
                            "np.stack(vols_np, 0)",
                            "Call"
                        ],
                        [
                            "[vol_unnormalize(input_vols_th[i].cpu().data.numpy()) for i in range(len(input_vols_th))]",
                            "ListComp"
                        ],
                        [
                            "np.stack(vols_np, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_216": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_895": {
                "tensors": {
                    "value": "(onehots, color_maps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_917": {
                "tensors": {
                    "value": "(onehots, color_maps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/abstract_scene.py": {
        "torch": {}
    },
    "lib/datasets/composites_loader.py": {
        "torch": {}
    },
    "lib/datasets/layout_coco.py": {
        "torch": {}
    },
    "lib/layout_utils.py": {
        "torch": {
            "zeros_343": {
                "variable": {
                    "value": "onehots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "variable": {
                    "value": "vol_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vol_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_vol.transpose((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_241": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/abstract_decoder.py": {
        "torch": {
            "Sequential_100": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_321": {
                "variable": {
                    "value": "stacked_hids_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hids_1d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_states['hids']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_566": {
                "variable": {
                    "value": "coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 0, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(coord_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_567": {
                "variable": {
                    "value": "pose_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 1:8, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(pose_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_568": {
                "variable": {
                    "value": "expr_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 8:13, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(expr_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_569": {
                "variable": {
                    "value": "scal_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scal_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 13:16, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(scal_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_570": {
                "variable": {
                    "value": "flip_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 16:, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(flip_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_572": {
                "variable": {
                    "value": "attri_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose_logits, expr_logits, scal_logits, flip_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool1d_82": {
                "variable": {
                    "value": "self.seg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool1d_84": {
                "variable": {
                    "value": "self.seg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "prev_alpha_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_feats * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "curr_alpha_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_outs * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "prev_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_bgfs",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_feats, prev_fgfs], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_139": {
                "input": {
                    "value": "curr_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "prev_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_feats, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "att_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_src, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, att_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, att_imgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_538": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined, prev_bgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(tgt_dim, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(tgt_dim, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "prev_fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_247": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, encoder_states['embs']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "attn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_outs, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_491": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_197": {
                "variable": {
                    "value": "prev_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_fgfs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_states.get('fgfs', None)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bsize, tlen, fgf_dim).float()",
                            "Call"
                        ],
                        [
                            "prev_fgfs.cuda()",
                            "Call"
                        ],
                        [
                            "prev_fgfs.view(bsize, tlen, fgf_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "prev_fgfs.expand(bsize, tlen, fgf_dim, gh, gw)",
                            "Call"
                        ],
                        [
                            "prev_fgfs * prev_maps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_363": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim_2d, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim_2d, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_394": {
                "num_features": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_395": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_397": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_400": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_401": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_411": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_414": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, encoder_states['embs']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[curr_fgfs, what_ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_189": {
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "in_channels": {
                    "value": "in_dim_2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dim + tgt_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_365": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_366": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "in_dim_2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dim + tgt_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_373": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/abstract_encoder.py": {
        "torch": {
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.cfg.input_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "pad_rft",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "pad_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "out_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_rfts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_rfts, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "out_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_embs, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "out_hids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_hids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_hids, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "out_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(out_msks, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_217": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.cfg.grid_size[1], self.cfg.grid_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.cfg.emb_dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "inst_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inst_rfts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(inst_rfts, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inst_rfts, pad_rft.expand(1, n_pad, hsize)], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "inst_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inst_embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(inst_embs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inst_embs, pad_emb.expand(1, n_pad, self.cfg.n_embed)], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "inst_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inst_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] * tlen",
                            "BinOp"
                        ],
                        [
                            "inst_msks + [0.0] * n_pad",
                            "BinOp"
                        ],
                        [
                            "np.array(inst_msks)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inst_msks).float()",
                            "Call"
                        ],
                        [
                            "inst_msks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "out_cels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_cels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_cels, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "inst_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_rfts, pad_rft.expand(1, n_pad, hsize)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "inst_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_embs, pad_emb.expand(1, n_pad, self.cfg.n_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_hids[0][0], inst_hids[1][0], inst_hids[2][0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_hids[0][1], inst_hids[1][1], inst_hids[2][1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_hids[0], inst_hids[1], inst_hids[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/abstract_evaluator.py": {
        "torch": {}
    },
    "lib/modules/abstract_model.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "inf_outs[obj_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "inf_outs[coord_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coord_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "inf_outs[attri_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attri_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lt_158": {
                "variable": {
                    "value": "sample_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(expl_inds.size(0)).uniform_(0, 1)",
                            "Call"
                        ],
                        [
                            "sample_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "explore_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cfg.output_cls_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_inds, where_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "next_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_maps_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "env.batch_location_maps(sample_inds_np[:, 3])",
                            "Call"
                        ],
                        [
                            "env.batch_location_maps(sample_inds_np[:, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_199": {
                "variable": {
                    "value": "next_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_269": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['attri_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_269": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_pose_inds, sample_expr_inds, sample_coord_inds, sample_scal_inds, sample_flip_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_348": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['attri_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_348": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_356": {
                "variable": {
                    "value": "sample_obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "what_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "what_outs['obj_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_357": {
                "variable": {
                    "value": "sample_coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['coord_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_358": {
                "variable": {
                    "value": "sample_pose_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "pose_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_359": {
                "variable": {
                    "value": "sample_expr_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "expr_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_360": {
                "variable": {
                    "value": "sample_scal_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scal_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "scal_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 4].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_362": {
                "variable": {
                    "value": "sample_flip_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "flip_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 5].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_364": {
                "variable": {
                    "value": "sample_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_obj_logits, sample_pose_logits, sample_expr_logits, sample_coord_logits, sample_scal_logits, sample_flip_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_397": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['attri_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['attri_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_397": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_404": {
                "variable": {
                    "value": "(_, pred_obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "what_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['obj_logits']",
                            "Subscript"
                        ],
                        [
                            "what_outs['obj_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_405": {
                "variable": {
                    "value": "(_, pred_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['coord_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_406": {
                "variable": {
                    "value": "(_, pred_pose_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_407": {
                "variable": {
                    "value": "(_, pred_expr_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "expr_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_408": {
                "variable": {
                    "value": "(_, pred_scal_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scal_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_409": {
                "variable": {
                    "value": "(_, pred_flip_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_412": {
                "variable": {
                    "value": "obj_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_obj_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_413": {
                "variable": {
                    "value": "coord_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_414": {
                "variable": {
                    "value": "pose_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_pose_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pose_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_415": {
                "variable": {
                    "value": "expr_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_expr_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expr_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_416": {
                "variable": {
                    "value": "scal_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scal_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "scal_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 4].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_417": {
                "variable": {
                    "value": "flip_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_flip_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "flip_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 5].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_419": {
                "variable": {
                    "value": "sample_accus",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_accu, pose_accu, expr_accu, coord_accu, scal_accu, flip_accu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "accum_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_448": {
                "variable": {
                    "value": "accum_seq_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_542": {
                "variable": {
                    "value": "what_outs[rnn_outs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "what_outs['rnn_outs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_543": {
                "variable": {
                    "value": "what_outs[hids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "what_outs['hids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_544": {
                "variable": {
                    "value": "what_outs[bgfs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "what_outs['bgfs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_549": {
                "variable": {
                    "value": "encoder_states[rfts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states['rfts']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_550": {
                "variable": {
                    "value": "encoder_states[embs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states['embs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_551": {
                "variable": {
                    "value": "encoder_states[msks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states['msks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cfg.output_cls_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_inds, where_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_579": {
                "variable": {
                    "value": "next_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_maps_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "env.batch_location_maps(sample_inds_np[:, 3])",
                            "Call"
                        ],
                        [
                            "env.batch_location_maps(sample_inds_np[:, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_579": {
                "variable": {
                    "value": "next_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_600": {
                "variable": {
                    "value": "(_, top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_601": {
                "variable": {
                    "value": "curr_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ],
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "top_inds.view(bsize, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_602": {
                "variable": {
                    "value": "curr_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ],
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_621": {
                "variable": {
                    "value": "(_, lin_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(logprobs)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_624": {
                "variable": {
                    "value": "output_accum_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ],
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_625": {
                "variable": {
                    "value": "output_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "top_inds.view(-1)",
                            "Call"
                        ],
                        [
                            "top_inds.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_631": {
                "variable": {
                    "value": "output_accum_seq_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accum_seq_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(K)",
                            "Call"
                        ],
                        [
                            "accum_seq_msks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(lin_inds / N).long()",
                            "Call"
                        ],
                        [
                            "(lin_inds / N).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_646": {
                "variable": {
                    "value": "(_, top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_647": {
                "variable": {
                    "value": "curr_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ],
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "top_inds.view(bsize, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_648": {
                "variable": {
                    "value": "curr_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ],
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_673": {
                "variable": {
                    "value": "(_, lin_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(logprobs)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_676": {
                "variable": {
                    "value": "output_accum_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ],
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_677": {
                "variable": {
                    "value": "output_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "top_inds.view(-1)",
                            "Call"
                        ],
                        [
                            "top_inds.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_682": {
                "variable": {
                    "value": "output_accum_seq_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accum_seq_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(K)",
                            "Call"
                        ],
                        [
                            "accum_seq_msks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(lin_inds / N).long()",
                            "Call"
                        ],
                        [
                            "(lin_inds / N).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_683": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-output_inds",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-self.cfg.EOS_idx",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "inf_outs[what_att_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "what_attn_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "inf_outs[where_att_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "where_attn_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(_, sample_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_232": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_232": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_255": {
                "variable": {
                    "value": "(_, sample_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_258": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "coord_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "where_states['coord_logits'].squeeze(1)",
                            "Call"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ],
                        [
                            "inf_outs['coord_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_277": {
                "variable": {
                    "value": "(_, sample_pose_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_278": {
                "variable": {
                    "value": "(_, sample_expr_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "expr_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_279": {
                "variable": {
                    "value": "(_, sample_scal_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scal_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "(_, sample_flip_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_282": {
                "variable": {
                    "value": "sample_pose_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "pose_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :7]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_282": {
                "variable": {
                    "value": "sample_pose_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_283": {
                "variable": {
                    "value": "sample_expr_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "expr_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 7:12]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_283": {
                "variable": {
                    "value": "sample_expr_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_284": {
                "variable": {
                    "value": "sample_scal_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "scal_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 12:15]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_284": {
                "variable": {
                    "value": "sample_scal_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_285": {
                "variable": {
                    "value": "sample_flip_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "flip_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, 15:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_285": {
                "variable": {
                    "value": "sample_flip_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_546": {
                "variable": {
                    "value": "what_outs[attn_ctx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "what_outs['attn_ctx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_547": {
                "variable": {
                    "value": "what_outs[attn_wei]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "what_outs['attn_wei']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_621": {
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ],
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_673": {
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ],
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_476": {
                "input": {
                    "value": "accum_seq_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(K)",
                            "Call"
                        ],
                        [
                            "accum_seq_msks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_606": {
                "*size": {
                    "value": "bsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_inds.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_655": {
                "*size": {
                    "value": "bsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_inds.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "min(vsize, K)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/modules/abstract_simulator.py": {
        "torch": {}
    },
    "lib/modules/abstract_trainer.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "loss_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(loss_wei)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_154": {
                "input": {
                    "value": "pred_accu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.net.collect_accuracies(inf_outs, ref_inds)",
                            "Call"
                        ],
                        [
                            "pred_accu * ref_msks",
                            "BinOp"
                        ],
                        [
                            "comp_accu / (comp_msks + self.cfg.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_155": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "raw_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.net.text_encoder.embedding.parameters(), 'lr': self.cfg.finetune_lr}, {'params': image_encoder_trainable_paras, 'lr': self.cfg.finetune_lr}, {'params': self.net.text_encoder.rnn.parameters()}, {'params': self.net.what_decoder.parameters()}, {'params': self.net.where_decoder.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_708": {
                "variable": {
                    "value": "(_, att_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'abstract_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_38": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'abstract_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mul_102": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_att_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inf_outs['what_att_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "obj_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_103": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(what_att_logits, obj_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_obj_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_obj_att_loss - encoder_msks",
                            "BinOp"
                        ],
                        [
                            "torch.sum(obj_att_loss ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(obj_att_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_112": {
                "variable": {
                    "value": "raw_pos_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "where_att_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inf_outs['where_att_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_113": {
                "variable": {
                    "value": "raw_pos_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pos_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(where_att_logits, pos_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_pos_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "pos_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_att_loss ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "pos_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_pos_att_loss - encoder_msks",
                            "BinOp"
                        ],
                        [
                            "torch.sum(pos_att_loss ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(pos_att_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_130": {
                "variable": {
                    "value": "local_eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_att_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inf_outs['what_att_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(obj_msks, 1, keepdim=True) - 1",
                            "BinOp"
                        ],
                        [
                            "inds_1.expand(bsize, 1, slen).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "local_eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_135": {
                "variable": {
                    "value": "eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_eos_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(what_att_logits, 1, inds_1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_136": {
                "variable": {
                    "value": "norm_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(what_att_logits, obj_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_obj_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_140": {
                "variable": {
                    "value": "eos_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "-torch.log(eos_probs.clamp(min=self.cfg.eps))",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(eos_loss)",
                            "Call"
                        ],
                        [
                            "self.cfg.eos_loss_weight * eos_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_362": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_474": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_474": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_475": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_563": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_563": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_564": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_564": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_640": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_640": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_641": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_641": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_670": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_670": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_671": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_671": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_738": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(checkpoint_dir, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_418": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ],
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_418": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_419": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ],
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_419": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "obj_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "encoder_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inf_outs['encoder_msks']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_139": {
                "input": {
                    "value": "eos_probs.clamp(min=self.cfg.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "norm_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(raw_obj_att_loss, 1, inds_2.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_679": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "logits.clamp(min=self.cfg.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_424": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/attention.py": {
        "torch": {
            "Tanh_43": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_44": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_112": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(h_t, h_s.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(h_t, energy.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.v_a(wquh).view(src_batch, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "self.score(h_t, h_s)",
                            "Call"
                        ],
                        [
                            "scores * src_mask",
                            "BinOp"
                        ],
                        [
                            "scores - 100000000000.0 * (1.0 - src_mask)",
                            "BinOp"
                        ],
                        [
                            "self.softmax(scores.clamp(min=-10000000000.0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_81": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "h_s.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tgt_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.v_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tgt_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_84": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "energy.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/composer_inpainter.py": {
        "torch": {
            "topk_53": {
                "variable": {
                    "value": "(_, att_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, prefix, pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, prefix, pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(word_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "in_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_vol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((in_label[..., None], in_mask[..., None], in_proposal[:, :, ::-1].copy()), -1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(in_vol).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "in_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/composites_decoder.py": {
        "torch": {
            "Sequential_93": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_226": {
                "variable": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_452": {
                "variable": {
                    "value": "coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 0, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(coord_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_453": {
                "variable": {
                    "value": "scale_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 1:self.cfg.num_scales + 1, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(scale_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_454": {
                "variable": {
                    "value": "ratio_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, self.cfg.num_scales + 1:self.cfg.num_scales + self.cfg.num_ratios + 1, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(ratio_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "attri_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_logits, ratio_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_457": {
                "variable": {
                    "value": "patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, self.cfg.num_scales + self.cfg.num_ratios + 1:, :]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(patch_vectors, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*attn2d_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "prev_alpha_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_feats * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "curr_alpha_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_feats * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "prev_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_bgfs",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_feats, prev_fgfs], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_131": {
                "input": {
                    "value": "curr_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "prev_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_feats, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "att_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_src, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, att_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, img_feats_1d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined, prev_bgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_vocab_size",
                            "Attribute"
                        ],
                        [
                            "config.output_vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "prev_fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_vocab_size",
                            "Attribute"
                        ],
                        [
                            "config.output_vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_210": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, enc_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*attn2d_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "attn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_outs, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_405": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_313": {
                "normalized_shape": {
                    "value": "[tgt_dim, self.cfg.grid_size[0], self.cfg.grid_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_314": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_316": {
                "normalized_shape": {
                    "value": "[tgt_dim // 2, self.cfg.grid_size[0], self.cfg.grid_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_317": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_319": {
                "normalized_shape": {
                    "value": "[tgt_dim // 2, self.cfg.grid_size[0], self.cfg.grid_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_320": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_326": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_328": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_330": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, enc_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[curr_fgfs, what_ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_57": {
                "normalized_shape": {
                    "value": "[tgt_dim // 2, self.cfg.grid_size[0], self.cfg.grid_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_292": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_289": {
                "normalized_shape": {
                    "value": "[tgt_dim // 2, self.cfg.grid_size[0], self.cfg.grid_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/composites_encoder.py": {
        "torch": {
            "Embedding_52": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.cfg.input_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "pad_rnn_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "pad_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "out_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out_embeddings, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "out_rnn_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_rnn_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_rnn_features, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "out_rnn_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_rnn_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(out_rnn_masks, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "out_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "same_padding_size(3, 2)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "config.output_vocab_size + 4",
                            "BinOp"
                        ],
                        [
                            "inplace",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "inplace",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_224": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_264": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.cfg.grid_size[1], self.cfg.grid_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_449": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, self.cfg.n_shape_hidden)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_461": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.block1(inputs)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.block1(inputs)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.main(vols).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((x, input_features), -1)",
                            "Call"
                        ],
                        [
                            "self.merge(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.main(inputs).squeeze()",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, stack_features), -1)",
                            "Call"
                        ],
                        [
                            "self.merge(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_478": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.block1(inputs)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.block1(inputs)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.main(vols).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((x, input_features), -1)",
                            "Call"
                        ],
                        [
                            "self.merge(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.main(inputs).squeeze()",
                            "Call"
                        ],
                        [
                            "x.view(bsize, slen, fsize)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, stack_features), -1)",
                            "Call"
                        ],
                        [
                            "self.merge(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_495": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(in_channels, [256, 256], config.use_normalization, [h, w])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_496": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(256, [256, 256], config.use_normalization, [h // 2, w // 2])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_497": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(256, [256, 256, 256], config.use_normalization, [h // 4, w // 4])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_498": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(256, [512, 512, 512], config.use_normalization, [h // 8, w // 8])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_499": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512, [512, 512, 512], config.use_normalization, [h // 16, w // 16])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_500": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512, [512, 512, 512], config.use_normalization, [h // 32, w // 32])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_551": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(in_channels, [64, 64], True, [sp, 2 * sp])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_552": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(64, [128, 128], True, [sp // 2, sp])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_553": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(128, [256, 256, 256], True, [sp // 4, sp // 2])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_554": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(256, [512, 512, 512], True, [sp // 8, sp // 4])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512, [512, 512, 512], True, [sp // 16, sp // 8])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_556": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512, [512, 512, 512], True, [sp // 32, sp // 16])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.cfg.emb_dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "curr_rnn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "curr_rnn_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] * tlen",
                            "BinOp"
                        ],
                        [
                            "curr_rnn_mask + [0.0] * n_pad",
                            "BinOp"
                        ],
                        [
                            "np.array(curr_rnn_mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(curr_rnn_mask).float()",
                            "Call"
                        ],
                        [
                            "curr_rnn_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_176": {
                "variable": {
                    "value": "out_cell_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_cell_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_cell_states, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_229": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[out_channels, normalization_res[0] // stride, normalization_res[1] // stride]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_230": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[out_channels, normalization_res[0] // stride, normalization_res[1] // stride]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "config.output_vocab_size + 4",
                            "BinOp"
                        ],
                        [
                            "inplace",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "inplace",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4 + self.cfg.output_vocab_size, hidden_size, kernel_size=2, stride=2, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4 + self.cfg.output_vocab_size, hidden_size, kernel_size=2, stride=2, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, input_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, stack_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_578": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "curr_rnn_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[curr_rnn_features, pad_rnn_features.expand(1, n_pad, hsize)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "curr_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[curr_embedding, pad_embedding.expand(1, n_pad, self.cfg.n_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_272": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 * self.cfg.output_vocab_size, self.cfg.output_vocab_size, kernel_size=7, stride=2, padding=3, groups=self.cfg.output_vocab_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 * self.cfg.output_vocab_size, self.cfg.output_vocab_size, kernel_size=7, stride=2, padding=3, groups=self.cfg.output_vocab_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.cfg.output_vocab_size + 4, 256, kernel_size=7, stride=2, padding=3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_339": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.cfg.output_vocab_size + 4, 256, kernel_size=7, stride=2, padding=3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_450": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_shape_hidden",
                            "Attribute"
                        ],
                        [
                            "self.cfg.n_shape_hidden + 2048",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.cfg.n_shape_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_451": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_452": {
                "in_features": {
                    "value": "self.cfg.n_shape_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.cfg.n_patch_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_514": {
                "variable": {
                    "value": "current_lnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[v, resolution[0], resolution[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_521": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_570": {
                "variable": {
                    "value": "current_lnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[v, resolution[0], resolution[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_577": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "4 + self.cfg.output_vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_shape_hidden",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_413": {
                "normalized_shape": {
                    "value": "[hidden_size, input_res[0] // 2, input_res[1] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_414": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_416": {
                "normalized_shape": {
                    "value": "[hidden_size, input_res[0] // 4, input_res[1] // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_417": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_419": {
                "normalized_shape": {
                    "value": "[hidden_size, input_res[0] // 8, input_res[1] // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_422": {
                "normalized_shape": {
                    "value": "[hidden_size, input_res[0] // 16, input_res[1] // 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_423": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_425": {
                "normalized_shape": {
                    "value": "[hidden_size, input_res[0] // 32, input_res[1] // 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_426": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_427": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "4 + self.cfg.output_vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_shape_hidden",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_433": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_435": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_437": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_439": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_441": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_442": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_519": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_575": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "3 * self.cfg.output_vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cfg.output_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cfg.output_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_321": {
                "normalized_shape": {
                    "value": "[self.cfg.output_vocab_size, self.cfg.input_image_size[0] // 2, self.cfg.input_image_size[1] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_322": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "3 * self.cfg.output_vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cfg.output_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cfg.output_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_328": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "self.cfg.output_vocab_size + 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_335": {
                "normalized_shape": {
                    "value": "[256, self.cfg.input_image_size[0] // 2, self.cfg.input_image_size[1] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_336": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_340": {
                "in_channels": {
                    "value": "self.cfg.output_vocab_size + 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_341": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/conv_rnn.py": {
        "torch": {
            "cat_51": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "(az, ar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(combined)",
                            "Call"
                        ],
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "az",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2(x) + r * self.conv3(h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "(ai, af, ao, ag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(combined)",
                            "Call"
                        ],
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ai",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "af",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ao",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2(x) + r * self.conv3(h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "all_hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hiddens_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "all_hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hiddens_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "all_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_cells_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_111": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_output_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_176": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "layer_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_hidden_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_223": {
                "variable": {
                    "value": "layer_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "input": {
                    "value": "new_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c + i * g",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/modules/layout_decoder.py": {
        "torch": {
            "Sequential_90": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(combined)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "logits.view(bsize, tlen, fsize, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_500": {
                "variable": {
                    "value": "coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 0, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(coord_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_501": {
                "variable": {
                    "value": "scale_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, 1:self.cfg.num_scales + 1, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(scale_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "variable": {
                    "value": "ratio_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[:, :, self.cfg.num_scales + 1:, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(ratio_logits, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "attri_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_logits, ratio_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "prev_alpha_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_feats * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "curr_alpha_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_outs * attn_map",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "prev_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_bgfs",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_feats, prev_fgfs], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "curr_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "prev_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_feats, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "att_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_src, prev_fgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, att_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined, att_imgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, tgt_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_rnn_outs, fg_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined, prev_bgfs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(tgt_dim, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(tgt_dim, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "prev_fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fgf_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "self.cfg.output_cls_size",
                            "Attribute"
                        ],
                        [
                            "config.output_cls_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_219": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, enc_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "attn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_outs, ctx_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_448": {
                "variable": {
                    "value": "attn_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ],
                        [
                            "self.spatial_attn(flatten_outs)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh * gw)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_map.view(nsize, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, gh, gw)",
                            "Call"
                        ],
                        [
                            "attn_map.view(bsize, tlen, 1, gh, gw)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim_2d, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.spatial_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim_2d, tgt_dim // 2, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_350": {
                "num_features": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_351": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_353": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 + self.cfg.num_scales + self.cfg.num_ratios",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bgf_dim",
                            "Name"
                        ],
                        [
                            "input_dim + bgf_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim",
                            "Name"
                        ],
                        [
                            "tgt_dim + fgf_dim + src_dim",
                            "BinOp"
                        ],
                        [
                            "tgt_dim + fgf_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 + self.cfg.num_scales + self.cfg.num_ratios",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "encoder_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_feats, enc_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[curr_fgfs, what_ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "tgt_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ],
                        [
                            "factor * config.n_tgt_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "in_dim_2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dim + tgt_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_317": {
                "num_features": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_318": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "in_dim_2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dim + tgt_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_325": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "tgt_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/layout_encoder.py": {
        "torch": {
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_44": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.cfg.input_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "pad_rft",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "pad_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cfg.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "out_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_rfts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_rfts, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "out_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_embs, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "out_hids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_hids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_hids, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "out_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(out_msks, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "83",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_186": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(config.grid_size[1], config.grid_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.cfg.emb_dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.n_src_hidden",
                            "Attribute"
                        ],
                        [
                            "factor * self.cfg.n_src_hidden",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "inst_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inst_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] * tlen",
                            "BinOp"
                        ],
                        [
                            "inst_msks + [0.0] * n_pad",
                            "BinOp"
                        ],
                        [
                            "np.array(inst_msks)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inst_msks).float()",
                            "Call"
                        ],
                        [
                            "inst_msks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_168": {
                "variable": {
                    "value": "out_cels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_cels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out_cels, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "inst_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_rfts, pad_rft.expand(1, n_pad, hsize)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "inst_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inst_embs, pad_emb.expand(1, n_pad, self.cfg.n_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/layout_evaluator.py": {
        "torch": {}
    },
    "lib/modules/layout_model.py": {
        "torch": {
            "cat_95": {
                "variable": {
                    "value": "out_obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "out_coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coord_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out_attri_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attri_logits_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lt_171": {
                "variable": {
                    "value": "sample_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(expl_inds.size(0)).uniform_(0, 1)",
                            "Call"
                        ],
                        [
                            "sample_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "explore_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cfg.output_cls_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_inds, where_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_281": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_coord_inds, sample_scale_inds, sample_ratio_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_350": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_350": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_356": {
                "variable": {
                    "value": "sample_obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_357": {
                "variable": {
                    "value": "sample_coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_358": {
                "variable": {
                    "value": "sample_scale_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "scale_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_359": {
                "variable": {
                    "value": "sample_ratio_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "ratio_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_361": {
                "variable": {
                    "value": "sample_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_obj_logits, sample_coord_logits, sample_scale_logits, sample_ratio_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_386": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_386": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_391": {
                "variable": {
                    "value": "(_, pred_obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_392": {
                "variable": {
                    "value": "(_, pred_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_393": {
                "variable": {
                    "value": "(_, pred_scale_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_394": {
                "variable": {
                    "value": "(_, pred_ratio_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_397": {
                "variable": {
                    "value": "obj_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_obj_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_398": {
                "variable": {
                    "value": "coord_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_399": {
                "variable": {
                    "value": "scale_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "scale_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_400": {
                "variable": {
                    "value": "ratio_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "ratio_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_402": {
                "variable": {
                    "value": "sample_accus",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_accu, coord_accu, scale_accu, ratio_accu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_422": {
                "variable": {
                    "value": "(_, top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_423": {
                "variable": {
                    "value": "curr_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "top_inds.view(bsize, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_424": {
                "variable": {
                    "value": "curr_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obj_probs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "curr_probs.clamp(min=self.cfg.eps)",
                            "Call"
                        ],
                        [
                            "torch.gather(curr_probs, -1, top_inds.view(bsize, N))",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_449": {
                "variable": {
                    "value": "(_, lin_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(logprobs)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_452": {
                "variable": {
                    "value": "output_accum_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_453": {
                "variable": {
                    "value": "output_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_inds.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "lin_inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_458": {
                "variable": {
                    "value": "output_accum_seq_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accum_seq_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(K)",
                            "Call"
                        ],
                        [
                            "accum_seq_msks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(lin_inds / N).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_459": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-output_inds",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-self.cfg.EOS_idx",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_525": {
                "variable": {
                    "value": "rnn_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(rnn_outs, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_526": {
                "variable": {
                    "value": "nxt_hids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nxt_hids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(nxt_hids, 1, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_527": {
                "variable": {
                    "value": "prev_bgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_bgfs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(prev_bgfs, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_533": {
                "variable": {
                    "value": "enc_rfts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_rfts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(enc_rfts, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_534": {
                "variable": {
                    "value": "enc_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(enc_embs, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_535": {
                "variable": {
                    "value": "enc_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(enc_msks, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_542": {
                "variable": {
                    "value": "fgfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cfg.output_cls_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_inds, where_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_591": {
                "variable": {
                    "value": "accum_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_592": {
                "variable": {
                    "value": "accum_seq_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out_what_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "what_attn_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out_where_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "where_attn_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_240": {
                "variable": {
                    "value": "(_, sample_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_244": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_244": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_267": {
                "variable": {
                    "value": "(_, sample_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_270": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "(_, sample_scale_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_288": {
                "variable": {
                    "value": "(_, sample_ratio_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_290": {
                "variable": {
                    "value": "sample_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_290": {
                "variable": {
                    "value": "sample_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_291": {
                "variable": {
                    "value": "sample_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_291": {
                "variable": {
                    "value": "sample_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_529": {
                "variable": {
                    "value": "what_ctx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_ctx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(what_ctx, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_530": {
                "variable": {
                    "value": "what_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_wei",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(what_wei, 0, beam_inds_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_inds_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_449": {
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_logprobs",
                            "Name"
                        ],
                        [
                            "accum_logprobs.unsqueeze(-1) + curr_logprobs + dead_logprobs",
                            "BinOp"
                        ],
                        [
                            "logprobs.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_623": {
                "input": {
                    "value": "accum_seq_msks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(K)",
                            "Call"
                        ],
                        [
                            "accum_seq_msks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_431": {
                "*size": {
                    "value": "bsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_inds.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(vsize, K)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/modules/layout_simulator.py": {
        "torch": {}
    },
    "lib/modules/layout_trainer.py": {
        "torch": {
            "from_numpy_98": {
                "variable": {
                    "value": "loss_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(loss_wei)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "pred_accu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "net.collect_accuracies(inf_outs, ref_inds)",
                            "Call"
                        ],
                        [
                            "pred_accu * ref_msks",
                            "BinOp"
                        ],
                        [
                            "comp_accu / (comp_msks + self.cfg.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "raw_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': net.text_encoder.embedding.parameters(), 'lr': self.cfg.finetune_lr}, {'params': image_encoder_trainable_paras}, {'params': net.text_encoder.rnn.parameters()}, {'params': net.what_decoder.parameters()}, {'params': net.where_decoder.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_193": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_733": {
                "variable": {
                    "value": "(_, att_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'layout_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_49": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'layout_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mul_116": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_att_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "what_wei",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "obj_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_117": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(what_att_logits, obj_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_obj_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_obj_att_loss - encoder_msks",
                            "BinOp"
                        ],
                        [
                            "torch.sum(obj_att_loss ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(obj_att_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_144": {
                "variable": {
                    "value": "local_eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_att_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "what_wei",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(obj_msks, 1, keepdim=True) - 1",
                            "BinOp"
                        ],
                        [
                            "inds_1.expand(bsize, 1, slen).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "local_eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_149": {
                "variable": {
                    "value": "eos_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_eos_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(what_att_logits, 1, inds_1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_150": {
                "variable": {
                    "value": "norm_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(what_att_logits, obj_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_obj_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_154": {
                "variable": {
                    "value": "eos_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "-torch.log(eos_probs.clamp(min=self.cfg.eps))",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(eos_loss)",
                            "Call"
                        ],
                        [
                            "self.cfg.eos_loss_weight * eos_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_430": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_431": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(word_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_431": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_520": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_520": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_521": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(word_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_521": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_694": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_694": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_695": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(word_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_695": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_767": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(checkpoint_dir, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "DrawModel(db)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "self.net.module",
                            "Attribute"
                        ],
                        [
                            "self.net",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_609": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_609": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_610": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(word_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_610": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "obj_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "encoder_msks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enc_msks",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "eos_probs.clamp(min=self.cfg.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_155": {
                "input": {
                    "value": "norm_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(raw_obj_att_loss, 1, inds_2.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_104": {
                "input": {
                    "value": "logits.clamp(min=self.cfg.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/perceptual_loss.py": {
        "torch": {}
    },
    "lib/modules/puzzle_model.py": {
        "torch": {
            "gather_74": {
                "variable": {
                    "value": "sample_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_patch_vectors.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "sample_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_78": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_83": {
                "variable": {
                    "value": "sample_obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_84": {
                "variable": {
                    "value": "sample_coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_85": {
                "variable": {
                    "value": "sample_scale_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "scale_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_86": {
                "variable": {
                    "value": "sample_ratio_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "ratio_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "sample_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_obj_logits, sample_coord_logits, sample_scale_logits, sample_ratio_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_113": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, pred_obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_119": {
                "variable": {
                    "value": "(_, pred_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "(_, pred_scale_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_121": {
                "variable": {
                    "value": "(_, pred_ratio_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_124": {
                "variable": {
                    "value": "obj_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_obj_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "expl_inds.clone()",
                            "Call"
                        ],
                        [
                            "ref_inds[:, 0, 0].clone().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_125": {
                "variable": {
                    "value": "coord_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "coord_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_126": {
                "variable": {
                    "value": "scale_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "scale_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 2].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_127": {
                "variable": {
                    "value": "ratio_accu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "ratio_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_inds[:, :, 3].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_inds[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_129": {
                "variable": {
                    "value": "sample_accus",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_accu, coord_accu, scale_accu, ratio_accu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "out_obj_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "out_coord_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coord_logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "out_attri_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attri_logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "out_patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patch_vector_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lt_287": {
                "variable": {
                    "value": "sample_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obj_logits.new_empty(expl_inds.size(0)).uniform_(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "explore_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_inds, where_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_395": {
                "variable": {
                    "value": "sample_patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_patch_vectors.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_395": {
                "variable": {
                    "value": "sample_patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_400": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attri_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_attri_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "aux_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "coord_inds.view(bsize, tlen, 1).expand(bsize, tlen, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "sample_coord_inds.expand(bsize, tsize).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_400": {
                "variable": {
                    "value": "local_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_coord_inds, sample_scale_inds, sample_ratio_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "out_what_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "what_attn_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "out_where_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "where_attn_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_358": {
                "variable": {
                    "value": "(_, sample_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_361": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_361": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_384": {
                "variable": {
                    "value": "(_, sample_coord_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_386": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "coord_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_coord_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "sample_coord_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_406": {
                "variable": {
                    "value": "(_, sample_scale_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_407": {
                "variable": {
                    "value": "(_, sample_ratio_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_409": {
                "variable": {
                    "value": "sample_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "scale_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, :self.cfg.num_scales]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :self.cfg.num_scales]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_409": {
                "variable": {
                    "value": "sample_scale_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_410": {
                "variable": {
                    "value": "sample_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "ratio_logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, :, self.cfg.num_scales:]",
                            "Subscript"
                        ],
                        [
                            "local_logits[:, self.cfg.num_scales:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_410": {
                "variable": {
                    "value": "sample_ratio_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/puzzle_trainer.py": {
        "torch": {
            "Adam_44": {
                "variable": {
                    "value": "raw_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': image_encoder_trainable_paras}, {'params': net.text_encoder.embedding.parameters(), 'lr': self.cfg.finetune_lr}, {'params': net.text_encoder.rnn.parameters()}, {'params': net.what_decoder.parameters()}, {'params': net.where_decoder.parameters()}, {'params': net.shape_encoder.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "patch_vol_loader(train_db)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "loss_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(loss_wei)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TripletMarginLoss_181": {
                "variable": {
                    "value": "embed_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.cfg.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "pred_accu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "net.collect_accuracies(inf_outs, ref_inds)",
                            "Call"
                        ],
                        [
                            "pred_accu * ref_msks",
                            "BinOp"
                        ],
                        [
                            "comp_accu / (comp_msks + self.cfg.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_309": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "seq_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(train_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(val_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(test_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_431": {
                "variable": {
                    "value": "(_, att_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'composites_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_74": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'composites_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mul_200": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "what_att_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "what_wei",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "obj_msks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_201": {
                "variable": {
                    "value": "raw_obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(what_att_logits, obj_msks)",
                            "Call"
                        ],
                        [
                            "torch.sum(raw_obj_att_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_204": {
                "variable": {
                    "value": "obj_att_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_att_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "raw_obj_att_loss - encoder_msks",
                            "BinOp"
                        ],
                        [
                            "torch.sum(obj_att_loss ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(obj_att_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_376": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "seq_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(train_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(val_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(test_db)",
                            "Call"
                        ],
                        [
                            "sequence_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(pretrained_path)",
                            "Call"
                        ],
                        [
                            "torch.load(pretrained_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': net.state_dict(), 'optimizer': self.optimizer.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(checkpoint_dir, 'ckpt-%03d.pkl' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_472": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_inds)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_472": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_473": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_lens)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_473": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_556": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_inds)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_556": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_557": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_lens)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_557": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_668": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_inds)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_668": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(word_lens)",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ],
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_669": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "ref_msks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "embed_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ref_msks[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_cache_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "logits.clamp(min=self.cfg.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/separable_convolution.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/modules/synthesis_decoder.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + in_channels, [512, 512], config.use_normalization, [h // 64, w // 64])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + 512 + in_channels, [512, 512], config.use_normalization, [h // 32, w // 32])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + 512 + in_channels, [512, 512], config.use_normalization, [h // 16, w // 16])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + 256 + in_channels, [512, 512], config.use_normalization, [h // 8, w // 8])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + 256 + in_channels, [512, 512], config.use_normalization, [h // 4, w // 4])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(512 + 256 + in_channels, [256, 256], config.use_normalization, [h // 2, w // 2])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.block0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.make_layers(256 + in_channels, [256, 256], config.use_normalization, [h, w])",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "xx_d6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 64, w // 64]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d6, x6]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "xx_d5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 32, w // 32]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d5, x5, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "xx_d4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 16, w // 16]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d4, x4, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "xx_d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 8, w // 8]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d3, x3, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "xx_d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d2, x2, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_92": {
                "variable": {
                    "value": "xx_d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d1, x1, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([xx_d6, x6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d5, x5, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d4, x4, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d3, x3, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d2, x2, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d1, x1, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([xx_d0, x], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block0(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx_d0, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_53": {
                "variable": {
                    "value": "current_lnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[v, resolution[0], resolution[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/synthesis_model.py": {
        "torch": {
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules/synthesis_trainer.py": {
        "torch": {
            "Adam_38": {
                "variable": {
                    "value": "raw_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': net.encoder.parameters()}, {'params': net.decoder.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_98": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(inputs - targets)",
                            "Call"
                        ],
                        [
                            "torch.mean(d, 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "d * weights",
                            "BinOp"
                        ],
                        [
                            "torch.mean(d)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(inputs - targets)",
                            "Call"
                        ],
                        [
                            "torch.mean(d, 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "d * weights",
                            "BinOp"
                        ],
                        [
                            "torch.mean(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "cross_entropy_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_151": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss, pred_loss, pi, p0, p1, p2, p3, p4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clone_151": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_151": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_224": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(train_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(val_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(test_db)",
                            "Call"
                        ],
                        [
                            "proposal_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_277": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(train_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(val_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(test_db)",
                            "Call"
                        ],
                        [
                            "proposal_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_337": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(train_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(val_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(test_db)",
                            "Call"
                        ],
                        [
                            "proposal_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "random_or_not",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_408": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(train_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(val_db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(test_db)",
                            "Call"
                        ],
                        [
                            "proposal_loader(test_db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'synthesis_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_59": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(cache_dir, 'synthesis_ckpts', pretrained_name + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(pretrained_path)",
                            "Call"
                        ],
                        [
                            "torch.load(pretrained_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': net.state_dict(), 'optimizer': self.optimizer.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(checkpoint_dir, 'ckpt-%03d.pkl' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "p1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[gt_features[1].size(2), gt_features[1].size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_126": {
                "variable": {
                    "value": "p2_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[gt_features[2].size(2), gt_features[2].size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "p3_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[gt_features[3].size(2), gt_features[3].size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_128": {
                "variable": {
                    "value": "p4_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "proposals[:, :, :, -4].clone().detach()",
                            "Call"
                        ],
                        [
                            "0.5 * (1.0 + weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[gt_features[4].size(2), gt_features[4].size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_366": {
                "input": {
                    "value": "synthesized_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/optim.py": {
        "torch": {
            "clip_grad_norm__39": {
                "parameters": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "itertools.chain.from_iterable([group['params'] for group in self.optimizer.param_groups])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/composites_demo.py": {
        "torch": {
            "manual_seed_85": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/inference_synthesis.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_40": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/inpainting_demo.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_48": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_abstract_dataset.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train')",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train')",
                            "Call"
                        ],
                        [
                            "abstract_scene(config)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_213": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_215": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_abstract_modules.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "imdb(config, split='test', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "imdb(config, split='test', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "imdb(config, split='test', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "imdb(config, split='test', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "abstract_scene(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "imdb(config, split='test', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_124": {
                "variable": {
                    "value": "(_, obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_297": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/abstract_ckpts/supervised_abstract_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_abstract.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_299": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/abstract_ckpts/supervised_abstract_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_abstract.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_393": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/abstract_ckpts/supervised_abstract_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_abstract.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_395": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/abstract_ckpts/supervised_abstract_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_abstract.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "entry['word_inds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_407": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_408": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "entry['word_lens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_448": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_450": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "diff.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_composites_dataset.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_214": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_composites_modules.py": {
        "torch": {
            "randn_43": {
                "variable": {
                    "value": "h_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "input_var_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 512, 14, 14)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 512, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "input_msk_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_msk",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([[1, 1, 0], [1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 0], [1, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "prev_hidden_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(config.n_rnn_layers, 2, config.n_tgt_hidden, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "input_var_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 512, 14, 14)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 512, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "input_msk_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_msk",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([[1, 1, 0], [1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 0], [1, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "hs_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(config.n_rnn_layers, 2, config.n_tgt_hidden, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "cs_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(config.n_rnn_layers, 2, config.n_tgt_hidden, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_209": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "composites_coco(config, 'train', '2017')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_301": {
                "variable": {
                    "value": "x_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_312": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sequence_db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ],
                        [
                            "sequence_loader(db, all_tables)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_232": {
                "variable": {
                    "value": "(_, obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_288": {
                "variable": {
                    "value": "x_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_422": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_424": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "diff.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_153": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "batched['foreground_resnets'].float()",
                            "Call"
                        ],
                        [
                            "img_encoder(x, y)",
                            "Call"
                        ],
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "img_encoder(x_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_154": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "batched['foreground_resnets'].float()",
                            "Call"
                        ],
                        [
                            "img_encoder(x, y)",
                            "Call"
                        ],
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "img_encoder(x_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_359": {
                "input": {
                    "value": "patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_360": {
                "input": {
                    "value": "patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_155": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "batched['foreground_resnets'].float()",
                            "Call"
                        ],
                        [
                            "img_encoder(x, y)",
                            "Call"
                        ],
                        [
                            "img_encoder(x)",
                            "Call"
                        ],
                        [
                            "img_encoder(x_fake)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_361": {
                "input": {
                    "value": "patch_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_layout_dataset.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'test')",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_240": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_242": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_layout_modules.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_224": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layout_coco(config, 'train', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'test', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "layout_coco(config, 'val', transform=transformer)",
                            "Call"
                        ],
                        [
                            "coco(config, 'val', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_119": {
                "variable": {
                    "value": "(_, obj_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "seqs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_283": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/layout_ckpts/supervised_coco_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_coco.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_285": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/layout_ckpts/supervised_coco_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_coco.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_382": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/layout_ckpts/supervised_coco_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_coco.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_384": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join('../data/caches/layout_ckpts/supervised_coco_top1.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join('data/caches/supervised_coco.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_inds_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(entry['word_inds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_396": {
                "variable": {
                    "value": "input_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_397": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_lens_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(entry['word_lens'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_397": {
                "variable": {
                    "value": "input_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_436": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_438": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "diff.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_synthesis_loader.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_loader",
                    "type": "Name",
                    "possible_values": [
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "proposal_db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_191": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_193": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_synthesis_modules.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_loader",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_loader",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_loader",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "syn_loader",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ],
                        [
                            "synthesis_loader(db)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_121": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_composites.py": {
        "torch": {
            "manual_seed_59": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_61": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_synthesis.py": {
        "torch": {
            "manual_seed_53": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}