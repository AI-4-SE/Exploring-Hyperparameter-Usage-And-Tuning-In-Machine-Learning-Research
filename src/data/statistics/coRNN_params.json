{
    "HAR-2/har2_task.py": {
        "torch": {
            "TensorDataset_40": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "Tensor(train_data).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(Tensor(train_data).float(), Tensor(train_labels))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_44": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "Tensor(valid_data).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(Tensor(valid_data).float(), Tensor(valid_labels))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "valid_labels.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_48": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "Tensor(test_data).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(Tensor(test_data).float(), Tensor(test_labels).long())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_labels.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_51": {
                "variable": {
                    "value": "objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_55": {
                "variable": {
                    "value": "rounded_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HAR-2/network.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp + n_hid + n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "n_inp",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_16": {
                "input": {
                    "value": "self.i2h(torch.cat((x, hz, hy), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "(x, hz, hy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "IMDB/IMDB_task.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_49": {
                "variable": {
                    "value": "rounded_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IMDB/model.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid + n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_21": {
                "input": {
                    "value": "self.h2h(torch.cat((hz, hy), dim=1)) + inputs[t]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(hz, hy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "IMDB/utils.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "model.embedding.weight.data[UNK_IDX]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "model.embedding.weight.data[pad_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adding/adding_task.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_41": {
                "variable": {
                    "value": "objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adding/model.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp + n_hid + n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "self.i2h(torch.cat((x, hz, hy), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "(x, hz, hy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adding/utils.py": {
        "torch": {
            "rand_5": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_6": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(T, batch_size, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_14": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_15": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(T, batch_size, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_15": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "noisy_CIFAR10/network.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.h2h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.h2h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_20": {
                "input": {
                    "value": "self.h2h1(hy) + self.h2h2(hz) + self.i2h(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "noisy_CIFAR10/noisy_cifar10_task.py": {
        "torch": {
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "rands",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000 - 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images.permute(0, 2, 1, 3).reshape(args.batch, 32, 96), rand_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_62": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images.permute(0, 2, 1, 3).reshape(1000, 32, 96), rand_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "noisy_CIFAR10/utils.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data/', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data/', train=False, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "psMNIST/network.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp + n_hid + n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "input": {
                    "value": "self.i2h(torch.cat((x, hz, hy), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "(x, hz, hy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "psMNIST/psMNIST_task.py": {
        "torch": {
            "randperm_34": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "12008",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "psMNIST/utils.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='data/', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='data/', train=False, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sMNIST/network.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inp + n_hid + n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "self.i2h(torch.cat((x, hz, hy), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "(x, hz, hy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sMNIST/sMNIST_task.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "46159",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sMNIST/utils.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='data/', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='data/', train=False, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}