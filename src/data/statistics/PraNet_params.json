{
    "MyTest.py": {
        "torch": {
            "upsample_35": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2",
                            "variable"
                        ],
                        [
                            "F.upsample(res, size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "gt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_18": {
                "f": {
                    "value": "opt.pth_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MyTrain.py": {
        "torch": {
            "binary_cross_entropy_with_logits_14": {
                "variable": {
                    "value": "wbce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'PraNet-%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_13": {
                "input": {
                    "value": "F.avg_pool2d(mask, kernel_size=31, stride=1, padding=15) - mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "upsample_39": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(images).cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(images, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_40": {
                "variable": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(gts).cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(gts, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_13": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/PraNet_Res2Net.py": {
        "torch": {
            "randn_184": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_68": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "lateral_map_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agg1(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_146": {
                "variable": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agg1(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_155": {
                "variable": {
                    "value": "lateral_map_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "variable": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "lateral_map_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_169": {
                "variable": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_177": {
                "variable": {
                    "value": "lateral_map_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_147": {
                "input": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ra5_feat, scale_factor=0.25, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_159": {
                "input": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_170": {
                "input": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/PraNet_ResNet.py": {
        "torch": {
            "randn_236": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_72": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "x2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "lateral_map_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agg1(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agg1(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_175": {
                "variable": {
                    "value": "lateral_map_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_179": {
                "variable": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_187": {
                "variable": {
                    "value": "lateral_map_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_193": {
                "variable": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "lateral_map_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "self.ra4_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "self.ra3_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "self.ra2_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "input": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ra5_feat, scale_factor=0.25, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_180": {
                "input": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_194": {
                "input": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/Res2Net_v1b.py": {
        "torch": {
            "rand_224": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_65": {
                "variable": {
                    "value": "spx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, spx[self.nums]), 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, self.pool(spx[self.nums])), 1)",
                            "Call"
                        ],
                        [
                            "sp",
                            "variable"
                        ],
                        [
                            "torch.cat((out, sp), 1)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_117": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_195": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/media/nercms/NERCMS/GepengJi/Medical_Seqmentation/CRANet/models/res2net50_v1b_26w_4s-3cf99910.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_40": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, spx[self.nums])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=stride, stride=stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, sp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, self.pool(spx[self.nums]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_131": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ResNet.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_93": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PolypDataset(image_root, gt_root, trainsize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "mean_46": {
                "input": {
                    "value": "torch.stack(self.losses[np.maximum(len(self.losses) - self.num, 0):])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_46": {
                "tensors": {
                    "value": "self.losses[np.maximum(len(self.losses) - self.num, 0):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}