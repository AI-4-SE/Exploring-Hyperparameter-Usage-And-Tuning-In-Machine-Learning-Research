{
    "det/det_apis.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(Image.open('E:/Data/COCO/val2014/COCO_val2014_000000447342.jpg'))",
                            "Call"
                        ],
                        [
                            "img_transform(img, scale=(416, 416), keep_ratio=True, device='cuda')",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "mmcv.imnormalize(img, self.mean, self.std, self.to_rgb)",
                            "Call"
                        ],
                        [
                            "mmcv.imflip(img)",
                            "Call"
                        ],
                        [
                            "mmcv.impad_to_multiple(img, self.size_divisor)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).float()",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, new_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.flip(img, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, pad_w, 0, pad_h), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "self.std",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(Image.open('E:/Data/COCO/val2014/COCO_val2014_000000447342.jpg'))",
                            "Call"
                        ],
                        [
                            "img_transform(img, scale=(416, 416), keep_ratio=True, device='cuda')",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "mmcv.imnormalize(img, self.mean, self.std, self.to_rgb)",
                            "Call"
                        ],
                        [
                            "mmcv.imflip(img)",
                            "Call"
                        ],
                        [
                            "mmcv.impad_to_multiple(img, self.size_divisor)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).float()",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, new_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.flip(img, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, pad_w, 0, pad_h), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_123": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(Image.open('E:/Data/COCO/val2014/COCO_val2014_000000447342.jpg'))",
                            "Call"
                        ],
                        [
                            "img_transform(img, scale=(416, 416), keep_ratio=True, device='cuda')",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "mmcv.imnormalize(img, self.mean, self.std, self.to_rgb)",
                            "Call"
                        ],
                        [
                            "mmcv.imflip(img)",
                            "Call"
                        ],
                        [
                            "mmcv.impad_to_multiple(img, self.size_divisor)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).float()",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, new_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.flip(img, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, pad_w, 0, pad_h), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "pad_130": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(Image.open('E:/Data/COCO/val2014/COCO_val2014_000000447342.jpg'))",
                            "Call"
                        ],
                        [
                            "img_transform(img, scale=(416, 416), keep_ratio=True, device='cuda')",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "mmcv.imnormalize(img, self.mean, self.std, self.to_rgb)",
                            "Call"
                        ],
                        [
                            "mmcv.imflip(img)",
                            "Call"
                        ],
                        [
                            "mmcv.impad_to_multiple(img, self.size_divisor)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).float()",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, new_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.flip(img, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, pad_w, 0, pad_h), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.bbox_head[i].regress_by_class(rois[j], bbox_label[j], bbox_pred[j], img_metas[j]) for j in range(num_imgs)]",
                    "possible_values": []
                }
            },
            "no_grad_415": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(Image.open('E:/Data/COCO/val2014/COCO_val2014_000000447342.jpg'))",
                            "Call"
                        ],
                        [
                            "img_transform(img, scale=(416, 416), keep_ratio=True, device='cuda')",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "mmcv.imnormalize(img, self.mean, self.std, self.to_rgb)",
                            "Call"
                        ],
                        [
                            "mmcv.imflip(img)",
                            "Call"
                        ],
                        [
                            "mmcv.impad_to_multiple(img, self.size_divisor)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device).float()",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, new_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.flip(img, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, pad_w, 0, pad_h), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "possible_values": [
                        [
                            "scale",
                            "Name"
                        ],
                        [
                            "(round(h * scale_factor), round(w * scale_factor))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "ndarray": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "float(scale_factor)",
                            "Call"
                        ],
                        [
                            "np.array([w_scale, h_scale, w_scale, h_scale], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([w_scale, h_scale, w_scale, h_scale], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Name"
                        ],
                        [
                            "min(max_long_edge / max(h, w), max_short_edge / min(h, w))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "det/offline_det.py": {
        "torch": {
            "device_count_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det/rt_det.py": {
        "torch": {
            "synchronize_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det/srt_det.py": {
        "torch": {
            "device_count_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det/srt_det_inf.py": {
        "torch": {
            "device_count_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "forecast/pps_forecast_kf.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.from_numpy(bboxes), torch.zeros(bboxes.shape))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "bboxes",
                    "possible_values": [
                        [
                            "bboxes_t3.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_129": {
                "variable": {
                    "value": "kf_F",
                    "possible_values": []
                },
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "eye_130": {
                "variable": {
                    "value": "kf_Q",
                    "possible_values": []
                },
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_148": {
                "variable": {
                    "value": "kf_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 8, 1)",
                    "possible_values": []
                }
            },
            "empty_149": {
                "variable": {
                    "value": "kf_P",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 8, 8)",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "bboxes",
                    "possible_values": [
                        [
                            "bboxes_t3.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "bboxes.shape",
                    "possible_values": []
                }
            },
            "eye_131": {
                "n": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "eye_132": {
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "kf_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kf_x, kf_x_new)",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "kf_P",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kf_P, kf_P_new)",
                    "possible_values": []
                }
            }
        }
    },
    "forecast/streamer.py": {
        "torch": {
            "eye_140": {
                "variable": {
                    "value": "kf_F",
                    "possible_values": []
                },
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "eye_141": {
                "variable": {
                    "value": "kf_Q",
                    "possible_values": []
                },
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "synchronize_72": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_104": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_159": {
                "variable": {
                    "value": "kf_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 8, 1)",
                    "possible_values": []
                }
            },
            "empty_160": {
                "variable": {
                    "value": "kf_P",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 8, 8)",
                    "possible_values": []
                }
            },
            "synchronize_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "eye_142": {
                "n": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "eye_143": {
                "n": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "kf_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kf_x, kf_x_new)",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "kf_P",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kf_P, kf_P_new)",
                    "possible_values": []
                }
            }
        }
    }
}