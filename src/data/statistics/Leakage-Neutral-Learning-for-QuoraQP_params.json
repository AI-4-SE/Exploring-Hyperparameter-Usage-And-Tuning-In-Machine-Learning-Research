{
    "debias/main.py": {
        "sklearn": {
            "log_loss_442": {
                "variable": {
                    "value": "loss_weighted_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[test_idx], x2[test_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_443": {
                "variable": {
                    "value": "acc_weighted_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_444": {
                "variable": {
                    "value": "auc_weighted_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[test_idx], x2[test_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_445": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[test_idx], x2[test_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_446": {
                "variable": {
                    "value": "acc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_447": {
                "variable": {
                    "value": "auc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[test_idx], x2[test_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_458": {
                "variable": {
                    "value": "loss_weighted_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_460": {
                "variable": {
                    "value": "acc_weighted_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_overlap_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_462": {
                "variable": {
                    "value": "auc_weighted_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_464": {
                "variable": {
                    "value": "loss_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_465": {
                "variable": {
                    "value": "acc_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_overlap_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_466": {
                "variable": {
                    "value": "auc_test_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_loss_477": {
                "variable": {
                    "value": "loss_weighted_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_no_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_no_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_479": {
                "variable": {
                    "value": "acc_weighted_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_no_overlap_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_no_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_481": {
                "variable": {
                    "value": "auc_weighted_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_no_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_idx][test_no_overlap_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_483": {
                "variable": {
                    "value": "loss_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_no_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_484": {
                "variable": {
                    "value": "acc_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_no_overlap_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_485": {
                "variable": {
                    "value": "auc_test_no_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_no_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_no_overlap_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_preds[test_no_overlap_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_496": {
                "variable": {
                    "value": "acc_test_same",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_same",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_same_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_same_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_loss_502": {
                "variable": {
                    "value": "loss_test_sick",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_sick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[sick_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_sick_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[sick_idx], x2[sick_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_503": {
                "variable": {
                    "value": "acc_test_sick",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_sick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[sick_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_sick_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_504": {
                "variable": {
                    "value": "auc_test_sick",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_sick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[sick_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_sick_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[sick_idx], x2[sick_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_512": {
                "variable": {
                    "value": "loss_test_msr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_msr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[msr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_msr_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[msr_idx], x2[msr_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_513": {
                "variable": {
                    "value": "acc_test_msr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_msr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[msr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test_msr_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_514": {
                "variable": {
                    "value": "auc_test_msr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_msr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[msr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_test_msr_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[msr_idx], x2[msr_idx]], batch_size=2048)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_427": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_428": {
                "variable": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_429": {
                "variable": {
                    "value": "auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(file_sample_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_431": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_432": {
                "variable": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_433": {
                "variable": {
                    "value": "auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_385": {
                "variable": {
                    "value": "score_val[lss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx] if use_sample_weight_train else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "accuracy_score_387": {
                "variable": {
                    "value": "score_val[acc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_preds > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx] if use_sample_weight_train else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "roc_auc_score_389": {
                "variable": {
                    "value": "score_val[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[val_idx]",
                            "Subscript"
                        ],
                        [
                            "y[val_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_val_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float64(ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0])",
                            "Call"
                        ],
                        [
                            "ADN.predict([x1[val_idx], x2[val_idx]], batch_size=2048)[0]",
                            "Subscript"
                        ],
                        [
                            "np.float64(y_val_preds)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[val_idx] if use_sample_weight_train else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_209": {
                "variable": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_211": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_207": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.random_seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "debias/make_data.py": {
        "sklearn": {
            "LabelEncoder_126": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scale_200": {
                "variable": {
                    "value": "leaky_features",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "leaky_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(q1_id), 8])",
                            "Call"
                        ],
                        [
                            "leaky_features[:, :3]",
                            "Subscript"
                        ],
                        [
                            "scale(leaky_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "quantify/leaky_predict.py": {
        "sklearn": {
            "LabelEncoder_28": {
                "variable": {
                    "value": "data[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_29": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scale_371": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[['tid1_degree', 'tid2_degree', 'path1']].values",
                            "Attribute"
                        ],
                        [
                            "scale(X)",
                            "Call"
                        ],
                        [
                            "data[['tid1_degree']].values",
                            "Attribute"
                        ],
                        [
                            "data[['tid2_degree']].values",
                            "Attribute"
                        ],
                        [
                            "data[['path1']].values",
                            "Attribute"
                        ],
                        [
                            "data[['tid1_degree', 'tid2_degree']].values",
                            "Attribute"
                        ],
                        [
                            "data[['tid1_degree', 'path1']].values",
                            "Attribute"
                        ],
                        [
                            "data[['tid2_degree', 'path1']].values",
                            "Attribute"
                        ],
                        [
                            "data[['bleu1', 'bleu2', 'bleu3', 'bleu4', 'length_dist', 'num_overlap', 'rate_overlap', 'num_overlap_noun', 'rate_overlap_noun', 'num_overlap_verb', 'rate_overlap_verb', 'num_overlap_adj', 'rate_overlap_adj', 'num_overlap_adv', 'rate_overlap_adv']].values",
                            "Attribute"
                        ],
                        [
                            "data[['tid1_degree', 'tid2_degree', 'path1', 'tid1_degree1', 'tid2_degree1', 'path2', 'tid1_degree2', 'tid2_degree2', 'nx1', 'nx2', 'nx3', 'nx4', 'emb_dot']].values",
                            "Attribute"
                        ],
                        [
                            "np.concatenate([X, emb1 * emb2], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_389": {
                "variable": {
                    "value": "tr_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[train_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(model.predict(X[train_split]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_391": {
                "variable": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[val_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(model.predict(X[val_split]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_407": {
                "variable": {
                    "value": "tr_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[train_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict(X[train_split])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_408": {
                "variable": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[val_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict(X[val_split])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_422": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[test_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(X[test_split]), axis=1)",
                            "Call"
                        ],
                        [
                            "model.predict(X[test_split])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_433": {
                "variable": {
                    "value": "test_weighted_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[test_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(X[test_split]), axis=1)",
                            "Call"
                        ],
                        [
                            "model.predict(X[test_split])",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_split]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load('./weights.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_438": {
                "variable": {
                    "value": "test_guess_weighted_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[test_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_guess_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(len(y[test_split])) * freq_label",
                            "BinOp"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight[test_split]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load('./weights.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomForestClassifier_403": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_397": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_400": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_24": {
                "seed": {
                    "value": "233",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "quantify/propensity.py": {
        "sklearn": {
            "LabelEncoder_20": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_56": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2018",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_val_predict_59": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomForestClassifier(n_estimators=10000, max_depth=9, random_state=2018, n_jobs=8, criterion='entropy')",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[['q1_id_dgree', 'q2_id_dgree', 'path']].values",
                            "Attribute"
                        ],
                        [
                            "np.hstack((X, XX))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['is_duplicate'].values",
                            "Attribute"
                        ]
                    ]
                },
                "cv": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "method": {
                    "value": "predict_proba",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}