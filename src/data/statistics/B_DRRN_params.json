{
    "source/train/dataset.py": {
        "tensorflow": {
            "ConfigProto_12": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_eager_execution_14": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "source/model.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_39": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_43": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.convcat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, s_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_83": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "add_34": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_74": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_37": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "source/test/model.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_39": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_43": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.convcat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, s_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_83": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "add_34": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_74": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_37": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "source/test/module_util.py": {
        "torch": {
            "meshgrid_68": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, H)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "vgrid_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vgrid_x, vgrid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid_scaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((vgrid_x, vgrid_y), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "interp_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "source/test/test.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "opt.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/train/model.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_39": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_43": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.convcat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, s_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_83": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "add_34": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_74": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(out, s_out)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(out))))",
                            "Call"
                        ],
                        [
                            "torch.add(out, inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, s_out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.convcat(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(out))",
                            "Call"
                        ],
                        [
                            "self.output(self.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_37": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ],
                        [
                            "s_inputs",
                            "Name"
                        ],
                        [
                            "self.conv2(self.relu(self.conv1(self.relu(s_out))))",
                            "Call"
                        ],
                        [
                            "torch.add(s_out, s_inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ],
                        [
                            "self.input(self.relu(self.bn(p)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "source/train/module_util.py": {
        "torch": {
            "meshgrid_68": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, H)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "vgrid_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vgrid_x, vgrid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid_scaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((vgrid_x, vgrid_y), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "interp_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "source/train/pytorch_ssim.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "variable": {
                    "value": "mu1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "mu2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "source/train/train.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mDataset(opt.images_dir, opt.parts_dir, opt.labels_dir, opt.num_channels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.conv1.parameters()}, {'params': model.conv2.parameters()}, {'params': model.input.parameters()}, {'params': model.relu.parameters()}, {'params': model.bn.parameters()}, {'params': model.output.parameters(), 'lr': opt.lr * 0.1}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.conv1.parameters()}, {'params': model.conv2.parameters()}, {'params': model.convcat.parameters()}, {'params': model.input.parameters()}, {'params': model.relu.parameters()}, {'params': model.bn.parameters()}, {'params': model.output.parameters(), 'lr': opt.lr * 0.1}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "{'epoch': epoch + opt.start, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': epoch_losses.avg}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.outputs_dir, '{}_epoch_{}.pth'.format(opt.arch, epoch + opt.start))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_96": {
                "f": {
                    "value": "opt.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "opt.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}