{
    "walle/Embedding.py": {
        "sklearn": {
            "StandardScaler_334": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TSNE_339": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "silhouette_score_343": {
                "variable": {
                    "value": "silhouette_valid_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "embeddings.reshape(embeddings.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "df_emb.event_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "silhouette_score_346": {
                "X": {
                    "value": "df_emb[['X', 'Y']]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "df_emb.event_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/common.py": {
        "sklearn": {
            "TSNE_301": {
                "variable": {
                    "value": "tsne_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "silhouette_score_304": {
                "variable": {
                    "value": "silhouette",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "embed.reshape(embed.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "df.event_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "silhouette_score_308": {
                "X": {
                    "value": "df[['X', 'Y']]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "df.event_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_204": {
                "variable": {
                    "value": "optimizer_classif",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, classif_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "weak_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "weak_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_weak, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "weak_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(weak_embed.df.event_labels, classes, n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "valid_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_valid, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(valid_embed.df.event_labels, classes, n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "test_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(test_embed.df.event_labels, classes, n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "weak_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "weak_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_weak, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "valid_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_valid, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "test_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "eval_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_eval_embed, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(eval_embed.df.event_labels, classes, n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "eval_embed_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_eval_embed, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "walle/DataLoad.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "walle/evaluation_measures.py": {
        "torch": {
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/main_classifier.py": {
        "torch": {
            "NLLLoss_206": {
                "variable": {
                    "value": "criterion_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "train_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(train_weak_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(train_set.df.event_labels, classes, round(cfg.batch_size / len(classes)))",
                            "Call"
                        ],
                        [
                            "train_load.batch_sampler",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(train_weak_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "test_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(test_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(test_set.df.event_labels, classes, round(cfg.batch_size / len(classes)))",
                            "Call"
                        ],
                        [
                            "test_load.batch_sampler",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "test_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(test_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "valid_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(valid_weak_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(valid_set.df.event_labels, classes, round(cfg.batch_size / len(classes)))",
                            "Call"
                        ],
                        [
                            "valid_load.batch_sampler",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "valid_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(valid_weak_df, many_hot_encoder.encode_weak, Compose(list_trans_fr), return_indexes=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "walle/main_proto.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "prot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proto_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "quer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_433": {
                "variable": {
                    "value": "test_embed_loader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed1, many_hot_encoder.encode_weak, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size_classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_444": {
                "variable": {
                    "value": "test_embed_loader10",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed10, many_hot_encoder.encode_weak, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size_classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "lder",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_121": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_args.train_way",
                            "Attribute"
                        ],
                        [
                            "f_args.test_way",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cross_entropy_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euclidean_metric(quer, prot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(way).repeat(f_args.query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/main_triplet.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "triplet_model(inputs_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_130": {
                "variable": {
                    "value": "outputs_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "outputs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_584": {
                "variable": {
                    "value": "valid_triplets_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "weak_valid_dl_triplet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDfTripletLabeledExhaustif(valid_weak_df_fr, encode_function_label, transform=Compose(trans_fr_sc_embed), number=cfg.number_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_588": {
                "variable": {
                    "value": "test_triplets_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDfTripletLabeledExhaustif(test_df_fr, encode_function_label, transform=Compose(trans_fr_sc_embed), number=min(cfg.number_test, len(test_df_fr.dropna())))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_792": {
                "variable": {
                    "value": "test_embed_loader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed1, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_803": {
                "variable": {
                    "value": "test_embed_loader10",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_embed10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoadDf(df_test_embed10, encode_function_label, transform=Compose(trans_embedding))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_classif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size_classif",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_563": {
                "variable": {
                    "value": "triplet_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset_triplet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weak_train_dl_triplet",
                            "variable"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiStreamBatchSampler(concat_dataset_triplet, batch_sizes)",
                            "Call"
                        ],
                        [
                            "CategoriesSampler(train_weak_df_fr.event_labels, classes, n_per_class=n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_577": {
                "variable": {
                    "value": "triplet_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset_triplet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weak_train_dl_triplet",
                            "variable"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiStreamBatchSampler(concat_dataset_triplet, batch_sizes)",
                            "Call"
                        ],
                        [
                            "CategoriesSampler(train_weak_df_fr.event_labels, classes, n_per_class=n_per_class)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_201": {
                "variable": {
                    "value": "loss_triplet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margin + dist_pos - dist_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_230": {
                "input": {
                    "value": "d_neg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_249": {
                "variable": {
                    "value": "dist_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(outputs, outputs_neg)",
                            "Call"
                        ],
                        [
                            "torch.min(dist_neg, dist_neg_s)",
                            "Call"
                        ],
                        [
                            "dist(outputs, outputs_neg)",
                            "Call"
                        ],
                        [
                            "dist(outputs, final_embed_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_273": {
                "variable": {
                    "value": "rolled_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(out_pos, 0)",
                            "Call"
                        ],
                        [
                            "model_triplet(inputs_pos)",
                            "Call"
                        ],
                        [
                            "model_triplet(inputs_pos)",
                            "Call"
                        ],
                        [
                            "outputs_pos.view(outputs.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "fr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames_in_sec",
                            "variable"
                        ],
                        [
                            "'seg'",
                            "str"
                        ],
                        [
                            "'unknown'",
                            "str"
                        ],
                        [
                            "range(1, outputs.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_274": {
                "variable": {
                    "value": "rolled_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(out_neg, 0)",
                            "Call"
                        ],
                        [
                            "model_triplet(inputs_neg)",
                            "Call"
                        ],
                        [
                            "model_triplet(inputs_neg)",
                            "Call"
                        ],
                        [
                            "outputs_neg.view(outputs.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "fr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames_in_sec",
                            "variable"
                        ],
                        [
                            "'seg'",
                            "str"
                        ],
                        [
                            "'unknown'",
                            "str"
                        ],
                        [
                            "range(1, outputs.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_231": {
                "input": {
                    "value": "d_neg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_309": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margin + dist_pos - dist_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_309": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/models/CNN.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "dic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.cnn.state_dict(destination=destination, prefix=prefix, keep_vars=keep_vars)",
                            "Call"
                        ],
                        [
                            "{'cnn': self.cnn.state_dict(), 'linear': self.linear.state_dict()}",
                            "Dict"
                        ],
                        [
                            "self.cnn.state_dict()",
                            "Call"
                        ],
                        [
                            "{'cnn': self.cnn.state_dict(), 'linear': self.linear.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_82": {
                "variable": {
                    "value": "dic",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in_channel if ind == 0 else nb_filters[ind - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_filters[ind]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "pooling[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "x.view(bs * mul, feat, self.frames, mel)",
                            "Call"
                        ],
                        [
                            "self.cnn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1, self.linear_in)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.mean(-2)",
                            "Call"
                        ],
                        [
                            "x.view((bs, mul) + x.shape[1:])",
                            "Call"
                        ],
                        [
                            "x.mean(1)",
                            "Call"
                        ],
                        [
                            "(nn.functional.softmax(x, dim=-2) * x).sum(-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_filters[ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "linear_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "p": {
                    "value": "linear_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "x.view(bs * mul, feat, self.frames, mel)",
                            "Call"
                        ],
                        [
                            "self.cnn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1, self.linear_in)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.mean(-2)",
                            "Call"
                        ],
                        [
                            "x.view((bs, mul) + x.shape[1:])",
                            "Call"
                        ],
                        [
                            "x.mean(1)",
                            "Call"
                        ],
                        [
                            "(nn.functional.softmax(x, dim=-2) * x).sum(-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "walle/models/CombineModel.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_33": {
                "obj": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "walle/models/FullyConnected.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_49": {
                "obj": {
                    "value": "self.network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "p": {
                    "value": "dropout_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/models/GLU.py": {
        "torch": {
            "Sigmoid_7": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_8": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "walle/triplettrainer.py": {
        "torch": {
            "BCELoss_18": {
                "variable": {
                    "value": "criterion_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "walle/utils/Samplers.py": {
        "torch": {}
    },
    "walle/utils/Scaler.py": {
        "torch": {}
    },
    "walle/utils/Transforms.py": {
        "torch": {
            "from_numpy_126": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "np.log(sample.T + self.added_value).T",
                            "Attribute"
                        ],
                        [
                            "sample.unsqueeze(self.axis)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "pad_trunc_seq(sample, self.nb_frames)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sample).float()",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "sample.flatten(self.axis)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(self.view_shape)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ],
                        [
                            "list(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "sample[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "walle/utils/utils.py": {
        "torch": {
            "load_615": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_665": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-((a - b) ** 2).sum(dim=2)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_666": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.state[p]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_435": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.state[p]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "numel_650": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_521": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_523": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_526": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_540": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_649": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}