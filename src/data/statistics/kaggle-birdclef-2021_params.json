{
    "train/lib/net/layer_np.py": {
        "sklearn": {
            "roc_auc_score_111": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ],
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ],
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_140": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1)",
                            "Call"
                        ],
                        [
                            "truth.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ],
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ],
                        [
                            "probability.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/lib/include_torch.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train/lib/net/lookahead.py": {
        "torch": {}
    },
    "train/lib/net/radam.py": {
        "torch": {
            "zeros_like_43": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_44": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/lib/net/sync_bn/functional/_csrc.py": {
        "torch": {
            "load_45": {
                "name": {
                    "value": "ext_lib",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "sources",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "main_file + sources_cpu",
                            "BinOp"
                        ],
                        [
                            "[os.path.join(this_dir, s) for s in sources]",
                            "ListComp"
                        ]
                    ]
                },
                "extra_cflags": {
                    "value": "extra_cflags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "['-O3', '-DWITH_CUDA']",
                            "List"
                        ]
                    ]
                },
                "extra_include_paths": {
                    "value": "extra_include_paths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[this_dir]",
                            "List"
                        ]
                    ]
                },
                "extra_cuda_cflags": {
                    "value": "extra_cuda_cflags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "['--expt-extended-lambda']",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/lib/net/sync_bn/functional/syncbn.py": {
        "torch": {
            "reduce_add_111": {
                "variable": {
                    "value": "sum_dz",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sum_dzs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_add_112": {
                "variable": {
                    "value": "sum_dz_xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sum_dz_xhats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_116": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sum_dz, sum_dz_xhat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_add_62": {
                "variable": {
                    "value": "xsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xsums",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_add_63": {
                "variable": {
                    "value": "xsqsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xsqsums",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_69": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean, uvar, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/lib/net/sync_bn/nn/syncbn.py": {
        "torch": {
            "batch_norm_72": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "compute_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not self.freezed and self.training and self.track_running_stats",
                            "BoolOp"
                        ],
                        [
                            "not self.freezed and self.training and self.track_running_stats",
                            "BoolOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}