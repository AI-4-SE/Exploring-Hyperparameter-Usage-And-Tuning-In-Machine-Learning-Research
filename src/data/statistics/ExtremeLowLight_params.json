{
    "ExtremeLowLight/cal_weight.py": {
        "tensorflow": {
            "rgb_to_grayscale_7": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_8": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_10": {
                "variable": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_ops_impl._fspecial_gauss(size=fsize, sigma=fsigma)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_11": {
                "variable": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(input=Image_Gray, filter=kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.abs(Laplacian_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_16": {
                "variable": {
                    "value": "(_, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_17": {
                "variable": {
                    "value": "svar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "well_exposedness(output_Batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_42": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_49": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "Image_well_exposedness",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Image_well_exposedness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guass_culve(Image_Gray, mu=0.5, sig=0.2) * groundTruthImageWeight",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(Image_well_exposedness)",
                            "Call"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_57": {
                "variable": {
                    "value": "image_filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_ops_impl._fspecial_gauss(size=fsize, sigma=fsigma)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "-0.5 * (x - mu) * (x - mu) / (sig * sig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "Image_guass_cu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guass_culve(Image)",
                            "Call"
                        ],
                        [
                            "guass_culve(Image_Gray, mu=0.5, sig=0.1)",
                            "Call"
                        ],
                        [
                            "gauss_filter(Image_guass_cu, fsize=9, fsigma=5.0)",
                            "Call"
                        ],
                        [
                            "Image_guass_cu / tf.reduce_sum(Image_guass_cu) * 100.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ExtremeLowLight/input_channel.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight/mainNet.py": {
        "tensorflow": {
            "concat_24": {
                "variable": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_154": {
                "variable": {
                    "value": "var_N",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "auto_norm_",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[var, id]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'weight'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_notes, out_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'bias'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "core_01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m41",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m41')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "core_02",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m42",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m42')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "core_03",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m43",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m43')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "deconv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([pool_size, pool_size, output_channels, in_channels], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_198": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "deconv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([pool_size, pool_size, output_channels, in_channels], stddev=0.02), trainable=pa.train_u_net)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.shape(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_size, pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_200": {
                "variable": {
                    "value": "deconv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[deconv, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_218": {
                "variable": {
                    "value": "out7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resNetBlock(out5, 32, 'out4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_33": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_34": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_35": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_36": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_37": {
                "variable": {
                    "value": "convp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_40": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv1_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_41": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv1_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_44": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_45": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_48": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_49": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_52": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_53": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool3, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv4_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv4, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_56": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv5_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_57": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool4, 512, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv5_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv5, 512, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_60": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv5, conv4, 256, 512)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv6_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_61": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up6, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv6_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv6, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv6_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_64": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv6, conv3, 128, 256)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv7_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_65": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up7, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv7_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv7, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv7_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_68": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv7, conv2, 64, 128)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv8_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_69": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up8, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv8_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv8, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv8_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_72": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv8, conv1, 32, 64)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv9_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_73": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv9_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_74": {
                "variable": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv10",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depth_to_space_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(conv9, 12, [1, 1], rate=1, activation_fn=None, trainable=pa.train_u_net, scope='g_conv10')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convolution_107": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_BatchRS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(inp_concated, (512, 512))",
                            "Call"
                        ],
                        [
                            "inp_concated",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_109": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(input_BatchRS, 16, [3, 3], stride=4, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_111": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c1, 16, [3, 3], stride=4, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_113": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c2, 32, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_115": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c3, 32, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "c5_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c4, 4, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(c5)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_190": {
                "x": {
                    "value": "x * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_233": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "X_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_253": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_260": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_267": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "X_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                }
            },
            "conv2d_275": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_282": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_289": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_296": {
                "variable": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "slim.conv2d(x_shortcut, output_channels, [1, 1], rate=1, normalizer_fn=None, normalizer_params=None, activation_fn=None, scope='convResNetBottleNeckBlock_shortcut')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_303": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "slim.conv2d(x_shortcut, output_channels, [1, 1], rate=1, normalizer_fn=None, normalizer_params=None, activation_fn=None, scope='convResNetBottleNeckBlock_shortcut')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_304": {
                "variable": {
                    "value": "add_result",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(x_shortcut, conv3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_327": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_weight'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_333": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[output_channels], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bias'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_348": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_weight'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_351": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[output_channels], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bias'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_14": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "shape": {
                    "value": "[1, h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_20": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_21": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_22": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "prefix_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "quality_pri_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_88": {
                "shape": {
                    "value": "[1, h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_89": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "brightness_predict_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_103": {
                "variable": {
                    "value": "input_BatchRS",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t], 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + 'weight', shape=[in_notes, out_nodes], initializer=initializer_, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_197": {
                "shape": {
                    "value": "[pool_size, pool_size, output_channels, in_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_198": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_325": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'default'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_338": {
                "features": {
                    "value": "tf.nn.conv2d(input_tensor, weight, (1, 1, 1, 1), padding='SAME', name=name + '_conv') + bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_344": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'default'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_357": {
                "features": {
                    "value": "tf.nn.conv2d(input_tensor, weight, (1, 1, 1, 1), padding='SAME', name=name + '_conv') + bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_193": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_327": {
                "shape": {
                    "value": "[kernel_size, kernel_size, input_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_333": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_351": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_339": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32), trainable=True, name=name + '_weight')",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]), trainable=True, name=name + '_weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_348": {
                "value": {
                    "value": "[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_358": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32), trainable=True, name=name + '_weight')",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]), trainable=True, name=name + '_weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c4, 4, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ExtremeLowLight/msssim.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight/ssim.py": {
        "tensorflow": {
            "maximum_16": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_17": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_19": {
                "variable": {
                    "value": "loss_SSIM_Graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_SSIM_Graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.image.ssim_multiscale(img1, img2, max_val=1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_SSIM_Graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "ssim_multiscale_18": {
                "img1": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "img2": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ExtremeLowLight/testWhole.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight/threshhold.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight/train_step1.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight/train_step2.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight_new_untested/cal_weight.py": {
        "tensorflow": {
            "rgb_to_grayscale_7": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_8": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_10": {
                "variable": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(Image)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_ops_impl._fspecial_gauss(size=fsize, sigma=fsigma)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_11": {
                "variable": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Laplacian_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(input=Image_Gray, filter=kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.abs(Laplacian_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_16": {
                "variable": {
                    "value": "(_, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_17": {
                "variable": {
                    "value": "svar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "well_exposedness(output_Batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_42": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_49": {
                "variable": {
                    "value": "Image_Gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "Image_well_exposedness",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Image_well_exposedness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guass_culve(Image_Gray, mu=0.5, sig=0.2) * groundTruthImageWeight",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(Image_well_exposedness)",
                            "Call"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_57": {
                "variable": {
                    "value": "image_filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[[0]], [[1]], [[0]]], [[[1]], [[-4]], [[1]]], [[[0]], [[1]], [[0]]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_ops_impl._fspecial_gauss(size=fsize, sigma=fsigma)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "-0.5 * (x - mu) * (x - mu) / (sig * sig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "Image_guass_cu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guass_culve(Image)",
                            "Call"
                        ],
                        [
                            "guass_culve(Image_Gray, mu=0.5, sig=0.1)",
                            "Call"
                        ],
                        [
                            "gauss_filter(Image_guass_cu, fsize=9, fsigma=5.0)",
                            "Call"
                        ],
                        [
                            "Image_guass_cu / tf.reduce_sum(Image_guass_cu) * 100.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ExtremeLowLight_new_untested/input_channel.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight_new_untested/mainNet.py": {
        "tensorflow": {
            "concat_24": {
                "variable": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_159": {
                "variable": {
                    "value": "var_N",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "auto_norm_",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[var, id]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'weight'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_notes, out_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_172": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'bias'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "core_01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m41",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m41')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "core_02",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m42",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m42')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "core_03",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m43",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_fc(m3, 128, 16, relu_free=False, name='m43')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_202": {
                "variable": {
                    "value": "deconv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([pool_size, pool_size, output_channels, in_channels], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_203": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "deconv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([pool_size, pool_size, output_channels, in_channels], stddev=0.02), trainable=pa.train_u_net)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.shape(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_size, pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "deconv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[deconv, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "out7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resNetBlock(out5, 32, 'out4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_33": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_34": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_35": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_36": {
                "variable": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_37": {
                "variable": {
                    "value": "convp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(inp_concated, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 16, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_2')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_3')",
                            "Call"
                        ],
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv0_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_40": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(conv0, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_prefix, scope='g_conv0_5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv1_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_41": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv1_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_44": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_45": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_48": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_49": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_52": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_53": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool3, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv4_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv4, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_56": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv5_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_57": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool4, 512, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv5_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv5, 512, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_60": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv5, conv4, 256, 512)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv6_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_61": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up6, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv6_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv6, 256, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv6_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_64": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv6, conv3, 128, 256)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv7_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_65": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up7, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv7_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv7, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv7_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_68": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv7, conv2, 64, 128)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv8_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_69": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up8, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv8_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv8, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv8_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_72": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_and_concat(conv8, conv1, 32, 64)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv9_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_73": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv9_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convolution_74": {
                "variable": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(up9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv9, 32, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_u_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g_conv10",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depth_to_space_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(conv9, 12, [1, 1], rate=1, activation_fn=None, trainable=pa.train_u_net, scope='g_conv10')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convolution_107": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_BatchRS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(inp_concated, (512, 512))",
                            "Call"
                        ],
                        [
                            "inp_concated",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_109": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(input_BatchRS, 16, [3, 3], stride=4, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_111": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c1, 16, [3, 3], stride=4, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_113": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c2, 32, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_115": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c3, 32, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "pa.train_brightness_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "c5_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c4, 4, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(c5)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_195": {
                "x": {
                    "value": "x * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_232": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_238": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_244": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "X_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                }
            },
            "conv2d_251": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_258": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "resNetBottleNeckBlock_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_272": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "X_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                }
            },
            "conv2d_280": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_287": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(convp1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_4')",
                            "Call"
                        ],
                        [
                            "convolution(conv1, 32, [3, 3], activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv1_5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, bottleNeckChannels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "bottleNeckChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_294": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool1, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv2, 64, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='resNetBottleNeckBlock_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, bottleNeckChannels, [3, 3], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=lrelu, scope='convResNetBottleNeckBlock_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "batch_norm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fused': True, 'is_training': True}",
                            "Dict"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_301": {
                "variable": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "slim.conv2d(x_shortcut, output_channels, [1, 1], rate=1, normalizer_fn=None, normalizer_params=None, activation_fn=None, scope='convResNetBottleNeckBlock_shortcut')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "convResNetBottleNeckBlock_shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_308": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "slim.conv2d(x_shortcut, output_channels, [1, 1], rate=1, normalizer_fn=None, normalizer_params=None, activation_fn=None, scope='convResNetBottleNeckBlock_shortcut')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(pool2, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_1')",
                            "Call"
                        ],
                        [
                            "convolution(conv3, 128, [3, 3], rate=1, activation_fn=lrelu, trainable=pa.train_u_net, scope='g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='resNetBottleNeckBlock_3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, output_channels, [1, 1], rate=1, normalizer_fn=tf.contrib.layers.batch_norm, normalizer_params=batch_norm_params, activation_fn=None, scope='convResNetBottleNeckBlock_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_309": {
                "variable": {
                    "value": "add_result",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(x_shortcut, conv3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_332": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_weight'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_338": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[output_channels], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bias'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_353": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_weight'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_356": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[output_channels], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bias'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_14": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "shape": {
                    "value": "[1, h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_20": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_21": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_22": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "prefix_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "quality_pri_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "inp_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_88": {
                "shape": {
                    "value": "[1, h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_89": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "brightness_predict_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_103": {
                "variable": {
                    "value": "input_BatchRS",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "inp_concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t, layer_gt_t], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([inp_img_normed, layer_inp_wb, layer_inp_iso, layer_inp_t], 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + 'weight', shape=[in_notes, out_nodes], initializer=initializer_, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_202": {
                "shape": {
                    "value": "[pool_size, pool_size, output_channels, in_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "block_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_330": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'default'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_343": {
                "features": {
                    "value": "tf.nn.conv2d(input_tensor, weight, (1, 1, 1, 1), padding='SAME', name=name + '_conv') + bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_349": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'default'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_362": {
                "features": {
                    "value": "tf.nn.conv2d(input_tensor, weight, (1, 1, 1, 1), padding='SAME', name=name + '_conv') + bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_relu'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_198": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_332": {
                "shape": {
                    "value": "[kernel_size, kernel_size, input_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_338": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_356": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_344": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32), trainable=True, name=name + '_weight')",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]), trainable=True, name=name + '_weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_353": {
                "value": {
                    "value": "[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_363": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape=[kernel_size, kernel_size, input_channels, output_channels], mean=0, stddev=1, dtype=tf.float32), trainable=True, name=name + '_weight')",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=tf.constant(value=[[[[0, 0, B], [0, 0.5 * G, 0], [0, 0.5 * G, 0], [R, 0, 0]]]]), trainable=True, name=name + '_weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(c4, 4, [3, 3], stride=2, activation_fn=lrelu, trainable=pa.train_brightness_net)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ExtremeLowLight_new_untested/ssim.py": {
        "tensorflow": {
            "maximum_16": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_17": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_19": {
                "variable": {
                    "value": "loss_SSIM_Graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_SSIM_Graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.image.ssim_multiscale(img1, img2, max_val=1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_SSIM_Graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "ssim_multiscale_18": {
                "img1": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(img1, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(img1, 1)",
                            "Call"
                        ]
                    ]
                },
                "img2": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ExtremeLowLight_new_untested/test_whole.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight_new_untested/train_step1.py": {
        "tensorflow": {}
    },
    "ExtremeLowLight_new_untested/train_step2.py": {
        "tensorflow": {}
    }
}