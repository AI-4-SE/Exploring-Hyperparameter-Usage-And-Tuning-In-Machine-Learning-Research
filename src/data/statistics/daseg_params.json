{
    "daseg/metrics.py": {
        "sklearn": {
            "f1_score_368": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "flatten_true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_true_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "flatten_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_pred_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_369": {
                "variable": {
                    "value": "micro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "flatten_true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_true_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "flatten_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_pred_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_391": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "flatten_true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_true_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "flatten_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_pred_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_392": {
                "variable": {
                    "value": "micro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "flatten_true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_true_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "flatten_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flatten_pred_labels + l",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_34": {
                "y_true": {
                    "value": "fl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(flatten(true_labels))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(flatten(predictions))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_35": {
                "y_true": {
                    "value": "fl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(flatten(true_labels))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(flatten(predictions))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_43": {
                "y_true": {
                    "value": "fl_common_I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mapping.get(l, l) for l in fl]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fp_common_I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mapping.get(l, l) for l in fp]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_44": {
                "y_true": {
                    "value": "fl_common_I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mapping.get(l, l) for l in fl]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fp_common_I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mapping.get(l, l) for l in fp]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_18": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "daseg/dataloaders/transformers.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_109": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns, windows_if_exceeds_max_length=windows_if_exceeds_max_length)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "RandomSampler(dataset) if train else SequentialSampler(dataset)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "partial(truncate_padding_collate_fn, padding_at_start=padding_at_start)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "[sample[i].unsqueeze(0) for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_117": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns, windows_if_exceeds_max_length=windows_if_exceeds_max_length)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_117": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns, windows_if_exceeds_max_length=windows_if_exceeds_max_length)",
                            "Call"
                        ],
                        [
                            "to_dataset(corpus=corpus, tokenizer=tokenizer, model_type=model_type, labels=labels, max_seq_length=max_seq_length, use_joint_coding=use_joint_coding, use_turns=use_turns)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "daseg/dataloaders/turns.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[entry[0] + [TEXT_PAD_ID] * (max_len - length) for (entry, length) in zip(batch, lengths)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[entry[1] + [LABEL_PAD_ID] * (max_len - length) for (entry, length) in zip(batch, lengths)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/bigru.py": {
        "torch": {
            "Embedding_34": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_35": {
                "variable": {
                    "value": "self.utterance_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "gru_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * gru_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.labels_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "1.0 / (torch.tensor([label_frequencies[key] for key in labels], dtype=torch.float32) / sum(label_frequencies.values()))",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "loss_reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_67": {
                "variable": {
                    "value": "packed_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(word_indices)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "text_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_73": {
                "variable": {
                    "value": "(gru_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_gru_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.utterance_gru(packed_embedded)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_163": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_164": {
                "variable": {
                    "value": "sched",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(self.parameters(), lr=0.001, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[label_frequencies[key] for key in labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.weight_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/bigru_inference.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SingleTurnDataset(dataset, word2idx=self.model.vocab, tag2idx=self.model.labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "padding_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/longformer_model.py": {
        "torch": {
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_108": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/transformer_model.py": {
        "torch": {
            "load_63": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/transformer_pl.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "daseg/models/weight_drop.py": {
        "torch": {
            "dropout_20": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "module.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, name_w)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(raw_w, p=dropout, training=module.training)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}