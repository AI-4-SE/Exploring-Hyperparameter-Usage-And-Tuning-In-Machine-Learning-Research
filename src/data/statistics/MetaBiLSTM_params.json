{
    "src/meta_bilstm/utils/preprocessing.py": {
        "sklearn": {
            "train_test_split_34": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/meta_wrapper.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "wrapper.meta_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'meta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_22": {
                "variable": {
                    "value": "wrapper.word_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'word.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "wrapper.char_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'char.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "word_meta_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[char_encodings, word_encodings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_44": {
                "variable": {
                    "value": "word_meta_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "self.char_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'char.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "self.word_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'word.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "self.meta_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'meta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/models/char_model.py": {
        "torch": {
            "Embedding_10": {
                "variable": {
                    "value": "self.emb_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_34": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_layer.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_proj_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_proj_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_proj_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_51": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layer(inds)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_58": {
                "variable": {
                    "value": "(output, lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_proj(self.relu(word_encodings))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_61": {
                "variable": {
                    "value": "padded_words",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_word_encodings(output, x)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn.get_expected_hidden_size(inp, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "[output[i][word_borders[i]][::2], output[i][word_borders[i]][1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/models/meta_model.py": {
        "torch": {
            "LSTM_16": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_proj_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_30": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_37": {
                "variable": {
                    "value": "(output, lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_proj(self.relu(output))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn.get_expected_hidden_size(inp, None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/meta_bilstm/models/word_model.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.emb_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_tensor, *[torch.zeros(1, emb_dim) for _ in range(new_words_count)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_123": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_layer.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_proj_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_proj_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_proj_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_141": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layer(inds)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_149": {
                "variable": {
                    "value": "(output, lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_proj(self.relu(word_encodings))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_105": {
                "tensors": {
                    "value": "list_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.FloatTensor([0] * 300), torch.FloatTensor([0] * 300)]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn.get_expected_hidden_size(inp, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/nn_utils/losses.py": {
        "torch": {
            "cross_entropy_7": {
                "input": {
                    "value": "inp[i, :lens[i], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[i][:lens[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/train_utils/trainer.py": {
        "torch": {
            "Adam_63": {
                "params": {
                    "value": "self.model.char_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "params": {
                    "value": "self.model.word_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "params": {
                    "value": "self.model.meta_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_69": {
                "optimizer": {
                    "value": "optimizers['char']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "scheduler_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scheduler_gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StepLR_70": {
                "optimizer": {
                    "value": "optimizers['word']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "scheduler_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scheduler_gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StepLR_71": {
                "optimizer": {
                    "value": "optimizers['meta']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "scheduler_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scheduler_gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/meta_bilstm/utils/dataset.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: _collate_fn(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_sequence_58": {
                "sequences": {
                    "value": "labels_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_51": {
                "sequences": {
                    "value": "word_idx_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_55": {
                "sequences": {
                    "value": "char_idx_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}