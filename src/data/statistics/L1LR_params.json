{
    "run_a1a.py": {
        "sklearn": {
            "load_svmlight_file_16": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_30": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_67": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_80": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "np.hstack((train_set_x, np.zeros((train_set_x.shape[0], 123 - train_set_x.shape[1]))))",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.08",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_a9a.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_30": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_67": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_70": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_81": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "np.hstack((test_set_x, np.zeros((test_set_x.shape[0], 123 - test_set_x.shape[1]))))",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_gisette.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_30": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_65": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_67": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_78": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_ijcnn1.py": {
        "sklearn": {
            "load_svmlight_file_18": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_31": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_68": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_70": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_81": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.005",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_leukemia.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_35": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_69": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_71": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_82": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1 / lam",
                    "type": "BinOp",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.5",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_liver.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_33": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_67": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_80": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_madelon.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_33": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_67": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_80": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_splice.py": {
        "sklearn": {
            "load_svmlight_file_17": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_30": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_svmlight_file_67": {
                "variable": {
                    "value": "(test_set_x, test_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}.t'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_80": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_itr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(test_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "abs(y_predict - y_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "script_ROC_all.py": {
        "sklearn": {
            "load_svmlight_file_83": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/a9a.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_96": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/a1a.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_108": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/leu.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_120": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/splice.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_132": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/ijcnn1.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_144": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/liver-disorders.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_curve_89": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_a9a[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_90": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_101": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_a1a[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_102": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_113": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_leu[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_114": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_125": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_splice[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_126": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_137": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_ijcnn1[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_138": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_149": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_liver[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_150": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "script_ROC_all8.py": {
        "sklearn": {
            "load_svmlight_file_85": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/leu.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_98": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/liver-disorders.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_111": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/madelon.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_124": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/splice.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_136": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/ijcnn1.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_149": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/a1a.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_162": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/a9a.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_svmlight_file_176": {
                "variable": {
                    "value": "(_, ytrue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "./datasets/gisette_scale.t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_curve_90": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_leu[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_91": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_103": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_liver[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_104": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_116": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_madelon[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_117": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_129": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_splice[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_130": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_141": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_ijcnn1[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_142": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_154": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_a1a[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_155": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_168": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_a9a[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_169": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_181": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytrue",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "score_gisette[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_182": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "script_init_params.py": {
        "sklearn": {
            "load_svmlight_file_13": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./datasets//splice'",
                            "str"
                        ]
                    ]
                }
            },
            "StandardScaler_28": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.07",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "script_lambda_convergence.py": {
        "sklearn": {
            "load_svmlight_file_13": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./datasets//madelon'",
                            "str"
                        ]
                    ]
                }
            },
            "StandardScaler_28": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.004",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "script_lambda_weights_norm.py": {
        "sklearn": {
            "load_svmlight_file_12": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./datasets//madelon'",
                            "str"
                        ]
                    ]
                }
            },
            "StandardScaler_27": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_52": {
                "variable": {
                    "value": "weights_norm1[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "model.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "script_lambda_weights_sparsity.py": {
        "sklearn": {
            "load_svmlight_file_13": {
                "variable": {
                    "value": "(train_set_x, train_set_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./datasets//{dataset_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "StandardScaler_28": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set_x.todense()",
                            "Call"
                        ],
                        [
                            "scaler.fit_transform(train_set_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_set_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model_LR_NN_PR.py": {
        "torch": {
            "clamp_6": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_12": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.mv(weight) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mv(w) + self.bias",
                            "BinOp"
                        ],
                        [
                            "x.mv(w) + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_16": {
                "input": {
                    "value": "y * torch.log(y_hat) + (1 - y) * torch.log(1 - y_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_16": {
                "input": {
                    "value": "weight - Pw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mv(w) + self.bias",
                            "BinOp"
                        ],
                        [
                            "x.mv(w) + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_16": {
                "input": {
                    "value": "1 - y_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}