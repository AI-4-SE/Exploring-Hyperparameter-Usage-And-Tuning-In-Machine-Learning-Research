{
    "algos/ewc.py": {
        "torch": {
            "log_softmax_45": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algos/gem.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "trainer.agem_mem_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainer.agem_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "mem_loader_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(trainer.config.agem_mem_batch_size, len(trainer.agem_mem))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_126": {
                "variable": {
                    "value": "new_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_cache_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "mem_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(mem)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_97": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_grad_vec - frac * mem_grad_vec",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(x).view(-1)",
                            "Call"
                        ],
                        [
                            "new_grad.to(trainer.config.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mem_grad_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "new_basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_basis).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_63": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_86": {
                "input": {
                    "value": "batch_grad_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mem_grad_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_93": {
                "input": {
                    "value": "mem_grad_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mem_grad_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_98": {
                "input": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(new_grad, mem_grad_vec)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "algos/ogd.py": {
        "torch": {
            "empty_127": {
                "variable": {
                    "value": "trainer.ogd_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "count_parameter(trainer.model)",
                            "Call"
                        ],
                        [
                            "count_parameter(trainer.model.linear)",
                            "Call"
                        ],
                        [
                            "count_parameter(trainer.model.linear) + count_parameter(trainer.model.conv)",
                            "BinOp"
                        ],
                        [
                            "count_parameter(trainer.model.linear)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "proj_basis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(vec, proj_basis)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "ogd_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainer.task_memory[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "task_ogd_basis_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mem.storage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "trainer.ogd_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[trainer.ogd_basis, task_ogd_basis_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_171": {
                "variable": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "main_vectors.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "additional_vectors[:, element]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_172": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "main_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((main_vectors, d.view(-1, 1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mv(main_vectors.t(), additional_vectors[:, element])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "main_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main_vectors, d.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_31": {
                "tensors": {
                    "value": "new_basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_basis).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pca_lowrank_101": {
                "variable": {
                    "value": "(_, _, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "new_basis_tensor.T.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "q": {
                    "value": "num_sample_per_task",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainer.config.memory_size",
                            "Attribute"
                        ],
                        [
                            "min(len(train_loader.dataset), num_sample_per_task)",
                            "Call"
                        ]
                    ]
                },
                "center": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "niter": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_64": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_66": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_lowrank_104": {
                "variable": {
                    "value": "(_, _, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "(new_basis_tensor.T + 0.0001 * new_basis_tensor.T.mean() * torch.rand(new_basis_tensor.T.size(0), new_basis_tensor.T.size(1))).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "q": {
                    "value": "num_sample_per_task",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainer.config.memory_size",
                            "Attribute"
                        ],
                        [
                            "min(len(train_loader.dataset), num_sample_per_task)",
                            "Call"
                        ]
                    ]
                },
                "niter": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "M": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "norm_173": {
                "input": {
                    "value": "additional_vectors[:, element] - pv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "new_basis_tensor.T.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "new_basis_tensor.T.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/base.py": {
        "torch": {
            "stack_76": {
                "variable": {
                    "value": "train_dataset.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_77": {
                "variable": {
                    "value": "train_dataset.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "train_dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "train_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_82": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_dataset.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/datasetGen.py": {
        "torch": {
            "randperm_33": {
                "variable": {
                    "value": "randseq",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.number_classes",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/wrapper.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "label_cache_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(dataset.root, str(type(dataset)) + '_' + str(len(dataset)) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_21": {
                "obj": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "label_cache_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(dataset.root, str(type(dataset)) + '_' + str(len(dataset)) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_22": {
                "input": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_splits[str(task_in + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/lenet.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, 20, 5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.n_feat, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.n_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_30": {
                "variable": {
                    "value": "self.ogd_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "count_parameter(self.model)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_117": {
                "variable": {
                    "value": "model.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parameters_to_vector_180": {
                "variable": {
                    "value": "cur_param",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.get_params_dict(last=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "model.last[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.last.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "vector_to_parameters_234": {
                "vec": {
                    "value": "cur_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.get_params_dict(last=False))",
                            "Call"
                        ],
                        [
                            "cur_param - self.config.lr * grad_vec",
                            "BinOp"
                        ],
                        [
                            "parameters_to_vector(self.get_params_dict(last=True, task_key=task_key))",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "self.get_params_dict(last=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_238": {
                "variable": {
                    "value": "cur_param",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.get_params_dict(last=True, task_key=task_key)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_241": {
                "vec": {
                    "value": "cur_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.get_params_dict(last=False))",
                            "Call"
                        ],
                        [
                            "cur_param - self.config.lr * grad_vec",
                            "BinOp"
                        ],
                        [
                            "parameters_to_vector(self.get_params_dict(last=True, task_key=task_key))",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "self.get_params_dict(last=True, task_key=task_key)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "mem_grad_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self.task_grad_memory.values())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "cat_136": {
                "tensors": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "dataset": {
                    "value": "val_dataset_splits[str(task_id)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}