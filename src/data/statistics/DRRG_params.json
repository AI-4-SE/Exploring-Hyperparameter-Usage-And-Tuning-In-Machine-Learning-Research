{
    "layers/GraphTest.py": {
        "sklearn": {},
        "torch": {
            "stack_118": {
                "variable": {
                    "value": "feat_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "adj_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "cid_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cid_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "h1id_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h1id_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "unique_ips_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unique_ips_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "pos_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PositionalEncoding(roi_map, self.pst_dim)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_feat).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((batch_id, roi_map.astype(np.float32, copy=False)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_map).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "node_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(roi_feat, pos_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "center_node",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[unique_nodes_map[center_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "one_hop_idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[unique_nodes_map[i] for i in one_hops]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat, torch.zeros(max_num_nodes - num_nodes, feat.shape[1]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(ips) for ips in hops_list])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(ips) for ips in hops_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "unique_ips",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ips",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "unique_ips",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unique_ips, torch.zeros(max_num_nodes - num_nodes, dtype=torch.long)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index",
                            "variable"
                        ],
                        [
                            "ips[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "ips",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "max_num_nodes - num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "feat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "max_num_nodes - num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/gcn_layer.py": {
        "sklearn": {},
        "torch": {
            "stack_121": {
                "variable": {
                    "value": "feat_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "adj_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "h1id_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h1id_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "gtmat_bth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gtmat_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "pos_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PositionalEncoding(geo_map, self.pst_dim)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_feat).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((batch_id, geo_map.astype(np.float32, copy=False)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_map).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "node_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(roi_feat, pos_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "one_hop_idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[unique_nodes_map[i] for i in one_hops]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat, torch.zeros(max_num_nodes - num_nodes, feat.shape[1]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(ips) for hops in hops_bin for ips in hops])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(ips) for hops in hops_bin for ips in hops])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_gt[ips]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index",
                            "variable"
                        ],
                        [
                            "ips[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "ips",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "max_num_nodes - num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "feat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "RoIlayer/__init__.py": {
        "torch": {}
    },
    "RoIlayer/rroi_align.py": {
        "torch": {
            "tensor_112": {
                "variable": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(im, 0).transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ma).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "iminfo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "iminfo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([im.shape[0], im.shape[1], 1])",
                            "Call"
                        ],
                        [
                            "torch.tensor(iminfo).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 1000, 1000, 200, 200, np.cos(-np.pi * 1 / 2), np.sin(-np.pi * 1 / 2)], [0, 1000, 1000, 200, 200, np.cos(np.pi * 1 / 4), np.sin(np.pi * 1 / 4)], [0, 1000, 1000, 200, 200, np.cos(np.pi * 0 / 2), np.sin(np.pi * 0 / 2)]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(rois).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_138": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rroi_pool(ma, rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_142": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(pooled)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(im, 0).transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ma).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "csrc/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dataload.py": {
        "torch": {
            "from_numpy_256": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(path)",
                            "Call"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).float()",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(img.shape[:2], np.uint8)",
                            "Call"
                        ],
                        [
                            "np.clip(train_mask, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "tr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tr_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(img.shape[:2], np.uint8)",
                            "Call"
                        ],
                        [
                            "np.clip(tr_mask, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tr_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_259": {
                "variable": {
                    "value": "tcl_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tcl_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((image.shape[0], image.shape[1], 2), np.uint8)",
                            "Call"
                        ],
                        [
                            "np.clip(tcl_mask, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tcl_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "radius_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "radius_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((image.shape[0], image.shape[1], 2), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(radius_map).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_261": {
                "variable": {
                    "value": "sin_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sin_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(image.shape[:2], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sin_map).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "cos_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cos_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(image.shape[:2], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cos_map).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "gt_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((cfg.max_roi, rpn_roi.shape[1]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_roi).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/deploy.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeployDataset(image_root='data/total-text/Images/Train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_TextGraph.py": {
        "torch": {
            "DataLoader_156": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TotalText(data_root='data/total-text-mat', ignore_list=None, is_training=False, transform=BaseTransform(size=cfg.test_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Ctw1500Text(data_root='data/ctw1500', is_training=False, transform=BaseTransform(size=cfg.test_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Icdar15Text(data_root='data/Icdar2015', is_training=False, transform=BaseTransform(size=cfg.test_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Mlt2017Text(data_root='data/MLT2017', is_training=False, transform=BaseTransform(size=cfg.test_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "TD500Text(data_root='data/TD500', is_training=False, transform=BaseTransform(size=cfg.test_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "layers/GraphConv.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_35": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/NodePool.py": {
        "torch": {
            "arange_36": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x - stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "x + stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y - stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "y + stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_38": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y - stride, y + stride, step=1, dtype=torch.int)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x - stride, x + stride, step=1, dtype=torch.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_41": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat[:, index[:, 1], index[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[p1, p2, p3, p4, c0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "rois.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers/gcn.py": {
        "torch": {
            "bmm_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_dim * 2, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, agg_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnd,df->bnf",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(cat_feats, self.weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "edge_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hop_idcs.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_59": {
                "num_parameters": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/utils.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.dot(d_inv).transpose().dot(d_inv)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(G)",
                            "Call"
                        ],
                        [
                            "A.div(D)",
                            "Call"
                        ],
                        [
                            "D - A",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(A)",
                            "Call"
                        ],
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(A)",
                            "Call"
                        ],
                        [
                            "A + np.eye(A.shape[0])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "network/loss.py": {
        "torch": {
            "topk_26": {
                "variable": {
                    "value": "(loss_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(predict[neg], target[neg], reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(predict[neg], target[neg], reduction='none')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "n_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(int(neg.float().sum().item()), int(negative_ratio * n_pos.float()))",
                            "Call"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "cross_entropy_48": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_data[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_data[1].view(-1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_72": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / (sin_pred ** 2 + cos_pred ** 2 + 0.0001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "loss_tcl",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "loss_radii",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "loss_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "loss_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_19": {
                "variable": {
                    "value": "loss_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_20": {
                "variable": {
                    "value": "loss_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict[neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "loss_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_24": {
                "variable": {
                    "value": "loss_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict[neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_33": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_95": {
                "variable": {
                    "value": "loss_tcl_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tcl_pred[tr_train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tcl_mask[tr_train_mask].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_96": {
                "variable": {
                    "value": "loss_tcl_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tcl_pred[tr_neg_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tcl_mask[tr_neg_mask].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_105": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_pred[tcl_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_107": {
                "variable": {
                    "value": "loss_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_pred[tcl_mask] / (top_map[tcl_mask] + 0.01)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(top_pred[tcl_mask]).float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_108": {
                "variable": {
                    "value": "loss_bot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bot_pred[tcl_mask] / (bot_map[tcl_mask] + 0.01)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(top_pred[tcl_mask]).float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "loss_radii",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_top + loss_bot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "less_one * 0.5 * diff ** 2 * sigma + torch.abs(torch.tensor(1.0) - less_one) * (diff - 0.5 / sigma)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss) if loss.numel() > 0 else torch.tensor(0.0)",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(gcn_pred, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "torch.tensor(1.0) - less_one",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "network/resnet.py": {
        "torch": {
            "randn_55": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_net.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/textnet.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_19": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[upsampled, shortcut]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([upsampled, shortcut], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([upsampled, shortcut], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "up5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv5(C5)",
                            "Call"
                        ],
                        [
                            "F.relu(up5)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_73": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.merge4(C4, up5)",
                            "Call"
                        ],
                        [
                            "F.relu(up4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.merge3(C3, up4)",
                            "Call"
                        ],
                        [
                            "F.relu(up3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.merge2(C2, up3)",
                            "Call"
                        ],
                        [
                            "F.relu(up2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, self.out_channel, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up1, predict_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up1, predict_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn_model(feat_batch, adj_batch, h1id_batch)",
                            "Call"
                        ],
                        [
                            "self.gcn_model(feat, adj, h1id)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/vgg.py": {
        "torch": {
            "randn_53": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(0, 5)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(5, 10)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(10, 17)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(17, 24)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.stage5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(24, 31)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(0, 7)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(7, 14)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(14, 24)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(24, 34)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.stage5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[base_net.features[layer] for layer in range(34, 44)]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "train_TextGraph.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TotalText(data_root='data/total-text-mat', ignore_list=None, is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "SynthText(data_root='data/SynthText', is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Ctw1500Text(data_root='data/ctw1500', is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Icdar15Text(data_root='data/Icdar2015', is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "Mlt2017Text(data_root='data/MLT2017', is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ],
                        [
                            "TD500Text(data_root='data/TD500', is_training=True, transform=Augmentation(size=cfg.input_size, mean=cfg.means, std=cfg.stds))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lr': lr, 'epoch': epoch, 'model': model.state_dict() if not cfg.mgpu else model.module.state_dict(), 'optimizer': optimzer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'textgraph_{}_{}.pth'.format(model.backbone_name, epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_191": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextNet(backbone=cfg.net, is_training=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(cfg.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_205": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "StepLR_212": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, momentum=moment)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/config.py": {
        "torch": {
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "util/option.py": {
        "torch": {
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_104": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_107": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "util/shedule.py": {
        "torch": {}
    },
    "util/visualize.py": {
        "torch": {}
    }
}