{
    "WaveBlocksPytorch/Camera.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.pixel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([pixel_size], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "paddedInput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(residualsLowerBorder[1].item()), int(residualsLowerBorder[1].item()), int(residualsLowerBorder[0].item()), int(residualsLowerBorder[0].item()))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "paddedShape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "paddedInput.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_63": {
                "variable": {
                    "value": "fm_view",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fm_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paddedInput.contiguous().view(paddedShape[0], paddedShape[1], out_h, MLShape[0], out_w, MLShape[1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(fm_view, padSize2, 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padSize2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 0, 1, 1, 0, 0, 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "final_image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_111": {
                "variable": {
                    "value": "volConvolved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realObject",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "psf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psf.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "psf.shape[2] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "realObject.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "[pixel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_48": {
                "input": {
                    "value": "1 + torch.floor((inputHalfShape.float() - MLhalfShape.float()) / MLShape.float())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "MLShape.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_85": {
                "variable": {
                    "value": "curr_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fm_view[:, :, :, x1, :, x2]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "curr_psf.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "MLShape[0].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "curr_psf.shape[3] // 2 + MLhalfShape[0].item()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "nDepths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputShape[1].item()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_95": {
                "variable": {
                    "value": "final_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.float32).to(input.device)",
                            "Call"
                        ],
                        [
                            "final_image.sum(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.add(final_image, curr_out_cropped)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "curr_out_cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_out[:, :, offsetLowBoundery[0]:offsetHighBoundery[0], offsetLowBoundery[1]:offsetHighBoundery[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_48": {
                "input": {
                    "value": "(inputHalfShape.float() - MLhalfShape.float()) / MLShape.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/DiffractiveElement.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.sampling_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([sampling_rate], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.apperture_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(apperture_size, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.metric_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sampling_rate * self.apperture_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.element_y_angle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(element_y_angle, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.center_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(center_offset, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.max_phase_shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(max_phase_shift, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.constant_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(max_phase_shift / 2, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.correction_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "correction_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "inShape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fieldIn.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.function_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.correction_img.detach() + self.function_img",
                            "BinOp"
                        ],
                        [
                            "self.function_img",
                            "Attribute"
                        ],
                        [
                            "function_img_padded[:, :, function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2:function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2 + function_img_size[-2], function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2:function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2 + function_img_size[-1]]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(self.function_img, kernel_size=ks, padding=[ks[0] // 2, ks[1] // 2])",
                            "Call"
                        ],
                        [
                            "function_img.unsqueeze(4).repeat(inShape[0], inShape[1], 1, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(function_img, tuple(padSize), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(function_img, size=field.shape[-3:-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.function_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.max_phase_shift / 2 - 0.5 + torch.rand((1, 1, apperture_size[0], apperture_size[1]), requires_grad=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_45": {
                "variable": {
                    "value": "function_img_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.correction_img.detach() + self.function_img",
                            "BinOp"
                        ],
                        [
                            "self.function_img",
                            "Attribute"
                        ],
                        [
                            "function_img_padded[:, :, function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2:function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2 + function_img_size[-2], function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2:function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2 + function_img_size[-1]]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(self.function_img, kernel_size=ks, padding=[ks[0] // 2, ks[1] // 2])",
                            "Call"
                        ],
                        [
                            "function_img.unsqueeze(4).repeat(inShape[0], inShape[1], 1, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(function_img, tuple(padSize), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(function_img, size=field.shape[-3:-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padOffsetSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [abs(int(self.center_offset[1]))] + 2 * [abs(int(self.center_offset[0]))]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_65": {
                "variable": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.function_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(1 / ratio_self_input), int(1 / ratio_self_input_y)]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "[ks[0] // 2, ks[1] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.correction_img.detach() + self.function_img",
                            "BinOp"
                        ],
                        [
                            "self.function_img",
                            "Attribute"
                        ],
                        [
                            "function_img_padded[:, :, function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2:function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2 + function_img_size[-2], function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2:function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2 + function_img_size[-1]]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(self.function_img, kernel_size=ks, padding=[ks[0] // 2, ks[1] // 2])",
                            "Call"
                        ],
                        [
                            "function_img.unsqueeze(4).repeat(inShape[0], inShape[1], 1, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(function_img, tuple(padSize), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(function_img, size=field.shape[-3:-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "field.shape[-3:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[sampling_rate]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "apperture_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "element_y_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "45.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "center_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "max_phase_shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 * math.pi",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "max_phase_shift / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_73": {
                "variable": {
                    "value": "field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fieldIn",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "tuple(padSize)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.correction_img.detach() + self.function_img",
                            "BinOp"
                        ],
                        [
                            "self.function_img",
                            "Attribute"
                        ],
                        [
                            "function_img_padded[:, :, function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2:function_img_padded.shape[-2] // 2 - int(self.center_offset[0]) - function_img_size[-2] // 2 + function_img_size[-2], function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2:function_img_padded.shape[-1] // 2 - int(self.center_offset[1]) - function_img_size[-1] // 2 + function_img_size[-1]]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(self.function_img, kernel_size=ks, padding=[ks[0] // 2, ks[1] // 2])",
                            "Call"
                        ],
                        [
                            "function_img.unsqueeze(4).repeat(inShape[0], inShape[1], 1, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(function_img, tuple(padSize), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(function_img, size=field.shape[-3:-1], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "tuple(padSize)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_63": {
                "input": {
                    "value": "torch.tensor(np.radians(self.element_y_angle.item()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_28": {
                "*size": {
                    "value": "(1, 1, apperture_size[0], apperture_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "np.radians(self.element_y_angle.item())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/Lens.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.focal_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([focal_length], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.sampling_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([sampling_rate], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.apperture_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([apperture_width], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.field_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([field_size], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.obj_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([obj_distance], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.img_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([img_distance], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.coefU1minus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ob.mulComplex(U1C1, torch.tensor([0.0, -1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_44": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, X) + torch.mul(Y, Y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f0 - rho",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "maskBW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.TransferFunctionIncoherent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask.unsqueeze(4).repeat((1, 1, 1, 1, 2)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "[focal_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "[sampling_rate]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[apperture_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[field_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[obj_distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[img_distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[0.0, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_44": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[0.0, optic_config.k * self.focal_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_90": {
                "input": {
                    "value": "self.TransferFunctionIncoherent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ob.batch_fftshift2d(torch.fft(ob.batch_ifftshift2d(u1), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_92": {
                "input": {
                    "value": "self.TransferFunctionIncoherent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ob.batch_ifftshift2d(torch.fft(ob.batch_fftshift2d(u1), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_90": {
                "input": {
                    "value": "ob.batch_ifftshift2d(u1)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_92": {
                "input": {
                    "value": "ob.batch_fftshift2d(u1)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/MicroLensArray.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.focal_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(focal_length, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.pixel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(pixel_size, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "self.image_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "self.block_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "block_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.block_separation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "block_separation",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "self.block_offset_odd_row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "block_offset_odd_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.psf_space_variant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ceil_32": {
                "variable": {
                    "value": "halfSize",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block_shape.float() / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_47": {
                "variable": {
                    "value": "nRepetitions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nRepetitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(torch.div(self.image_shape.float(), self.block_shape.float())) + 2",
                            "BinOp"
                        ],
                        [
                            "torch.add(nRepetitions, 1 - torch.remainder(nRepetitions, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - torch.remainder(nRepetitions, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.psf_space_variant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "psf",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "psf.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "psfShape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "psf.shape[0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_63": {
                "variable": {
                    "value": "halfPSFShape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psfShape[2:4].float() / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_65": {
                "variable": {
                    "value": "mlHalfShape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block_shape.float() / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_67": {
                "variable": {
                    "value": "mlaHalfShape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.MLA_image.shape[0:2]).float() / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "psfOut",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(psfShape[0], psfShape[1], mlHalfShape[0], mlHalfShape[1], psfShape[2], psfShape[3], 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.MLA_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.compute_full_image()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "data": {
                    "value": "focal_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "pixel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.block_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.compute_block_image()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_38": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "(torch.zeros(xL2norm.shape).unsqueeze(2), -self.optic_config.k * xL2norm.unsqueeze(2) / (2 * self.focal_length))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_46": {
                "input": {
                    "value": "torch.div(self.image_shape.float(), self.block_shape.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_46": {
                "input": {
                    "value": "self.image_shape.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.block_shape.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "remainder_47": {
                "input": {
                    "value": "nRepetitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(torch.div(self.image_shape.float(), self.block_shape.float())) + 2",
                            "BinOp"
                        ],
                        [
                            "torch.add(nRepetitions, 1 - torch.remainder(nRepetitions, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "xL2norm.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "self.MLA_image.shape[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/Noise.py": {
        "torch": {
            "Generator_11": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "max_adu",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** self.bit_depth - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_irrad_gray.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.quantum_eff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([optic_config.camera_params.quantum_eff], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.sensitivity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([optic_config.camera_params.sensitivity], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.dark_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([optic_config.camera_params.dark_noise], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.quantum_eff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.82], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.sensitivity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([5.88], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.dark_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([2.29], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Generator_38": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_irrad_gray.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "poisson_50": {
                "input": {
                    "value": "input_irrad_photons.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_57": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.dark_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[optic_config.camera_params.quantum_eff]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[optic_config.camera_params.sensitivity]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[optic_config.camera_params.dark_noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[0.82]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[5.88]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[2.29]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/OpticBlock.py": {
        "torch": {}
    },
    "WaveBlocksPytorch/OpticConfig.py": {
        "torch": {}
    },
    "WaveBlocksPytorch/PSF.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "psfOut",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.from_numpy(psf.real).unsqueeze(3), torch.from_numpy(psf.imag).unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "psf.imag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/WavePropagation.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.sampling_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([sampling_rate], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.propagation_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([shortest_propagation_distance], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.field_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([field_length], dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.impulse_response",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_21": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sampling_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.field_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_23": {
                "variable": {
                    "value": "ideal_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.optic_config.PSF_config.wvl * self.propagation_distance / L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_26": {
                "variable": {
                    "value": "ideal_samples_no",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([2500.0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.ideal_samples_no",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.add(ideal_samples_no, 1 - torch.remainder(ideal_samples_no, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.div(L, self.ideal_samples_no)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.XY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.mul(X, X) + torch.mul(Y, Y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.XY + torch.mul(Z, Z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.sign(Z) * torch.sqrt(torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ob.mulComplex(in2, in1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.impulse_response",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rate * self.rate * torch.fft(self.h, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "inUpReal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currSlice[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(self.ideal_samples_no.item()), int(self.ideal_samples_no.item()))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "inUpImag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currSlice[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(self.ideal_samples_no.item()), int(self.ideal_samples_no.item()))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "inUp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inUpReal.unsqueeze(4), inUpImag.unsqueeze(4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_89": {
                "variable": {
                    "value": "fft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inUp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((inUpReal.unsqueeze(4), inUpImag.unsqueeze(4)), 4)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "variable": {
                    "value": "out2R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "outSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(field.shape[-3:-1])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_100": {
                "variable": {
                    "value": "out2I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "outSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(field.shape[-3:-1])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "outRI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out2R.unsqueeze(4), out2I.unsqueeze(4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "[sampling_rate]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[shortest_propagation_distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[field_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[2500.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_26": {
                "input": {
                    "value": "torch.div(L, ideal_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_27": {
                "input": {
                    "value": "ideal_samples_no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.tensor([2500.0], dtype=torch.float32), torch.ceil(torch.div(L, ideal_rate)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - torch.remainder(ideal_samples_no, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_28": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(self.sampling_rate, self.field_length)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.ideal_samples_no",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[Z, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "(torch.zeros(rho.shape).unsqueeze(2).to(Z.device), self.optic_config.PSF_config.wvl * torch.mul(rho, rho).unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "(torch.zeros(rho.shape, dtype=torch.float32).unsqueeze(2).to(Z.device), self.optic_config.k * torch.sign(self.propagation_distance) * rho.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_69": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob.mulComplex(in2, in1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "[Z, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(torch.zeros(rho.shape).unsqueeze(2).to(Z.device), self.optic_config.PSF_config.wvl * torch.mul(rho, rho).unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "(torch.zeros(rho.shape).unsqueeze(2).to(Z.device), self.optic_config.k * rho.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_26": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(self.sampling_rate, self.field_length)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ideal_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.optic_config.PSF_config.wvl * self.propagation_distance / L)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_35": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_59": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ],
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ],
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ifft_93": {
                "input": {
                    "value": "fft11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob.mulComplex(fft1, impulse_response_all_depths)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_129": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ],
                        [
                            "self.propagation_distance",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_129": {
                "input": {
                    "value": "torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fft_136": {
                "input": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_27": {
                "input": {
                    "value": "ideal_samples_no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.tensor([2500.0], dtype=torch.float32), torch.ceil(torch.div(L, ideal_rate)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "rho.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "rho.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "rho.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "rho.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_61": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self.XY + torch.mul(Z, Z))",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.sign(Z) * torch.sqrt(torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z)), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self.XY + torch.mul(Z, Z))",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.sign(Z) * torch.sqrt(torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z)), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_129": {
                "input": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_131": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self.XY + torch.mul(Z, Z))",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.sign(Z) * torch.sqrt(torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z)), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self.XY + torch.mul(Z, Z))",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.sign(Z) * torch.sqrt(torch.mul(self.X, self.X) + torch.mul(self.Y, self.Y) + torch.mul(Z, Z)), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_63": {
                "input": {
                    "value": "self.propagation_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "WaveBlocksPytorch/complexOps.py": {
        "torch": {
            "exp_11": {
                "variable": {
                    "value": "ea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_13": {
                "variable": {
                    "value": "reshapedR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(reshaped[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.cos(reshaped[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_14": {
                "variable": {
                    "value": "reshapedI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(reshaped[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sin(reshaped[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "reshapedRI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(reshapedR.unsqueeze(1), reshapedI.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(otherRI[:, 0], otherRI[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(otherRI[:, 1], otherRI[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_25": {
                "variable": {
                    "value": "outR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(torch.mul(xRI[:, 0], otherRI[:, 0]), torch.mul(xRI[:, 1], otherRI[:, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(torch.mul(otherRI[:, 0], otherRI[:, 0]), torch.mul(otherRI[:, 1], otherRI[:, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_26": {
                "variable": {
                    "value": "outI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(torch.mul(xRI[:, 1], otherRI[:, 0]), torch.mul(xRI[:, 0], otherRI[:, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(torch.mul(otherRI[:, 0], otherRI[:, 0]), torch.mul(otherRI[:, 1], otherRI[:, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outR.unsqueeze(1), outI.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "otherRI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "other.ndimension() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_37": {
                "variable": {
                    "value": "xRI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "x.ndimension() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sub_39": {
                "variable": {
                    "value": "outR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(xRI[0], otherRI[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(xRI[1], otherRI[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_40": {
                "variable": {
                    "value": "outI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(xRI[0], otherRI[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(xRI[1], otherRI[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outR, outI)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "outR.ndimension() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unbind_64": {
                "variable": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_74": {
                "variable": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_54": {
                "input": {
                    "value": "torch.mul(xRI[:, 0], xRI[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(xRI[:, 1], xRI[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[back, front]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_13": {
                "input": {
                    "value": "reshaped[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_14": {
                "input": {
                    "value": "reshaped[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_22": {
                "input": {
                    "value": "otherRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "otherRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_25": {
                "input": {
                    "value": "torch.mul(xRI[:, 0], otherRI[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(xRI[:, 1], otherRI[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sub_26": {
                "input": {
                    "value": "torch.mul(xRI[:, 1], otherRI[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(xRI[:, 0], otherRI[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_39": {
                "input": {
                    "value": "xRI[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "otherRI[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_40": {
                "input": {
                    "value": "xRI[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "otherRI[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_25": {
                "input": {
                    "value": "xRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "otherRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_26": {
                "input": {
                    "value": "xRI[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "otherRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_54": {
                "input": {
                    "value": "xRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xRI[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main_refocus_example.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_81": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_vars_and_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vars_to_learn) * [0]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "float"
                        ]
                    ]
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "WBMicroGT.wave_prop.propagation_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([GT_defocus * opticalConfig.PSF_config.M ** 2]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "WBMicro.wave_prop.propagation_distance.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-50.0 * opticalConfig.PSF_config.M ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[GT_defocus * opticalConfig.PSF_config.M ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "len(predictions)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main_rotate_with_SLM_example.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_92": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_vars_and_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vars_to_learn) * [0]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000.0",
                            "float"
                        ]
                    ]
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "Gt_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_image.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "obj_image.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "microscopes/microLFPM.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.psf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "psfIn / psfIn.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "microscopes/microWithPropagation.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.psf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "psfIn / psfIn.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}