{
    "cleverhans_v3.1.0/cleverhans/model_zoo/soft_nearest_neighbor_loss/SNNL_regularized_train.py": {
        "sklearn": {
            "TSNE_162": {
                "variable": {
                    "value": "X_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_78": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_157": {
                "variable": {
                    "value": "adv_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(cross_entropy_loss.fprop(x, y), x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_72": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_157": {
                "ys": {
                    "value": "cross_entropy_loss.fprop(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_rows, img_cols, nchannels))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/experimental/certification/certify.py": {
        "tensorflow": {
            "set_verbosity_84": {
                "level": {
                    "value": "FLAGS.verbosity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_93": {
                "msg": {
                    "value": "Loaded neural network with size of layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_94": {
                "msg": {
                    "value": "Loaded neural network with input shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.input_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_97": {
                "msg": {
                    "value": "Loaded neural network with output shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.output_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_166": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "info_116": {
                "msg": {
                    "value": "Running certification for adversarial class %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "adv_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_class in range(start_class, end_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/dual_formulation.py": {
        "tensorflow": {
            "convert_to_tensor_72": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_75": {
                "variable": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_minval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "variable": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_maxval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.size(self.final_linear), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "projected_nu",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "min_eig_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_graph_248": {
                "variable": {
                    "value": "self.min_eigen_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_261": {
                "variable": {
                    "value": "self.m_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "m_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_271": {
                "variable": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_278": {
                "variable": {
                    "value": "self.h_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension - 1, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "h_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_289": {
                "variable": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_351": {
                "variable": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "g_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_367": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "h_beta_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_428": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_485": {
                "variable": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "h_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_488": {
                "variable": {
                    "value": "self.matrix_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)], axis=1), tf.concat([self.vector_g, self.matrix_h], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_414": {
                "x": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(h_beta_rows, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_h_product(beta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_443": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_482": {
                "variable": {
                    "value": "current_column",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "current_col_elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_567": {
                "msg": {
                    "value": "'Nu after modifying: ' + str(second_term)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_573": {
                "msg": {
                    "value": "Inner step: %d, current value of certificate: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "computed_certificate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.unconstrained_objective, feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_584": {
                "variable": {
                    "value": "input_vector_m",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "x": {
                    "value": "self.test_input - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_104": {
                "x": {
                    "value": "self.test_input + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_194": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_195": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_196": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_197": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_405": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers] + self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_486": {
                "a": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_583": {
                "msg": {
                    "value": "'min eig val from lanczos: ' + str(min_eig_val_m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_602": {
                "msg": {
                    "value": "'min eig val m from scipy: ' + str(min_eig_val_m_scipy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_120": {
                "features": {
                    "value": "current_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + lo_minus_up) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_121": {
                "features": {
                    "value": "current_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + up_minus_lo) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_205": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i] - projected_lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_209": {
                "x": {
                    "value": "self.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "self.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(projected_lambda_neg[i], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "input_tensor": {
                    "value": "tf.multiply(self.nn_params.biases[i], self.lambda_pos[i + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_305": {
                "input_tensor": {
                    "value": "tf.multiply(tf.multiply(self.lower[i], self.upper[i]), self.lambda_lu[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_345": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[self.nn_params.num_hidden_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_395": {
                "x": {
                    "value": "self.lambda_quad[i + 1] + self.lambda_lu[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_397": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.forward_pass(gamma, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_490": {
                "values": {
                    "value": "[tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_493": {
                "values": {
                    "value": "[self.vector_g, self.matrix_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_605": {
                "msg": {
                    "value": "Found certificate of robustness!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_84": {
                "input": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_212": {
                "x": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_301": {
                "x": {
                    "value": "self.nn_params.biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_pos[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_306": {
                "x": {
                    "value": "tf.multiply(self.lower[i], self.upper[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_324": {
                "x": {
                    "value": "self.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_329": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_338": {
                "x": {
                    "value": "self.lower[self.nn_params.num_hidden_layers] + self.upper[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_438": {
                "input_tensor": {
                    "value": "tf.multiply(beta, self.vector_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_439": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector[0], shape=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_473": {
                "a": {
                    "value": "utils.diag(-1 * self.lambda_quad[i + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.nn_params.weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_202": {
                "x": {
                    "value": "-min_eig_h",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_307": {
                "x": {
                    "value": "self.lower[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.upper[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_323": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_377": {
                "x": {
                    "value": "2 * self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "self.lambda_quad[i] + self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_389": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_438": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_491": {
                "tensor": {
                    "value": "self.nu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "a": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_379": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/experimental/certification/nn.py": {
        "tensorflow": {
            "load_checkpoint_225": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_125": {
                "variable": {
                    "value": "self.final_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_weights[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_128": {
                "variable": {
                    "value": "self.final_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_152": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.output_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index + 1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_79": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_109": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_110": {
                "variable": {
                    "value": "large_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(small_bias, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[current_num_rows * current_num_columns, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_191": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_72": {
                "value": {
                    "value": "net_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_164": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/optimization.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.penalty_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.eig_init_vec_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1 + self.dual_object.dual_index[-1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.eig_num_iter_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_63": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(eig_vals, self.smooth_placeholder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_75": {
                "variable": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(scaling_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_graph_104": {
                "variable": {
                    "value": "min_eigen_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_161": {
                "variable": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "self.eig_val_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.dual_object.get_psd_product(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_249": {
                "variable": {
                    "value": "self.proj_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "proj_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "eig_vectors[:, index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vectors.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "tf.reduce_sum(eig_vec_smooth, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vec_smooth.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_182": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_71": {
                "x": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "eig_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.diag(tf.sqrt(exp_eig_vals))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "x": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_eig_vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals))), tf.sqrt(scaling_factor))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_96": {
                "pred": {
                    "value": "self.smooth_placeholder < 1e-08",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "self.tf_min_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "self.tf_smooth_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.dual_object.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "a": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_184": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MkDir_255": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_327": {
                "msg": {
                    "value": "Current inner step: %d, optimization stats: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'total_objective': float(self.current_total_objective), 'unconstrained_objective': float(self.current_unconstrained_objective), 'min_eig_val_estimate': float(self.current_eig_val_estimate)}",
                            "Dict"
                        ],
                        [
                            "json.dumps(stats)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_378": {
                "msg": {
                    "value": "Running outer step %d with penalty %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_outer_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "penalty_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['init_penalty']",
                            "Subscript"
                        ],
                        [
                            "penalty_val * self.params['beta']",
                            "BinOp"
                        ],
                        [
                            "penalty_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_76": {
                "diagonal": {
                    "value": "tf.sqrt(exp_eig_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_172": {
                "x": {
                    "value": "tf.maximum(-self.penalty_placeholder * self.eig_val_estimate, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_186": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.params['momentum_parameter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_192": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_252": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "x": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_173": {
                "x": {
                    "value": "-self.penalty_placeholder * self.eig_val_estimate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_236": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_quad[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_245": {
                "features": {
                    "value": "self.dual_object.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "self.dual_object.positive_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_pos[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "x": {
                    "value": "self.dual_object.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_227": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_neg[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_238": {
                "features": {
                    "value": "self.dual_object.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_217": {
                "features": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_229": {
                "features": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/tests/dual_formulation_test.py": {
        "tensorflow": {
            "matmul_207": {
                "variable": {
                    "value": "explicit_product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ],
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "six_dim_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(6, 1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/tests/nn_test.py": {
        "tensorflow": {}
    },
    "cleverhans/experimental/certification/tests/optimization_test.py": {
        "tensorflow": {
            "reshape_76": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.get_variable('nu', initializer=200.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_86": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "name": {
                    "value": "lambda_pos0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "name": {
                    "value": "lambda_pos1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "name": {
                    "value": "lambda_neg0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "lambda_neg1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "name": {
                    "value": "lambda_quad0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "name": {
                    "value": "lambda_quad1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "name": {
                    "value": "lambda_lu0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "name": {
                    "value": "lambda_lu1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/tests/utils_test.py": {
        "tensorflow": {
            "to_graph_28": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "tf_num_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_graph_44": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "init_vec_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(MATRIX_DIMENTION, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 2.0], [2.0, 5.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.random((MATRIX_DIMENTION, MATRIX_DIMENTION))",
                            "Call"
                        ],
                        [
                            "matrix + matrix.T",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "a": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(x, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/experimental/certification/utils.py": {
        "tensorflow": {
            "reshape_154": {
                "variable": {
                    "value": "current_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(tf.transpose(current_vector), grad) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_163": {
                "variable": {
                    "value": "grad_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "directional_second_derivative",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "2 * tf.matmul(tf.transpose(norm_grad), vector_prod_fn(norm_grad))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x)",
                            "Call"
                        ],
                        [
                            "eig_one_step(x, learning_rate, vector_prod_fn)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorArray_262": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_264": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_266": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_280": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_vectors.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, matrix_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_312": {
                "variable": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=0, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "beta.stack()",
                            "Call"
                        ],
                        [
                            "beta.write(i - 1, cur_beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "eigh_319": {
                "variable": {
                    "value": "(eigvals, eigvecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tridiag_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(alpha) + tf.pad(offdiag_submatrix, [[0, 1], [1, 0]]) + tf.pad(offdiag_submatrix, [[1, 0], [0, 1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_322": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(eigvecs[:, 0], (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=(matrix_dim, 1))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(0, w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_vectors.stack(), (-1, matrix_dim))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(i, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_20": {
                "diagonal": {
                    "value": "tf.reshape(diag_elements, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "1.0 * dual_var_init_val['nu']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_203": {
                "x": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_288": {
                "variable": {
                    "value": "cur_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "tensor": {
                    "value": "diag_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diag_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_271": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_275": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_mul_282": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "pad_316": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "tensor": {
                    "value": "eigvecs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_323": {
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_161": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "a": {
                    "value": "tf.transpose(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "vector_prod_fn(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_304": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "diag_314": {
                "diagonal": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "alpha.write(0, cur_alpha)",
                            "Call"
                        ],
                        [
                            "alpha.stack()",
                            "Call"
                        ],
                        [
                            "alpha.write(i, cur_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_315": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_pos'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_neg'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_quad'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_lu'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_161": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_171": {
                "a": {
                    "value": "norm_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / grad_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_196": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/plot/pyplot_image.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_125": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tf2/attacks/carlini_wagner_l2.py": {
        "tensorflow": {
            "reduce_sum_323": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_324": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1.0 - y_true) * y_pred - y_true * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_334": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2(x_new, other)",
                            "Call"
                        ],
                        [
                            "self.attack_step(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "self.gradient(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "loss_fn(x=x, x_new=x_new, y_true=y, y_pred=preds, confidence=self.confidence, const=const, targeted=self.targeted, clip_min=self.clip_min, clip_max=self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_335": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "const * loss_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "original_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x",
                            "variable"
                        ],
                        [
                            "(x - self.clip_min) / (self.clip_max - self.clip_min)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 2.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.atanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x",
                            "variable"
                        ],
                        [
                            "(x - self.clip_min) / (self.clip_max - self.clip_min)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 2.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.atanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "atanh_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x * 0.999999",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_156": {
                "variable": {
                    "value": "best_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_157": {
                "variable": {
                    "value": "best_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "best_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(shape[:1], -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(best_score, tf.int32)",
                            "Call"
                        ],
                        [
                            "set_with_mask(best_score, pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_165": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "tf.square(x - y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(x.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_328": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + confidence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_331": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + confidence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_174": {
                "variable": {
                    "value": "current_best_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_175": {
                "variable": {
                    "value": "current_best_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "current_best_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_best_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(shape[:1], -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(current_best_score, tf.int32)",
                            "Call"
                        ],
                        [
                            "set_with_mask(current_best_score, pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_239": {
                "variable": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_or_guess_labels(self.model_fn, original_x, y=self.y, targeted=self.targeted)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_240": {
                "variable": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(lab, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_243": {
                "variable": {
                    "value": "upper_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "compare_fn(best_score, lab)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.not_equal(best_score, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_252": {
                "variable": {
                    "value": "const_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upper_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(compare_fn(best_score, lab), tf.not_equal(best_score, -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.less(upper_bound, 1000000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_259": {
                "variable": {
                    "value": "lower_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upper_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(compare_fn(best_score, lab), tf.not_equal(best_score, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_264": {
                "variable": {
                    "value": "const_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lower_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_not(upper_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.less(upper_bound, 1000000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_270": {
                "variable": {
                    "value": "const_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "const_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(upper_mask, tf.less(upper_bound, 1000000000.0))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_and(lower_mask, tf.less(upper_bound, 1000000000.0))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(const_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_306": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "shape": {
                    "value": "shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_153": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "variable": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_or_guess_labels(self.model_fn, original_x, y=self.y, targeted=self.targeted)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_208": {
                "variable": {
                    "value": "pred_with_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_with_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - self.confidence if self.targeted else preds + self.confidence",
                            "IfExp"
                        ],
                        [
                            "tf.argmax(pred_with_conf, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack_step(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "self.gradient(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "self.model_fn(x_new)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_211": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(pred, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_214": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(l2_dist, current_best_l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "compare_fn(pred_with_conf, lab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_224": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(l2_dist, best_l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "compare_fn(pred_with_conf, lab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.less(l2_dist, current_best_l2), compare_fn(pred_with_conf, lab))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_and(tf.less(l2_dist, best_l2), compare_fn(pred_with_conf, lab))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, *best_attack.shape[1:]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_234": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.less(l2_dist, current_best_l2), compare_fn(pred_with_conf, lab))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_and(tf.less(l2_dist, best_l2), compare_fn(pred_with_conf, lab))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, *best_attack.shape[1:]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, *best_attack.shape[1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_245": {
                "x": {
                    "value": "best_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(shape[:1], -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(best_score, tf.int32)",
                            "Call"
                        ],
                        [
                            "set_with_mask(best_score, pred, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_248": {
                "x": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape[:1]) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "set_with_mask(upper_bound, tf.math.minimum(upper_bound, const), upper_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape) * self.initial_const",
                            "BinOp"
                        ],
                        [
                            "upper_bound",
                            "variable"
                        ],
                        [
                            "set_with_mask(const, (lower_bound + upper_bound) / 2.0, const_mask)",
                            "Call"
                        ],
                        [
                            "set_with_mask(const, (lower_bound + upper_bound) / 2, const_mask)",
                            "Call"
                        ],
                        [
                            "set_with_mask(const, const * 10, const_mask)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "const",
                            "Method Argument"
                        ],
                        [
                            "const",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_254": {
                "x": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape[:1]) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "set_with_mask(upper_bound, tf.math.minimum(upper_bound, const), upper_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_261": {
                "x": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape[:1])",
                            "Call"
                        ],
                        [
                            "set_with_mask(lower_bound, tf.math.maximum(lower_bound, const), lower_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape) * self.initial_const",
                            "BinOp"
                        ],
                        [
                            "upper_bound",
                            "variable"
                        ],
                        [
                            "set_with_mask(const, (lower_bound + upper_bound) / 2.0, const_mask)",
                            "Call"
                        ],
                        [
                            "set_with_mask(const, (lower_bound + upper_bound) / 2, const_mask)",
                            "Call"
                        ],
                        [
                            "set_with_mask(const, const * 10, const_mask)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "const",
                            "Method Argument"
                        ],
                        [
                            "const",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_266": {
                "x": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape[:1]) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "set_with_mask(upper_bound, tf.math.minimum(upper_bound, const), upper_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_equal_116": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x",
                            "variable"
                        ],
                        [
                            "(x - self.clip_min) / (self.clip_max - self.clip_min)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 2.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.atanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_122": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x",
                            "variable"
                        ],
                        [
                            "(x - self.clip_min) / (self.clip_max - self.clip_min)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 2.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.atanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_215": {
                "x": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2(x_new, other)",
                            "Call"
                        ],
                        [
                            "self.attack_step(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "self.gradient(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "loss_fn(x=x, x_new=x_new, y_true=y, y_pred=preds, confidence=self.confidence, const=const, targeted=self.targeted, clip_min=self.clip_min, clip_max=self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "current_best_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(shape[:1], 10000000000.0)",
                            "Call"
                        ],
                        [
                            "set_with_mask(current_best_l2, l2_dist, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_225": {
                "x": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2(x_new, other)",
                            "Call"
                        ],
                        [
                            "self.attack_step(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "self.gradient(x, y, modifier, const)",
                            "Call"
                        ],
                        [
                            "loss_fn(x=x, x_new=x_new, y_true=y, y_pred=preds, confidence=self.confidence, const=const, targeted=self.targeted, clip_min=self.clip_min, clip_max=self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "best_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(shape[:1], 10000000000.0)",
                            "Call"
                        ],
                        [
                            "set_with_mask(best_l2, l2_dist, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_341": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_x",
                            "variable"
                        ],
                        [
                            "(x - self.clip_min) / (self.clip_max - self.clip_min)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 2.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.atanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tf2/attacks/fast_gradient_method.py": {
        "tensorflow": {
            "cast_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_75": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_53": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_56": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tf2/attacks/momentum_iterative_method.py": {
        "tensorflow": {
            "zeros_like_80": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_77": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_117": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_by_value_103": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "adv_x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "x + clip_eta(adv_x - x, norm, eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_70": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_73": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_91": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_mean(tf.math.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "tf.math.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.shape)))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_93": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(model_fn, loss_fn, adv_x, y, targeted)",
                            "Call"
                        ],
                        [
                            "grad / tf.math.maximum(avoid_zero_div, tf.math.reduce_mean(tf.math.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tf2/attacks/projected_gradient_descent.py": {
        "tensorflow": {
            "zeros_like_93": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_99": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, norm, loss_fn, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, norm, loss_fn, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_79": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_82": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_90": {
                "x": {
                    "value": "rand_minmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tf2/attacks/spsa.py": {
        "tensorflow": {
            "as_dtype_5": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_243": {
                "variable": {
                    "value": "highest_nonlabel_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_target_label_neg_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_logits - logit_mask * 99999",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_336": {
                "variable": {
                    "value": "init_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(input_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.cast(-epsilon, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.cast(epsilon, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_393": {
                "variable": {
                    "value": "flat_init_optim_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "init_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.init_state([init_perturbation])",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_394": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(0.0), init_perturbation, flat_init_optim_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_156": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_grads.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_228": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_232": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, depth=nb_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "tf.cast(logit_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_234": {
                "variable": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_mask * model_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_272": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_273": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_349": {
                "variable": {
                    "value": "optim_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "init_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.init_state([init_perturbation])",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_optim_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_less_equal_410": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=(tf.constant(0.0), init_perturbation, flat_init_optim_state), parallel_iterations=1, back_prop=False, maximum_iterations=num_steps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(perturbation_max, final_perturbation.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_419": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_434": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_262": {
                "control_inputs": {
                    "value": "[tf.debugging.assert_less_equal(input_image, tf.cast(clip_max, input_image.dtype)), tf.debugging.assert_greater_equal(input_image, tf.cast(clip_min, input_image.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_337": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_375": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "wrapped_loss_fn(projected_perturbation)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_391": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_less_equal_424": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_greater_equal_427": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_432": {
                "control_inputs": {
                    "value": "[check_diff] + check_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_107": {
                "x": {
                    "value": "tf.random.uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_333": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_334": {
                "*inputs": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_338": {
                "x": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_339": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_382": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "flatten_388": {
                "structure": {
                    "value": "new_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(wrapped_loss_fn, [perturbation], optim_state)",
                            "Call"
                        ],
                        [
                            "{'t': optim_state['t'] + 1.0, 'm': [None] * len(x), 'u': [None] * len(x)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_412": {
                "x": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "final_perturbation.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_425": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_428": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_108": {
                "shape": {
                    "value": "[self._num_samples] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "loss_vals * delta_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_200": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_201": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_less_equal_264": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_greater_equal_267": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_397": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TensorArray_159": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_191": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_192": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_265": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_268": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_378": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_379": {
                "*inputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_383": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_193": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self.beta_2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tf2/utils.py": {
        "tensorflow": {
            "cast_151": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(tf.reduce_max(preds, axis=1, keepdims=True), preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_162": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, x.dtype)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, x.dtype)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_241": {
                "variable": {
                    "value": "scaled_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_20": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_34": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.divide(eps, norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gamma_49": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.0 / rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_86": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "minval": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_98": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_111": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform((shape[0], 1), dtype=dtype, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / tf.cast(dim, dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y, nb_classes)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_216": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_220": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_145": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y, nb_classes)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_152": {
                "x": {
                    "value": "tf.reduce_max(preds, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_222": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_223": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_224": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(abs_grad, max_abs_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(tf.equal(abs_grad, max_abs_grad), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(eta), axis, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_34": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(eta), axis, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(x), axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(x), axis=-1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "norm",
                            "Method Argument"
                        ],
                        [
                            "np.inf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(shape[0], dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_107": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_112": {
                "shape": {
                    "value": "(shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "w * x / norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_152": {
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_231": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ],
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(grad), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_104": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_113": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_226": {
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(abs_grad, axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_29": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ],
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(eta), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_234": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(grad), axis, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "tf.square(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_107": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_232": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_30": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attack_bundling.py": {
        "tensorflow": {
            "ones_98": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_181": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_267": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1301": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_104": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_187": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_273": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_1135": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_1136": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1174": {
                "variable": {
                    "value": "max_wrong_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions * (1.0 - y_batch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1304": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_187": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_273": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_1135": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_1304": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/__init__.py": {
        "tensorflow": {
            "as_dtype_48": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/attack.py": {
        "tensorflow": {
            "as_dtype_48": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "to_float_295": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_296": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_295": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/carlini_wagner_l2.py": {
        "tensorflow": {
            "as_dtype_15": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_100": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_247": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_254": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_257": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_295": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_297": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_306": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_283": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_286": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_274": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_265": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_272": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/deep_fool.py": {
        "tensorflow": {
            "reshape_74": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_98": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepfool_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_75": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/elastic_net_method.py": {
        "tensorflow": {
            "as_dtype_15": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_106": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ead_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_276": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_283": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_284": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_285": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_286": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_289": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_292": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_294": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_295": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_298": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_300": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_301": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_304": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_310": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_314": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_319": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_322": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_326": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_334": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_335": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_388": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_394": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_398": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_408": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_327": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_328": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_331": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_371": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_372": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_375": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_376": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_308": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_311": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_315": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_320": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_320": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_323": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_323": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_343": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_346": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_349": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_352": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_354": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_355": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_386": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_305": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_308": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_311": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_315": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_315": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_311": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/fast_feature_adversaries.py": {
        "tensorflow": {
            "gradients_113": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_126": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_158": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_169": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_116": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_152": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_110": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/fast_gradient_method.py": {
        "tensorflow": {
            "gradients_201": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_191": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(logits, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_192": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_243": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_249": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize_linear(grad, eps, ord)",
                            "Call"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_219": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_251": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_252": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_253": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(abs_grad, max_abs_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(abs_grad, max_abs_grad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_191": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "maximum_258": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_254": {
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(abs_grad, red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_262": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_260": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/hop_skip_jump_attack.py": {
        "tensorflow": {
            "as_dtype_12": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.input_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(self.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_106": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "hsja_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsja_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x[0], self.y_target[0], self.image_target[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_389": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_112": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x, target_image: hsja_wrap(x, None, target_image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x[0], self.image_target[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_119": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: hsja_wrap(x, None, None)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_388": {
                "control_inputs": {
                    "value": "[check_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_387": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/lbfgs.py": {
        "tensorflow": {
            "as_dtype_14": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_85": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbfgs_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_177": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_192": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_184": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/max_confidence.py": {
        "tensorflow": {
            "argmax_75": {
                "variable": {
                    "value": "true_y_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "expanded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x] * self.nb_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "target_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.to_float(tf.one_hot(tf.ones(m, dtype=tf.int32) * cls, self.nb_classes)) for cls in range(self.nb_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "adv_x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_x_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.attack_class(expanded_x, target_y)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "all_probs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "expanded_all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(adv_x_cls)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(e, 1) for e in prob_cls]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "most_confident",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(e, 1) for e in prob_cls], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_107": {
                "variable": {
                    "value": "fused_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "most_confident",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fused_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(most_confident, self.nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_94": {
                "variable": {
                    "value": "cur_prob_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_probs - true_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "chosen_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_probs_list[cls]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_99": {
                "variable": {
                    "value": "eligible",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(true_y_idx, chosen_cls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_79": {
                "x": {
                    "value": "tf.one_hot(tf.ones(m, dtype=tf.int32) * cls, self.nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[m] + [1] * (len(x.get_shape()) - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_79": {
                "indices": {
                    "value": "tf.ones(m, dtype=tf.int32) * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_99": {
                "x": {
                    "value": "true_y_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(true_y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "chosen_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(all_probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "shape": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/momentum_iterative_method.py": {
        "tensorflow": {
            "zeros_like_77": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_127": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x, momentum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_97": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ],
                        [
                            "ax",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_101": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ],
                        [
                            "ax",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_87": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_137": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x, momentum), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_102": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_136": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_68": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_103": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, ax)",
                            "Call"
                        ],
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/noise.py": {
        "tensorflow": {
            "clip_by_value_53": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/projected_gradient_descent.py": {
        "tensorflow": {
            "while_loop_165": {
                "variable": {
                    "value": "(_, adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_112": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_113": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_114": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_146": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_198": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "FGM.generate(adv_x, **fgm_params)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_92": {
                "x": {
                    "value": "self.rand_init_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_179": {
                "x": {
                    "value": "self.eps_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_180": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_197": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_79": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_113": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_189": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_192": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_191": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/saliency_map_method.py": {
        "tensorflow": {
            "as_dtype_13": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_174": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_292": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_target, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_target, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_target, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_target, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_201": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ],
                        [
                            "self.get_or_guess_labels(x, kwargs)",
                            "Call"
                        ],
                        [
                            "gt.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_219": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_259": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_263": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_264": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_265": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_266": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_269": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_286": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_194": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_206": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_281": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_283": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "py_func_74": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_targets",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_182": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_194": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_201": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_209": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_219": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_227": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_235": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "variable"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "variable"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_273": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_228": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_233": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_241": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_255": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/sparse_l1_descent.py": {
        "tensorflow": {
            "gradients_322": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_328": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(x)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.broadcast_to(q, tf.shape(x)[0:1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_334": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_344": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.range(tf.shape(abs_grad)[0]), k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_345": {
                "variable": {
                    "value": "percentiles",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sorted_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-abs_grad, k=dim, sorted=True)[0]",
                            "UnaryOp"
                        ],
                        [
                            "tf.sort(abs_grad, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((tf.range(tf.shape(abs_grad)[0]), k), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_346": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(percentiles, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_347": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tied_for_max, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_348": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(abs_grad, tf.expand_dims(percentiles, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(tied_for_max, x.dtype), tf.shape(grad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_145": {
                "variable": {
                    "value": "(_, adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_312": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(logits, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_342": {
                "variable": {
                    "value": "sorted_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_245": {
                "variable": {
                    "value": "self.grad_sparsity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.grad_sparsity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_330": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_to_333": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.broadcast_to(q, tf.shape(x)[0:1]), tf.float32)",
                            "Call"
                        ],
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)[0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_334": {
                "x": {
                    "value": "q / 100 * tf.cast(dim, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_346": {
                "input": {
                    "value": "percentiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(sorted_grad, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_347": {
                "x": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(abs_grad, tf.expand_dims(percentiles, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(tied_for_max, x.dtype), tf.shape(grad))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_347": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_363": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + utils_tf.mul(eps, optimal_perturbation)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "sparse_l1_descent(adv_x, logits, y=labels, eps=self.eps_iter, q=self.grad_sparsity, clip_min=self.clip_min, clip_max=self.clip_max, clip_grad=self.clip_grad, targeted=self.y_target is not None, sanity_checks=self.sanity_checks)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_102": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_104": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_112": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + utils_tf.mul(eps, optimal_perturbation)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "sparse_l1_descent(adv_x, logits, y=labels, eps=self.eps_iter, q=self.grad_sparsity, clip_min=self.clip_min, clip_max=self.clip_max, clip_grad=self.clip_grad, targeted=self.y_target is not None, sanity_checks=self.sanity_checks)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_312": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(adv_x)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_328": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_350": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_362": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_159": {
                "x": {
                    "value": "self.eps_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_160": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_301": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_304": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_333": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_340": {
                "input": {
                    "value": "-abs_grad",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_103": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_344": {
                "input": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/spsa.py": {
        "tensorflow": {
            "as_dtype_16": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_528": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_537": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[dx_in_px, dy_in_px]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_597": {
                "variable": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_compute_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_xent",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_apply_transformation, elems, dtype=tf.float32, parallel_iterations=1)",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_604": {
                "variable": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_compute_xent, transformed_ims, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(all_xents)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_607": {
                "variable": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_compute_xent, transformed_ims, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(all_xents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_610": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_614": {
                "variable": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "sbhwc->bshwc",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_apply_transformation, elems, dtype=tf.float32, parallel_iterations=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_615": {
                "variable": {
                    "value": "after_lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('sbhwc->bshwc', transformed_ims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_627": {
                "variable": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(*[dxs, dys, angles]))",
                            "Call"
                        ],
                        [
                            "zip(sampled_dxs, sampled_dys, sampled_angles)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(transforms, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "transforms",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_635": {
                "variable": {
                    "value": "tiled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(x, [num_transforms, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_transforms, -1] + im_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "map_fn_639": {
                "variable": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_apply_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_apply_transformation",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tiled_x, transforms]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_767": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(0.0), init_perturbation, flat_init_optim_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_456": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_482": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_486": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, depth=nb_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "tf.to_float(logit_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_510": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [border_size, border_size], [border_size, border_size], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_572": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_573": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_793": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_806": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_241": {
                "control_inputs": {
                    "value": "[utils_tf.assert_less_equal(input_image, tf.cast(clip_max, input_image.dtype)), utils_tf.assert_greater_equal(input_image, tf.cast(clip_min, input_image.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_295": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_436": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_444": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_445": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_449": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_595": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_609": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_636": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_transforms, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_704": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_709": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_764": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_804": {
                "control_inputs": {
                    "value": "[check_diff] + check_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_369": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_370": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_418": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_572": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_611": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_611": {
                "x": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(all_xents, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_703": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_710": {
                "x": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_711": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1e-09",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_755": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_786": {
                "x": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "final_perturbation.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_798": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_800": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_149": {
                "control_inputs": {
                    "value": "[check_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_752": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_770": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tfa.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tfa.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_244": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_388": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_389": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_459": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_751": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_756": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_390": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks/virtual_adversarial_method.py": {
        "tensorflow": {
            "as_dtype_14": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_152": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_147": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_37": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_159": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_24": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_25": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_rand_crop_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_rand_crop_img",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_36": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_37": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_48": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_53": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/canary.py": {
        "tensorflow": {
            "Graph_35": {
                "variable": {
                    "value": "canary_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState([2018, 10, 16]).randn(2, 2)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_47": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(v, trainable=False, collections=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_52": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(v, trainable=False, collections=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_56": {
                "var_list": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_51": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/confidence_report.py": {
        "tensorflow": {
            "Session_183": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_361": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_355": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/dataset.py": {
        "tensorflow": {
            "load_data_322": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_339": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_utils.to_categorical(y_train, nb_classes)",
                            "Call"
                        ],
                        [
                            "y_train[train_start:train_end, :]",
                            "Subscript"
                        ],
                        [
                            "data_mnist(train_start=train_start, train_end=train_end, test_start=test_start, test_end=test_end)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "to_categorical_340": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_utils.to_categorical(y_test, nb_classes)",
                            "Call"
                        ],
                        [
                            "y_test[test_start:test_end, :]",
                            "Subscript"
                        ],
                        [
                            "data_mnist(train_start=train_start, train_end=train_end, test_start=test_start, test_end=test_end)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "range_72": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_data_format_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_81": {
                "func": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lookup",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_594": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_648": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_649": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_701": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_702": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_594": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_701": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_374": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/certify.py": {
        "tensorflow": {
            "set_verbosity_84": {
                "level": {
                    "value": "FLAGS.verbosity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_93": {
                "msg": {
                    "value": "Loaded neural network with size of layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_94": {
                "msg": {
                    "value": "Loaded neural network with input shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.input_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_97": {
                "msg": {
                    "value": "Loaded neural network with output shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.output_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_166": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "info_116": {
                "msg": {
                    "value": "Running certification for adversarial class %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "adv_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_class in range(start_class, end_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/dual_formulation.py": {
        "tensorflow": {
            "convert_to_tensor_72": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_75": {
                "variable": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_minval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "variable": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_maxval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.size(self.final_linear), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "projected_nu",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "min_eig_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_graph_248": {
                "variable": {
                    "value": "self.min_eigen_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_261": {
                "variable": {
                    "value": "self.m_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "m_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_271": {
                "variable": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_278": {
                "variable": {
                    "value": "self.h_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension - 1, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "h_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_289": {
                "variable": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_351": {
                "variable": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "g_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_367": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "h_beta_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_428": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_485": {
                "variable": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "h_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_488": {
                "variable": {
                    "value": "self.matrix_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)], axis=1), tf.concat([self.vector_g, self.matrix_h], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_414": {
                "x": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(h_beta_rows, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_h_product(beta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_443": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_482": {
                "variable": {
                    "value": "current_column",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "current_col_elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_567": {
                "msg": {
                    "value": "'Nu after modifying: ' + str(second_term)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_573": {
                "msg": {
                    "value": "Inner step: %d, current value of certificate: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "computed_certificate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.unconstrained_objective, feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_584": {
                "variable": {
                    "value": "input_vector_m",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "x": {
                    "value": "self.test_input - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_104": {
                "x": {
                    "value": "self.test_input + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_194": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_195": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_196": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_197": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_405": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers] + self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_486": {
                "a": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_583": {
                "msg": {
                    "value": "'min eig val from lanczos: ' + str(min_eig_val_m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_602": {
                "msg": {
                    "value": "'min eig val m from scipy: ' + str(min_eig_val_m_scipy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_120": {
                "features": {
                    "value": "current_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + lo_minus_up) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_121": {
                "features": {
                    "value": "current_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + up_minus_lo) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_205": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i] - projected_lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_209": {
                "x": {
                    "value": "self.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "self.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(projected_lambda_neg[i], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "input_tensor": {
                    "value": "tf.multiply(self.nn_params.biases[i], self.lambda_pos[i + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_305": {
                "input_tensor": {
                    "value": "tf.multiply(tf.multiply(self.lower[i], self.upper[i]), self.lambda_lu[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_345": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[self.nn_params.num_hidden_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_395": {
                "x": {
                    "value": "self.lambda_quad[i + 1] + self.lambda_lu[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_397": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.forward_pass(gamma, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_490": {
                "values": {
                    "value": "[tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_493": {
                "values": {
                    "value": "[self.vector_g, self.matrix_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_605": {
                "msg": {
                    "value": "Found certificate of robustness!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_84": {
                "input": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_212": {
                "x": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_301": {
                "x": {
                    "value": "self.nn_params.biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_pos[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_306": {
                "x": {
                    "value": "tf.multiply(self.lower[i], self.upper[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_324": {
                "x": {
                    "value": "self.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_329": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_338": {
                "x": {
                    "value": "self.lower[self.nn_params.num_hidden_layers] + self.upper[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_438": {
                "input_tensor": {
                    "value": "tf.multiply(beta, self.vector_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_439": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector[0], shape=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_473": {
                "a": {
                    "value": "utils.diag(-1 * self.lambda_quad[i + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.nn_params.weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_202": {
                "x": {
                    "value": "-min_eig_h",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_307": {
                "x": {
                    "value": "self.lower[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.upper[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_323": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_377": {
                "x": {
                    "value": "2 * self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "self.lambda_quad[i] + self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_389": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_438": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_491": {
                "tensor": {
                    "value": "self.nu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "a": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_379": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/nn.py": {
        "tensorflow": {
            "load_checkpoint_225": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_125": {
                "variable": {
                    "value": "self.final_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_weights[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_128": {
                "variable": {
                    "value": "self.final_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_152": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.output_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index + 1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_79": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_109": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_110": {
                "variable": {
                    "value": "large_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(small_bias, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[current_num_rows * current_num_columns, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_191": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_72": {
                "value": {
                    "value": "net_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_164": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/optimization.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.penalty_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.eig_init_vec_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1 + self.dual_object.dual_index[-1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.eig_num_iter_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_63": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(eig_vals, self.smooth_placeholder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_75": {
                "variable": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(scaling_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_graph_104": {
                "variable": {
                    "value": "min_eigen_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_161": {
                "variable": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "self.eig_val_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.dual_object.get_psd_product(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_249": {
                "variable": {
                    "value": "self.proj_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "proj_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "eig_vectors[:, index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vectors.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "tf.reduce_sum(eig_vec_smooth, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vec_smooth.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_182": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_71": {
                "x": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "eig_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.diag(tf.sqrt(exp_eig_vals))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "x": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_eig_vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals))), tf.sqrt(scaling_factor))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_96": {
                "pred": {
                    "value": "self.smooth_placeholder < 1e-08",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "self.tf_min_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "self.tf_smooth_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.dual_object.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "a": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_184": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MkDir_255": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_327": {
                "msg": {
                    "value": "Current inner step: %d, optimization stats: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'total_objective': float(self.current_total_objective), 'unconstrained_objective': float(self.current_unconstrained_objective), 'min_eig_val_estimate': float(self.current_eig_val_estimate)}",
                            "Dict"
                        ],
                        [
                            "json.dumps(stats)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_378": {
                "msg": {
                    "value": "Running outer step %d with penalty %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_outer_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "penalty_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['init_penalty']",
                            "Subscript"
                        ],
                        [
                            "penalty_val * self.params['beta']",
                            "BinOp"
                        ],
                        [
                            "penalty_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_76": {
                "diagonal": {
                    "value": "tf.sqrt(exp_eig_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_172": {
                "x": {
                    "value": "tf.maximum(-self.penalty_placeholder * self.eig_val_estimate, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_186": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.params['momentum_parameter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_192": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_252": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "x": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_173": {
                "x": {
                    "value": "-self.penalty_placeholder * self.eig_val_estimate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_236": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_quad[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_245": {
                "features": {
                    "value": "self.dual_object.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "self.dual_object.positive_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_pos[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "x": {
                    "value": "self.dual_object.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_227": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_neg[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_238": {
                "features": {
                    "value": "self.dual_object.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_217": {
                "features": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_229": {
                "features": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/tests/dual_formulation_test.py": {
        "tensorflow": {
            "matmul_207": {
                "variable": {
                    "value": "explicit_product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ],
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "six_dim_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(6, 1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/tests/nn_test.py": {
        "tensorflow": {}
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/tests/optimization_test.py": {
        "tensorflow": {
            "reshape_76": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.get_variable('nu', initializer=200.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_86": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "name": {
                    "value": "lambda_pos0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "name": {
                    "value": "lambda_pos1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "name": {
                    "value": "lambda_neg0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "lambda_neg1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "name": {
                    "value": "lambda_quad0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "name": {
                    "value": "lambda_quad1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "name": {
                    "value": "lambda_lu0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "name": {
                    "value": "lambda_lu1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/tests/utils_test.py": {
        "tensorflow": {
            "to_graph_28": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "tf_num_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_graph_44": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "init_vec_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(MATRIX_DIMENTION, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 2.0], [2.0, 5.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.random((MATRIX_DIMENTION, MATRIX_DIMENTION))",
                            "Call"
                        ],
                        [
                            "matrix + matrix.T",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "a": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(x, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/experimental/certification/utils.py": {
        "tensorflow": {
            "reshape_154": {
                "variable": {
                    "value": "current_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(tf.transpose(current_vector), grad) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_163": {
                "variable": {
                    "value": "grad_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "directional_second_derivative",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "2 * tf.matmul(tf.transpose(norm_grad), vector_prod_fn(norm_grad))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x)",
                            "Call"
                        ],
                        [
                            "eig_one_step(x, learning_rate, vector_prod_fn)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorArray_262": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_264": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_266": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_280": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_vectors.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, matrix_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_312": {
                "variable": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=0, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "beta.stack()",
                            "Call"
                        ],
                        [
                            "beta.write(i - 1, cur_beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "eigh_319": {
                "variable": {
                    "value": "(eigvals, eigvecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tridiag_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(alpha) + tf.pad(offdiag_submatrix, [[0, 1], [1, 0]]) + tf.pad(offdiag_submatrix, [[1, 0], [0, 1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_322": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(eigvecs[:, 0], (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=(matrix_dim, 1))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(0, w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_vectors.stack(), (-1, matrix_dim))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(i, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_20": {
                "diagonal": {
                    "value": "tf.reshape(diag_elements, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "1.0 * dual_var_init_val['nu']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_203": {
                "x": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_288": {
                "variable": {
                    "value": "cur_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "tensor": {
                    "value": "diag_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diag_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_271": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_275": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_mul_282": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "pad_316": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "tensor": {
                    "value": "eigvecs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_323": {
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_161": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "a": {
                    "value": "tf.transpose(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "vector_prod_fn(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_304": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "diag_314": {
                "diagonal": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "alpha.write(0, cur_alpha)",
                            "Call"
                        ],
                        [
                            "alpha.stack()",
                            "Call"
                        ],
                        [
                            "alpha.write(i, cur_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_315": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_pos'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_neg'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_quad'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_lu'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_161": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_171": {
                "a": {
                    "value": "norm_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / grad_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_196": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/initializers.py": {
        "tensorflow": {
            "rsqrt_22": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.reduce_prod(shape[:-1]), tf.float32) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_22": {
                "x": {
                    "value": "tf.reduce_prod(shape[:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_22": {
                "input_tensor": {
                    "value": "shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_203": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "mix_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_235": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_253": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ],
                        [
                            "terms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_323": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "sqr_norm_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.pow(A, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, batchA]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "sqr_norm_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.pow(B, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batchB, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_414": {
                "variable": {
                    "value": "inner_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_416": {
                "variable": {
                    "value": "tile_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_norm_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.pow(A, 2), 1), [1, batchA])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batchB, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_417": {
                "variable": {
                    "value": "tile_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_norm_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.pow(B, 2), 1), [batchB, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, batchA]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_428": {
                "variable": {
                    "value": "normalized_A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_429": {
                "variable": {
                    "value": "normalized_B",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_430": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "normalized_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(B, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_504": {
                "variable": {
                    "value": "summed_masked_pick_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "SNNLCrossEntropy.masked_pick_probability(x, y, temp, cos_distance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_524": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "temp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_532": {
                "variable": {
                    "value": "updated_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.subtract(t, 0.1 * tf.gradients(ent_loss, t)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_119": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ],
                        [
                            "terms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_238": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_449": {
                "x": {
                    "value": "-(distance_matrix / temp)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_476": {
                "x": {
                    "value": "tf.squeeze(tf.equal(y, tf.expand_dims(y2, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_507": {
                "input_tensor": {
                    "value": "-tf.log(SNNLCrossEntropy.STABILITY_EPS + summed_masked_pick_prob)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_199": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_249": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_320": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_409": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_410": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_412": {
                "input_tensor": {
                    "value": "tf.pow(A, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_413": {
                "input_tensor": {
                    "value": "tf.pow(B, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_463": {
                "num_rows": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_476": {
                "input": {
                    "value": "tf.equal(y, tf.expand_dims(y2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_529": {
                "x": {
                    "value": "initial_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_temp",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_532": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.1 * tf.gradients(ent_loss, t)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_231": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_320": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_412": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_413": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_465": {
                "input": {
                    "value": "tf.reduce_sum(f, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_476": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - self.smoothing * (y - 1.0 / tf.cast(y.shape[-1], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(y2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_508": {
                "x": {
                    "value": "SNNLCrossEntropy.STABILITY_EPS + summed_masked_pick_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_544": {
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_545": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - self.smoothing * (y - 1.0 / tf.cast(y.shape[-1], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_551": {
                "inputs": {
                    "value": "layers_SNNL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[loss_fn(tf.layers.flatten(layer), tf.argmax(y, axis=1), self.temperature, self.cos_distance) for layer in self.layers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_181": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_463": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_465": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SNNLCrossEntropy.fits(x, x, temp, cos_distance) - tf.eye(tf.shape(x)[0])",
                            "BinOp"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_476": {
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_174": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_284": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_349": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_532": {
                "ys": {
                    "value": "ent_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SNNLCrossEntropy.SNNL(x, y, inverse_temp(t), cos_distance)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_202": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_176": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_286": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_135": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_82": {
                "input": {
                    "value": "self.get_logits(x, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_93": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_94": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_141": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_242": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_243": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_100": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_249": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_99": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, min_prob.dtype))]",
                            "List"
                        ],
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, max_prob.dtype))]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_248": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, min_prob.dtype))]",
                            "List"
                        ],
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, max_prob.dtype))]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_96": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_245": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_246": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/all_convolutional.py": {
        "tensorflow": {
            "conv2d_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_filters << scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_filters << scale + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling2d_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/basic_cnn.py": {
        "tensorflow": {
            "dense_41": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.layers.flatten(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.HeReLuNormalInitializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_42": {
                "structure": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(x, self.nb_filters, 8, strides=2, padding='same')",
                            "Call"
                        ],
                        [
                            "my_conv(y, 2 * self.nb_filters, 6, strides=2, padding='valid')",
                            "Call"
                        ],
                        [
                            "my_conv(y, 2 * self.nb_filters, 5, strides=1, padding='valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_46": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.layers.flatten(y), self.nb_classes, kernel_initializer=initializers.HeReLuNormalInitializer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/deep_k_nearest_neighbors/dknn.py": {
        "tensorflow": {
            "GPUOptions_483": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_485": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "py_func_376": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.fprop_np",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_integer_603": {
                "name": {
                    "value": "number_bits",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of hash bits used by LSH Index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_604": {
                "name": {
                    "value": "tensorflow_gpu_memory_fraction",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "amount of the GPU memory to allocate for a tensorflow Session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_class_609": {
                "name": {
                    "value": "nearest_neighbor_backend",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NearestNeighbor.BACKEND.FALCONN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enum_class": {
                    "value": "NearestNeighbor.BACKEND",
                    "type": "Attribute",
                    "possible_values": []
                },
                "help": {
                    "value": "NearestNeighbor backend",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_615": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_616": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of training batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_617": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_619": {
                "name": {
                    "value": "nb_cali",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "750",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of calibration points for the DkNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_620": {
                "name": {
                    "value": "neighbors",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "75",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of neighbors per layer for the DkNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_503": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_504": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_485": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_501": {
                "name_or_scope": {
                    "value": "dknn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_544": {
                "variable": {
                    "value": "layer_sym",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "model.get_layer(x, layer)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/madry_lab_challenges/cifar10_model.py": {
        "tensorflow": {
            "zeros_122": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "(None",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "(None",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "debug_283": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_293": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_300": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_311": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_316": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_130": {
                "variable": {
                    "value": "input_standardized",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.per_image_standardization(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.num_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.constant()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_231": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [self.dim, self.num_hid], initializer=tf.initializers.variance_scaling(distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "self.make_vars()",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [self.num_hid], initializer=tf.initializers.constant())",
                            "Call"
                        ],
                        [
                            "self.make_vars()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_236": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_271": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_272": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_298": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_306": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_311": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_328": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_344": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_292": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_304": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_131": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/madry_lab_challenges/make_cifar10_joblib.py": {
        "tensorflow": {
            "latest_checkpoint_29": {
                "variable": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'models/model_0')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_74": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_55": {
                "ref": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var2 in enumerate(model2.get_vars())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_vars()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/model_zoo/soft_nearest_neighbor_loss/SNNL_regularized_model.py": {
        "tensorflow": {
            "placeholder_29": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.layers.flatten(conv3)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.HeReLuNormalInitializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(conv2, 2 * self.nb_filters, 5, strides=1, padding='valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.layers.flatten(conv3), self.nb_classes, kernel_initializer=initializers.HeReLuNormalInitializer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_208": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_293": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_410": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_436": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_471": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_472": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_566": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(tf.square(x), axis=axis, keepdims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_567": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(tf.square(x), axis=axis, keepdims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_571": {
                "variable": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(num_pixels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_572": {
                "variable": {
                    "value": "pixel_value_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(variance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.to_float(num_pixels))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_575": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pixel_value_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "variable"
                        ]
                    ]
                }
            },
            "div_576": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pixel_value_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(stddev, min_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_770": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_772": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_773": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_775": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_802": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_265": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_266": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_336": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_355": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_373": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_393": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_427": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_443": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_456": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_473": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_712": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_716": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_739": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_879": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_883": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_472": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_565": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_571": {
                "x": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_640": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_774": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_803": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_192": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_265": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_336": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_472": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_474": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_474": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_569": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_411": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/plot/pyplot_image.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_125": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_42": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_45": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_89": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_115": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_175": {
                "variable": {
                    "value": "trainable_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_181": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "executing_eagerly_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_180": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_186": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_177": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_155": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_177": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_187": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_193": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_196": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_198": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_202": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_324": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_200": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_204": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/utils_keras.py": {
        "tensorflow": {
            "image_data_format_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_29": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_36": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tout",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_83": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_bprop_fn",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_61": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_72": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_63": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_452": {
                "variable": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(clip, mul(grad, 0), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_456": {
                "variable": {
                    "value": "clip_low",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(x, tf.cast(clip_min, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(signed_grad, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_459": {
                "variable": {
                    "value": "clip_high",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(x, tf.cast(clip_max, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(signed_grad, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_462": {
                "variable": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.less_equal(x, tf.cast(clip_min, x.dtype)), tf.less(signed_grad, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.greater_equal(x, tf.cast(clip_max, x.dtype)), tf.greater(signed_grad, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_463": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(clip_low, clip_high)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "mul(grad, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(clip, mul(grad, 0), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_614": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_248": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_303": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_358": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_362": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_363": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_372": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_373": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_374": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_525": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_538": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform((shape[0], 1), dtype=dtype, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / tf.cast(dim, dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_731": {
                "t": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(mu - js * (cumsums - eps), 0), eta.dtype)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_value_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast_clip(clip_value_min)",
                            "Call"
                        ],
                        [
                            "clip_value_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_value_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast_clip(clip_value_max)",
                            "Call"
                        ],
                        [
                            "clip_value_max",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_792": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(a, b.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "b.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_795": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b, a.dtype)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "a.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_845": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_variable_initialized_66": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_211": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_357": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_364": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_371": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_loss_376": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_402": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(eps, eta.dtype)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_404": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(eta)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_405": {
                "variable": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_406": {
                "variable": {
                    "value": "abs_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eta, (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_413": {
                "variable": {
                    "value": "cumsums",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.sort(-abs_eta, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.nn.top_k(abs_eta, k=dim, sorted=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_414": {
                "variable": {
                    "value": "js",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(1, tf.range(1, dim + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_415": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(mu - js * (cumsums - eps), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_417": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t * cumsums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_418": {
                "variable": {
                    "value": "rho_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t * cumsums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_419": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rho_val - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(1 + rho, eta.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_421": {
                "variable": {
                    "value": "eta_sgn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eta, (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta_sgn * tf.maximum(abs_eta - theta[:, tf.newaxis], 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(eta_proj, tf.shape(eta))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(eta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_425": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_426": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(norm, eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta_sgn * tf.maximum(abs_eta - theta[:, tf.newaxis], 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(eta_proj, tf.shape(eta))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_457": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_457": {
                "x": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_460": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_460": {
                "x": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_531": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_663": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_806": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_less_equal_807": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_816": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_greater_equal_817": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_826": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_827": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variables_initializer_76": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_162": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_248": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_361": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_431": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_438": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "div(eps, norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_457": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_460": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_534": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_539": {
                "shape": {
                    "value": "(shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_542": {
                "tensor": {
                    "value": "w * x / norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_723": {
                "variable": {
                    "value": "clip_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "clip.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_360": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_414": {
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(1, dim + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_415": {
                "x": {
                    "value": "mu - js * (cumsums - eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_419": {
                "x": {
                    "value": "1 + rho",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_422": {
                "x": {
                    "value": "abs_eta - theta[:, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_423": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_425": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_426": {
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(eta), reduc_ind)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(x), axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(x), axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(eps, eta.dtype)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_531": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_540": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(eta)[1:])",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_404": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_409": {
                "values": {
                    "value": "-abs_eta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_412": {
                "input": {
                    "value": "abs_eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(eta_flat)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(eta)[1:])",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_432": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_534": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_725": {
                "x": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(clip_low, clip_high)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_892": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_534": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_433": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_193": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_186": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_218": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_220": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_99": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_100": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model.get_probs(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/cifar10_tutorial_tf.py": {
        "tensorflow": {
            "Session_86": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_76": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_197": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/evaluate_pickled_model.py": {
        "tensorflow": {
            "Session_58": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_48": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_blackbox.py": {
        "tensorflow": {
            "Session_265": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_291": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_128": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_rows, img_cols, nchannels))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_dense(y, self.nb_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_cw.py": {
        "tensorflow": {
            "Session_78": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_75": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_jsma.py": {
        "tensorflow": {
            "Session_69": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_66": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_keras.py": {
        "tensorflow": {
            "ConfigProto_61": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_71": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_59": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_session_72": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_197": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "categorical_crossentropy_209": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_214": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "categorical_crossentropy_218": {
                "variable": {
                    "value": "cross_ent_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_adv)",
                            "Call"
                        ],
                        [
                            "model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "categorical_accuracy_201": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_adv)",
                            "Call"
                        ],
                        [
                            "model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_112": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_159": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_keras_tf.py": {
        "tensorflow": {
            "Session_85": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_138": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_DIR",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_167": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_77": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_session_86": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_picklable.py": {
        "tensorflow": {
            "Session_85": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_75": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_207": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_pytorch.py": {
        "tensorflow": {
            "Session_154": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "x_op",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "run_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BATCH_SIZE",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BATCH_SIZE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "torch_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_model(xs)",
                            "Call"
                        ],
                        [
                            "torch_model(xs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "Variable(ys)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "ys.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(ys)",
                            "Call"
                        ],
                        [
                            "ys.cuda()",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_tf.py": {
        "tensorflow": {
            "Session_87": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_77": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_185": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/mnist_tutorial_tfe.py": {
        "tensorflow": {
            "executing_eagerly_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_118": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/cleverhans_tutorials/tutorial_models_tfe.py": {
        "tensorflow": {
            "Conv2D_35": {
                "variable": {
                    "value": "self.layers[conv_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_42": {
                "variable": {
                    "value": "self.layers[conv_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_49": {
                "variable": {
                    "value": "self.layers[conv_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_56": {
                "variable": {
                    "value": "self.layers[flatten]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "self.layers[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "self.layer_acts[probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.layer_acts['logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "shape": {
                    "value": "(32, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "executing_eagerly_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/RL-attack/enjoy-adv.py": {
        "tensorflow": {
            "Graph_230": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_231": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_77": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_91": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_90": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/RL-attack/model.py": {
        "tensorflow": {
            "flatten_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_7": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_dense(actions_hidden, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(actions_hidden, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "action_scores - tf.expand_dims(action_scores_mean, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/RL-attack/train.py": {
        "tensorflow": {
            "FileWriter_306": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "savedir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_dir",
                            "Attribute"
                        ],
                        [
                            "tempfile.TemporaryDirectory().name",
                            "Attribute"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_247": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_303": {
                "input_tensor": {
                    "value": "tf.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_303": {
                "x": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/adversarial_asr/generate_imperceptible_adv.py": {
        "tensorflow": {
            "concat_215": {
                "variable": {
                    "value": "self.loss_th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.loss_th_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_217": {
                "variable": {
                    "value": "self.optimizer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_stage1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_218": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_stage2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_233": {
                "variable": {
                    "value": "self.train2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.train21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.train22",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_252": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_372": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_523": {
                "variable": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_133": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, FLAGS.max_length_dataset), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "self.input_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.tgt_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.sample_rate_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_sample_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_th",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.psd_max_ori",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_psd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.mask_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.maxlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.lr_stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_171": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones((batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_rescale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones(batch_size, dtype=np.float32) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_179": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.identity(self.delta_large)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, self.maxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_187": {
                "variable": {
                    "value": "self.pass_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.new_input + self.noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(logits_delta - self.th[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_213": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack_stage2(audios, trans, adv, th_batch, psd_max_batch, maxlen, sample_rate, masks, masks_freq, l, data_sub, FLAGS.lr_stage2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.relu(logits_delta - self.th[i]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(loss_th, dim=0)",
                            "Call"
                        ],
                        [
                            "[np.inf] * self.batch_size",
                            "BinOp"
                        ],
                        [
                            "[np.inf] * self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_522": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "cluster.GetPlacer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_259": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_262": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros((self.batch_size, FLAGS.max_length_dataset), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_378": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_381": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size, dtype=np.float32) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_385": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, FLAGS.max_length_dataset])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_524": {
                "config": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_180": {
                "input": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_183": {
                "t": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-FLAGS.initial_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "FLAGS.initial_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_202": {
                "key": {
                    "value": "per_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_212": {
                "features": {
                    "value": "logits_delta - self.th[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_230": {
                "x": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_340": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rescale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.rescale)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_498": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_489": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/adversarial_asr/generate_robust_adv.py": {
        "tensorflow": {
            "AdamOptimizer_222": {
                "variable": {
                    "value": "self.optimizer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_247": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_395": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_542": {
                "variable": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_140": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, FLAGS.max_length_dataset), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.input_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.tgt_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.rir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.sample_rate_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_sample_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self.mask_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "self.maxlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self.lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones((batch_size, 1), dtype=np.float32) * FLAGS.initial_bound",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_rescale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_186": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.identity(self.delta_large)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, self.maxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_189": {
                "variable": {
                    "value": "self.apply_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.rescale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_190": {
                "variable": {
                    "value": "self.before_rir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.apply_delta * self.mask + self.input_tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_203": {
                "variable": {
                    "value": "self.pass_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.new_input + self.noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_541": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_146": {
                "device_name": {
                    "value": "cluster.GetPlacer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_254": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1), dtype=np.float32) * FLAGS.initial_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_260": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros((self.batch_size, FLAGS.max_length_dataset), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_401": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, FLAGS.max_length_dataset])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_402": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max(np.abs(adv), axis=1) + FLAGS.max_delta",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(rescales, axis=1)",
                            "Call"
                        ],
                        [
                            "rescales",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_543": {
                "config": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_187": {
                "input": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_219": {
                "key": {
                    "value": "per_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sign_226": {
                "x": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_355": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rescale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.rescale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/adversarial_asr/test_imperceptible_adv.py": {
        "tensorflow": {
            "ConfigProto_88": {
                "variable": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_86": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_87": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_89": {
                "config": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "input_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "tgt_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "sample_rate_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "mask_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_112": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_features(input_tf, sample_rate_tf, mask_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_95": {
                "device_name": {
                    "value": "cluster.GetPlacer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_117": {
                "key": {
                    "value": "per_loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/adversarial_asr/test_robust_adv.py": {
        "tensorflow": {
            "ConfigProto_112": {
                "variable": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_110": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_111": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_113": {
                "config": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "input_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "tgt_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "sample_rate_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "mask_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "rir_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_149": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_features(new_input, sample_rate_tf, mask_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_119": {
                "device_name": {
                    "value": "cluster.GetPlacer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_154": {
                "key": {
                    "value": "per_loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/adversarial_asr/tool.py": {
        "tensorflow": {
            "expand_dims_9": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(audio, axis=0)",
                            "Call"
                        ],
                        [
                            "audio",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_42": {
                "variable": {
                    "value": "input_unpack",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tf",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "features_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "src_paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(features)[0], tf.shape(features)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "src_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "inputs.sample_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "speech_rirs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "speech_rir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_86": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(rir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rfft_90": {
                "variable": {
                    "value": "sp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rir",
                            "Method Argument"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1 + s2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rfft_91": {
                "variable": {
                    "value": "sp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.slice(tf.reshape(audios[i], [-1]), [0], [lengths_audios[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1 + s2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "irfft_104": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sp1 * sp2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1 + s2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.spectral.irfft(sp1 * sp2, shape)",
                            "Call"
                        ],
                        [
                            "ret * (2 ** (16 - 1) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ret, -2 ** (16 - 1), 2 ** (16 - 1) - 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(ret, tf.constant([[0, 100000]]))",
                            "Call"
                        ],
                        [
                            "ret[:max_len]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-2 ** (16 - 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** (16 - 1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.spectral.irfft(sp1 * sp2, shape)",
                            "Call"
                        ],
                        [
                            "ret * (2 ** (16 - 1) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ret, -2 ** (16 - 1), 2 ** (16 - 1) - 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(ret, tf.constant([[0, 100000]]))",
                            "Call"
                        ],
                        [
                            "ret[:max_len]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.constant([[0, 100000]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stft_130": {
                "variable": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "self.frame_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "self.frame_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_132": {
                "variable": {
                    "value": "psd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * tf.abs(win / self.window_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_12": {
                "control_inputs": {
                    "value": "[tf.assert_equal(sample_rate, static_sample_rate)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_107": {
                "input_tensor": {
                    "value": "tf.abs(ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "rir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_92": {
                "input_": {
                    "value": "tf.reshape(audios[i], [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[lengths_audios[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_107": {
                "x": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.spectral.irfft(sp1 * sp2, shape)",
                            "Call"
                        ],
                        [
                            "ret * (2 ** (16 - 1) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ret, -2 ** (16 - 1), 2 ** (16 - 1) - 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(ret, tf.constant([[0, 100000]]))",
                            "Call"
                        ],
                        [
                            "ret[:max_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_110": {
                "value": {
                    "value": "[[0, 100000]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.spectral.irfft(sp1 * sp2, shape)",
                            "Call"
                        ],
                        [
                            "ret * (2 ** (16 - 1) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ret, -2 ** (16 - 1), 2 ** (16 - 1) - 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(ret, tf.constant([[0, 100000]]))",
                            "Call"
                        ],
                        [
                            "ret[:max_len]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_131": {
                "x": {
                    "value": "win / self.window_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assert_equal_12": {
                "x": {
                    "value": "sample_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "static_sample_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16000",
                            "int"
                        ]
                    ]
                }
            },
            "shape_60": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "audios[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_133": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "9.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "psd_max_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_max_ori",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/facenet_adversarial_faces/facenet_fgsm.py": {
        "tensorflow": {
            "get_default_graph_20": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.victim_embedding_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.embedding_output - self.victim_embedding_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_36": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 + (distance - threshold) * 0.5 / (4.0 - threshold)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * distance / threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "variable": {
                    "value": "self.softmax_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([reverse_score, score])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_66": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "self.embedding_output - self.victim_embedding_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_42": {
                "values": {
                    "value": "[reverse_score, score]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/imagenet_featadvs/model.py": {
        "tensorflow": {
            "flatten_31": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 4096, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 1000)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/madry_lab_challenges/cifar10/attack_model.py": {
        "tensorflow": {
            "latest_checkpoint_27": {
                "variable": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_integer_140": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_142": {
                "name": {
                    "value": "nb_samples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of samples to test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_144": {
                "name": {
                    "value": "attack_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fgsm",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Attack type: 'fgsm'->'fast gradient sign method', 'pgd'->'projected gradient descent', 'cwl2'->'Carlini & Wagner L2'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_155": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'models/adv_trained')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_159": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_data_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'cifar10_data')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Dataset directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_161": {
                "name": {
                    "value": "sweep",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Sweep epsilon or single epsilon?",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_163": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/madry_lab_challenges/mnist/attack_model.py": {
        "tensorflow": {
            "latest_checkpoint_27": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_72": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_95": {
                "name": {
                    "value": "label_smooth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Amount to subtract from correct label and distribute among other labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_100": {
                "name": {
                    "value": "attack_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fgsm",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Attack type: 'fgsm'->fast gradient signmethod, 'bim'->'basic iterative method'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_108": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(*dirs)",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_111": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/madry_lab_challenges/mnist/madry_mnist_model.py": {
        "tensorflow": {
            "relu_50": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(x, self.W_conv1) + self.b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(h_pool1, self.W_conv2) + self.b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, self.W_fc1) + self.b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "output[self.O_PROBS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, self.W_fc2) + self.b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truncated_normal_73": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_74": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_79": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_87": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, self.W_fc1) + self.b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/attacks_multigpu.py": {
        "tensorflow": {
            "device_36": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_59": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "model_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "init_rand",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_64": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(x), -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(eta)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "clone_variable('eta', eta)",
                            "Call"
                        ],
                        [
                            "self.attack_single_step(x, eta, y_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_66": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone_variable('x', x)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=x_val.shape, name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_79": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "'attack_%d' % len(self.graphs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "'step%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_104": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x, name='adv_x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "adv_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_118": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone_variable('x', x)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=x_val.shape, name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_101": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x, name='adv_x')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/evaluator.py": {
        "tensorflow": {
            "merge_all_138": {
                "variable": {
                    "value": "self.sum_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_196": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "attack_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack_type",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_137": {
                "name": {
                    "value": "att_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.attack_type_test.split(',')",
                            "Call"
                        ],
                        [
                            "self.attack_type_test",
                            "Attribute"
                        ],
                        [
                            "self.attack_type_test",
                            "Attribute"
                        ],
                        [
                            "att_type",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.generate(x, **params)",
                            "Call"
                        ],
                        [
                            "create_adv_by_name(model, x, att_type, sess, dataset=hparams.dataset, y=y)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/model.py": {
        "tensorflow": {
            "get_variable_18": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.num_hid,)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.output_channels,)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "initializer.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "lambda shape, dtype, partition_info: initializer",
                    "type": "Lambda",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_411": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_418": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_427": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_429": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + tf.reduce_mean(tf.square(x), (1, 2), keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_145": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_160": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_179": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_332": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dim, self.num_hid]",
                            "List"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_358": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(self.kernel_shape) + (input_channels, self.output_channels)",
                            "BinOp"
                        ],
                        [
                            "tuple(self.kernel_shape) + (input_channels, self.output_channels)",
                            "BinOp"
                        ],
                        [
                            "kernel_shape",
                            "Method Argument"
                        ],
                        [
                            "kernel_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_pool_397": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "(1,) + tuple(self.ksize) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_126": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_285": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unify_device_name(device_name)",
                            "Call"
                        ],
                        [
                            "self.device_name",
                            "Attribute"
                        ],
                        [
                            "device_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_339": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_374": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_415": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_422": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_429": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_429": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_90": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_113": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_307": {
                "ref": {
                    "value": "params[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "host_params[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/resnet_tf.py": {
        "tensorflow": {
            "get_or_create_global_step_51": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_174": {
                "variable": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_175": {
                "variable": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_177": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_178": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "cost + self._decay()",
                            "BinOp"
                        ],
                        [
                            "cost",
                            "variable"
                        ],
                        [
                            "cost",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_197": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "multiply_304": {
                "variable": {
                    "value": "self.decay_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hps.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_model(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.hps.nb_classes)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_165": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_model(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.hps.nb_classes)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_328": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_345": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "Resnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_239": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_240": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_304": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "less_328": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "common_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "residual_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_297": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "layer.params_device[self.device_name].values()",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_302": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "layer.params_device[self.device_name].values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/test_attack_multigpu.py": {
        "tensorflow": {
            "constant_35": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.W1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, self.W1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/test_run_multigpu.py": {
        "tensorflow": {
            "set_random_seed_64": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_75": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_138": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_152": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/test_runner.py": {
        "tensorflow": {
            "Session_19": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'v%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/trainer.py": {
        "tensorflow": {
            "Session_61": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_286": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_58": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_65": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.hparams.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "x_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, 28, 28, 1)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "self.input_shape",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_194": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hparams.adam_lrn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_112": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_369": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_393": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_422": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConfigProto_61": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_343": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "'step%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/utils.py": {
        "tensorflow": {
            "split_18": {
                "variable": {
                    "value": "images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(images_batch.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_24": {
                "variable": {
                    "value": "result_images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "result_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "preprocess",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "reshaped_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_list",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "img.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "input": {
                    "value": "processed_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preproc_func(reshaped_img)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/utils_cifar.py": {
        "tensorflow": {
            "random_crop_173": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_175": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_178": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_179": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_180": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "per_image_standardization_182": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/multigpu_advtrain/utils_svhn.py": {
        "tensorflow": {
            "random_crop_97": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/fgsm/attack_fgsm.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_30": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_58": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_134": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_146": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_147": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_153": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_148": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/noop/attack_noop.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_22": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_50": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/random_noise/attack_random_noise.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_22": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_50": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "x_output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "noisy_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input + eps * tf.sign(tf.random_normal(batch_shape))",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "run_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_89": {
                "target": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_86": {
                "x": {
                    "value": "tf.random_normal(batch_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/adv_inception_v3/defense.py": {
        "tensorflow": {
            "DEFINE_string_22": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_58": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_79": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_90": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_94": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_100": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_95": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/base_inception_model/defense.py": {
        "tensorflow": {
            "DEFINE_string_22": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_58": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_78": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_93": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_99": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_94": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/ens_adv_inception_resnet_v2/defense.py": {
        "tensorflow": {
            "DEFINE_string_23": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_59": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_80": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_91": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_94": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_95": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_101": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_96": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/ens_adv_inception_resnet_v2/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_47": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, nb_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_229": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_273": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_330": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_427": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, nb_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_412": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_targeted_attacks/iter_target_class/attack_iter_target_class.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_30": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "iter_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Step size for one iteration.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "num_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_68": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_112": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_119": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_120": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_127": {
                "variable": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[FLAGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1001",
                            "int"
                        ]
                    ]
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_149": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_134": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(x_adv, num_classes=nb_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_144": {
                "variable": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv - alpha * tf.sign(tf.gradients(cross_entropy, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_next, x_min, x_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_input - eps, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_input + eps, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_137": {
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MonitoredSession_155": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_150": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_143": {
                "x": {
                    "value": "tf.gradients(cross_entropy, x_adv)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_143": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(one_hot_target_class, logits, label_smoothing=0.1, weights=1.0)",
                            "Call"
                        ],
                        [
                            "cross_entropy + tf.losses.softmax_cross_entropy(one_hot_target_class, end_points['AuxLogits'], label_smoothing=0.1, weights=0.4)",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "x_next",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/nips17_adversarial_competition/dev_toolkit/sample_targeted_attacks/step_target_class/attack_step_target_class.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_30": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_64": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_105": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[FLAGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1001",
                            "int"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_120": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(x_input, num_classes=nb_classes, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_130": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input - eps * tf.sign(tf.gradients(cross_entropy, x_input)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_133": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_134": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_123": {
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MonitoredSession_140": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_129": {
                "x": {
                    "value": "tf.gradients(cross_entropy, x_input)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Scaffold_135": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_129": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(one_hot_target_class, logits, label_smoothing=0.1, weights=1.0)",
                            "Call"
                        ],
                        [
                            "cross_entropy + tf.losses.softmax_cross_entropy(one_hot_target_class, end_points['AuxLogits'], label_smoothing=0.1, weights=0.4)",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/utils.py": {
        "tensorflow": {
            "get_default_graph_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_8": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_31": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_34": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tout",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_64": {
                "variable": {
                    "value": "gradient_x",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_backward_py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_backward_py",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad, images]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/examples/test_imagenet_attacks.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "DEFAULT_INCEPTION_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/fgsm/inception_v3.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_53": {
                "name": {
                    "value": "input_image_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dataset/images')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to image directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "metadata_file_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dataset/dev_dataset.csv')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to metadata file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(logits, labels, 1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_144": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_156": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_179": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_182": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + batch_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_200": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_229": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + batch_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_252": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_253": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "in_top_k_131": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x_adv)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_images, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_162": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_164": {
                "msg": {
                    "value": "Accuracy: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(acc, feed_dict={x_input: images, y_label: labels})",
                            "Call"
                        ],
                        [
                            "sess.run(acc, feed_dict=feed_dict_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredSession_206": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredSession_260": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_157": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_201": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_254": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "info_267": {
                "msg": {
                    "value": "Accuracy: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(acc, feed_dict={x_input: images, y_label: labels})",
                            "Call"
                        ],
                        [
                            "sess.run(acc, feed_dict=feed_dict_i)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/compute_accuracy.py": {
        "tensorflow": {
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_88": {
                "seed": {
                    "value": "20181014",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/make_confidence_report.py": {
        "tensorflow": {
            "run_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/make_confidence_report_bundle_examples.py": {
        "tensorflow": {
            "Session_58": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/make_confidence_report_bundled.py": {
        "tensorflow": {
            "run_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/make_confidence_report_spsa.py": {
        "tensorflow": {
            "Session_99": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_93": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/scripts/plot_success_fail_curve.py": {
        "tensorflow": {
            "run_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_attacks.py": {
        "tensorflow": {
            "sigmoid_53": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, -1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_95": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_129": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_139": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_185": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_269": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_306": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_315": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_329": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_333": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_360": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_408": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_421": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_422": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_519": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_738": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_801": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_1000": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_1015": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1067": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_1068": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1179": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_1232": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1345": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1376": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1398": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1459": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1470": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1520": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_1533": {
                "variable": {
                    "value": "x_src",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(input_shape, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1534": {
                "variable": {
                    "value": "x_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(input_shape, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1550": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1576": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1607": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_1608": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1662": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_1663": {
                "variable": {
                    "value": "first_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.flatten(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1665": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[second_logit, first_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_1682": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1695": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1723": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1755": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_1784": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1812": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1874": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1875": {
                "variable": {
                    "value": "y_target_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1876": {
                "variable": {
                    "value": "image_target_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_995": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_1006": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(101,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_1531": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, -1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_55": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "virtual_adv_dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_962": {
                "name": {
                    "value": "sparse_l1_descent_dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_964": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_1351": {
                "name": {
                    "value": "dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_1664": {
                "input": {
                    "value": "first_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(flat_x, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1666": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1687": {
                "name": {
                    "value": "dummy_model_spatial",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1689": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_90": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, 10, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_146": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_963": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1352": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1688": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_dtype_51": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_52": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1507": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_1670": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1504": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1514": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 4096, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 1000)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros([100, 2])",
                            "Call"
                        ],
                        [
                            "np.zeros([100, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_attacks_tf.py": {
        "tensorflow": {
            "sigmoid_37": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_45": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, nb_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [input_dim, nb_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "res[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "slice_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x, probs)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[random_example, random_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_61": {
                "variable": {
                    "value": "(dx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(adv_x, [random_example, random_feature], [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "x_val_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 200, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_262": {
                "variable": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_264": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "sbhwc->bshwc",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size=30)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_270": {
                "variable": {
                    "value": "after_lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('sbhwc->bshwc', transformed_ims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_35": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_95": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(init_model_logits, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_101": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-5.0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_39": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "self.model.fprop(input_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_263": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_83": {
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "res[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_95": {
                "input": {
                    "value": "init_model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model_output[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_265": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_265": {
                "x": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_35": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_36": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_confidence_report.py": {
        "tensorflow": {
            "Session_38": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_defenses.py": {
        "tensorflow": {
            "sigmoid_32": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_85": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_37": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_30": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_31": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_blackbox.py": {
        "tensorflow": {
            "Graph_29": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_41": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_tutorial_cw.py": {
        "tensorflow": {
            "Graph_21": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_34": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_tutorial_jsma.py": {
        "tensorflow": {
            "Graph_24": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_39": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_tutorial_keras.py": {
        "tensorflow": {
            "Graph_27": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_39": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_tutorial_keras_tf.py": {
        "tensorflow": {
            "Graph_30": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_42": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_mnist_tutorial_tf.py": {
        "tensorflow": {
            "Graph_27": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_42": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_picklable_model.py": {
        "tensorflow": {
            "Session_23": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_31": {
                "variable": {
                    "value": "self.y_true",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fn": {
                    "value": "tf.image.per_image_standardization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_109": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_projected_gradient_descent.py": {
        "tensorflow": {
            "Session_30": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_27": {
                "shape": {
                    "value": "(batch_size, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_serial.py": {
        "tensorflow": {
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_26": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_utils.py": {
        "tensorflow": {
            "Session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_utils_keras.py": {
        "tensorflow": {
            "Session_35": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_58": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_71": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans_v3.1.0/tests_tf/test_utils_tf.py": {
        "tensorflow": {
            "Session_32": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0], [-1.0], [1], [0.5], [-1], [1], [-0.9], [0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0], [-1.0], [1.0], [1.0], [1.0], [-1.0], [-1.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_92": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "utils_tf.clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0], [-1.0], [1], [0.5], [-1], [1], [-0.9], [0.9]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tutorials/tf2/cifar10_tutorial.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_72": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_76": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_77": {
                "variable": {
                    "value": "test_acc_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_78": {
                "variable": {
                    "value": "test_acc_fgsm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_79": {
                "variable": {
                    "value": "test_acc_pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Progbar_102": {
                "variable": {
                    "value": "progress_bar_test",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_30": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image - 1.0",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "projected_gradient_descent(model, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[w] * 2, [w] * 2, [0] * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Progbar_93": {
                "variable": {
                    "value": "progress_bar_train",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "50000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_24": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters << scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters << scale + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AveragePooling2D_26": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "projected_gradient_descent(model, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_51": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "projected_gradient_descent(model, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_55": {
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[w] * 2, [w] * 2, [0] * 2], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "projected_gradient_descent(model, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/tf2/mnist_tutorial.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_57": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_61": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_62": {
                "variable": {
                    "value": "test_acc_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_63": {
                "variable": {
                    "value": "test_acc_fgsm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_64": {
                "variable": {
                    "value": "test_acc_pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Progbar_87": {
                "variable": {
                    "value": "progress_bar_test",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_20": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_22": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Progbar_78": {
                "variable": {
                    "value": "progress_bar_train",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/torch/attacks/carlini_wagner_l2.py": {
        "torch": {
            "clamp_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.randn(5, 10), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "(x - clip_min) / (clip_max - clip_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.arctanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.randn(5, 10), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "(x - clip_min) / (clip_max - clip_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.arctanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arctanh_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * 0.999999",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.randn(5, 10), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "(x - clip_min) / (clip_max - clip_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.arctanh(x * 0.999999)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_124": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 9, (5,))",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_195": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(5, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_196": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_202": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(new_x)",
                            "Call"
                        ],
                        [
                            "torch.argmax(new_pred, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_207": {
                "variable": {
                    "value": "new_pred_untargeted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_pred_untargeted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(new_x_untargeted)",
                            "Call"
                        ],
                        [
                            "torch.argmax(new_pred_untargeted, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(x)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_copy)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_96": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_127": {
                "input": {
                    "value": "(other - real if targeted else real - other) + confidence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_131": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "input": {
                    "value": "list(range(len(x.size())))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_onehot * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_148": {
                "variable": {
                    "value": "(other, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - y_onehot) * logits - y_onehot * 10000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "variable": {
                    "value": "pred_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_143": {
                "input": {
                    "value": "modifier + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_171": {
                "variable": {
                    "value": "bestscore[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/torch/attacks/fast_gradient_method.py": {
        "torch": {
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_61": {
                "variable": {
                    "value": "assert_ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(x, torch.tensor(clip_min, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_67": {
                "variable": {
                    "value": "assert_le",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.le(x, torch.tensor(clip_max, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ge_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_min, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_max, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/torch/attacks/hop_skip_jump_attack.py": {
        "torch": {
            "clamp_239": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialize(decision_function, sample, shape, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "target_image.to(sample.device)",
                            "Call"
                        ],
                        [
                            "binary_search_batch(sample, perturbed, decision_function, shape, constraint, theta)",
                            "Call"
                        ],
                        [
                            "torch.clamp(perturbed + epsilon * update, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "binary_search_batch(sample, perturbed, decision_function, shape, constraint, theta)",
                            "Call"
                        ],
                        [
                            "binary_search_batch(sample, perturbeds[idx_perturbed], decision_function, shape, constraint, theta)",
                            "Call"
                        ],
                        [
                            "sample + delta * rv.to(sample.device)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "fval_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * decisions.view((decisions.shape[0],) + (1,) * len(shape)) - 1.0",
                            "BinOp"
                        ],
                        [
                            "fval - fval_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_280": {
                "variable": {
                    "value": "dists_post_update",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[compute_distance(original_image, perturbed_image, constraint) for perturbed_image in perturbed_images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_296": {
                "variable": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(perturbed_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[compute_distance(original_image, out_image, constraint) for out_image in out_images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "min_318": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([compute_distance(original_image, out_image, constraint) for out_image in out_images])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_219": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ori - x_pert",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_232": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[num_evals] + list(shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_249": {
                "variable": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(noise_shape)",
                            "Call"
                        ],
                        [
                            "rv / torch.sqrt(torch.sum(rv ** 2, dim=axis, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "(perturbed - sample) / delta",
                            "BinOp"
                        ],
                        [
                            "-1 + torch.rand(noise_shape) * 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_291": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists_post_update * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_293": {
                "variable": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(perturbed_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_305": {
                "variable": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "decisions == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(highs + lows) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(perturbed_images)).to(original_image.device)",
                            "Call"
                        ],
                        [
                            "torch.where(decisions == 0, mids, lows)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_306": {
                "variable": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "decisions == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(highs + lows) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dists_post_update",
                            "variable"
                        ],
                        [
                            "torch.ones(len(perturbed_images)).to(original_image.device)",
                            "Call"
                        ],
                        [
                            "torch.where(decisions == 1, mids, highs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_82": {
                "variable": {
                    "value": "(_, original_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_89": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(images, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_95": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_221": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_ori - x_pert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_237": {
                "input": {
                    "value": "torch.sum(rv ** 2, dim=axis, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_254": {
                "variable": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fval * rv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_257": {
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approximate_gradient(decision_function, perturbed, num_evals, delta, constraint, shape[1:], clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "torch.mean(rv, dim=0)",
                            "Call"
                        ],
                        [
                            "gradf / torch.norm(gradf, p=2)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(rv, dim=0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(fval * rv, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_268": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_images",
                            "Method Argument"
                        ],
                        [
                            "perturbed_images",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "original_image - alphas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "original_image + alphas",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_298": {
                "input": {
                    "value": "(highs - lows) / thresholds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_142": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approximate_gradient(decision_function, perturbed, num_evals, delta, constraint, shape[1:], clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "torch.mean(rv, dim=0)",
                            "Call"
                        ],
                        [
                            "gradf / torch.norm(gradf, p=2)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(rv, dim=0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(fval * rv, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed + epsilon * update",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_237": {
                "input": {
                    "value": "rv ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(range(1, 1 + len(shape)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "perturbeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed + epsilons.view((20,) + (1,) * (len(shape) - 1)) * update",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbeds, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_221": {
                "input": {
                    "value": "x_ori - x_pert",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_251": {
                "input": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(noise_shape)",
                            "Call"
                        ],
                        [
                            "rv / torch.sqrt(torch.sum(rv ** 2, dim=axis, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "(perturbed - sample) / delta",
                            "BinOp"
                        ],
                        [
                            "-1 + torch.rand(noise_shape) * 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_334": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_234": {
                "*size": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[num_evals] + list(shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_97": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "ndarray": {
                    "value": "np.logspace(-4, 0, num=20, endpoint=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "idx_perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decision_function(perturbeds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/torch/attacks/noise.py": {
        "torch": {
            "clamp_40": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, min=clip_min, max=clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/torch/attacks/projected_gradient_descent.py": {
        "torch": {
            "all_92": {
                "variable": {
                    "value": "assert_ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(x, torch.tensor(clip_min, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_98": {
                "variable": {
                    "value": "assert_le",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.le(x, torch.tensor(clip_max, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, norm, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_119": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_143": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, norm, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ge_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_min, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_max, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/torch/attacks/sparse_l1_descent.py": {
        "torch": {
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "grad_sparsity",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_sparsity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(grad_sparsity)",
                            "Call"
                        ],
                        [
                            "grad_sparsity.to(x.device)",
                            "Call"
                        ],
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_87": {
                "variable": {
                    "value": "assert_ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(x, torch.tensor(clip_min, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_93": {
                "variable": {
                    "value": "assert_le",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.le(x, torch.tensor(clip_max, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_103": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_106": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_109": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(x.shape[0], 1, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.tensor(1.0 / dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps * (w * eta / norm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_138": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[adv_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_144": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.view(grad.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_155": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(grad_view)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "percentile_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.kthvalue(abs_grad, k, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(abs_grad, dim=1)",
                            "Call"
                        ],
                        [
                            "percentile_value.gather(1, k.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "percentile_value.repeat(1, grad_view.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_156": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(abs_grad, percentile_value).int().float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "kthvalue_148": {
                "variable": {
                    "value": "(percentile_value, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(grad_view)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(grad_sparsity / 100.0 * abs_grad.shape[1])",
                            "Call"
                        ],
                        [
                            "(grad_sparsity / 100.0 * abs_grad.shape[1]).long()",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_151": {
                "variable": {
                    "value": "(percentile_value, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(grad_view)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "adv_x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "adv_x + optimal_perturbation * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_176": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "adv_x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "adv_x + optimal_perturbation * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ge_88": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_min, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_94": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_max, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_108": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample([x.shape[0], dim]).squeeze(-1).to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(eps * (w * eta / norm), x.shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "eta.renorm(p=1, dim=0, maxnorm=eps)",
                            "Call"
                        ],
                        [
                            "adv_x - x",
                            "BinOp"
                        ],
                        [
                            "eta.renorm(p=1, dim=0, maxnorm=eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_110": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "1.0 / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_158": {
                "input": {
                    "value": "grad_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.view(grad.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/torch/attacks/spsa.py": {
        "torch": {
            "Adam_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[perturbation]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x + perturbation).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.inf",
                            "Method Argument"
                        ],
                        [
                            "-np.inf",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Method Argument"
                        ],
                        [
                            "np.inf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_181": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.inf",
                            "Method Argument"
                        ],
                        [
                            "-np.inf",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Method Argument"
                        ],
                        [
                            "np.inf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_228": {
                "variable": {
                    "value": "incorrect_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "logit_indices == labels[:, None]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(logits, float('-inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(x + pert)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_233": {
                "variable": {
                    "value": "(max_incorrect_logits, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "incorrect_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(logit_indices == labels[:, None], torch.full_like(logits, float('-inf')), logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_211": {
                "input": {
                    "value": "torch.cat(grad_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.clamp((x + perturbation).detach(), clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_115": {
                "input": {
                    "value": "x >= clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_116": {
                "input": {
                    "value": "x <= clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_162": {
                "input": {
                    "value": "adv_x >= clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_163": {
                "input": {
                    "value": "adv_x <= clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "grad_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "full_like_230": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(x + pert)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_152": {
                "input": {
                    "value": "torch.abs(adv_x - x) <= eps + 1e-06",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_155": {
                "input": {
                    "value": "torch.abs(torch.renorm(adv_x - x, p=norm, dim=0, maxnorm=eps) - (adv_x - x)) < 1e-06",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sign_200": {
                "input": {
                    "value": "torch.rand_like(x_batch) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_207": {
                "input": {
                    "value": "loss_vals * torch.sign(delta_x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_like_121": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_223": {
                "start": {
                    "value": "logits.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_156": {
                "input": {
                    "value": "torch.renorm(adv_x - x, p=norm, dim=0, maxnorm=eps) - (adv_x - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_200": {
                "input": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.expand(samples, *[-1] * (num_dims - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_207": {
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta * torch.sign(torch.rand_like(x_batch) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([delta_x, -delta_x])",
                            "Call"
                        ]
                    ]
                }
            },
            "renorm_157": {
                "input": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Method Argument"
                        ],
                        [
                            "norm",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/torch/tests/test_attacks.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.w1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.w2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "self.trivial_normalized_x - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[-20.0, 30.0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.w1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.w2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "self.trivial_normalized_x - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[-20.0, 30.0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.w1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.w2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "self.trivial_normalized_x - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[-20.0, 30.0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(n_features, 60)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_64": {
                "variable": {
                    "value": "self.normalized_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "self.trivial_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "self.trivial_normalized_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_67": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_660": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-20.0, 30.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_752": {
                "variable": {
                    "value": "(delta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv - self.normalized_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_752": {
                "variable": {
                    "value": "(delta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_776": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_792": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_808": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_814": {
                "variable": {
                    "value": "x_val_under_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_val_pos[:25], x_val_neg[:25])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_815": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(25, dtype=torch.int64), torch.ones(25, dtype=torch.int64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_818": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_val_neg[25:50], x_val_pos[25:50])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_838": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "x_val_under_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_val_pos[:25], x_val_neg[:25])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_845": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(25, dtype=torch.int64), torch.ones(25, dtype=torch.int64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_848": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_val_neg[25:50], x_val_pos[25:50])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_881": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_adv - self.normalized_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_885": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.normalized_x.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_899": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_adv - self.normalized_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_1009": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1041": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.w1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.w2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-2.0, 3.0]])",
                            "Call"
                        ],
                        [
                            "self.trivial_normalized_x - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[-20.0, 30.0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_452": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 - delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1021": {
                "variable": {
                    "value": "numzero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv - x_val == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1037": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1046": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_447": {
                "variable": {
                    "value": "(delta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv - self.normalized_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_447": {
                "variable": {
                    "value": "(delta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_587": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_588": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_753": {
                "input": {
                    "value": "delta <= 0.5 + 1e-06",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_766": {
                "input": {
                    "value": "x_adv <= clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_767": {
                "input": {
                    "value": "x_adv >= clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_881": {
                "input": {
                    "value": "x_adv - self.normalized_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_899": {
                "input": {
                    "value": "x_adv - self.normalized_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_903": {
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_912": {
                "input": {
                    "value": "torch.abs(delta - 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_919": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.pow(x_adv - self.normalized_x, 2).sum(dim=1).pow(0.5)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=2, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_targeted_adversarial_examples(eps=10, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=eps, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=0.5, clip_min=-5, clip_max=5, nb_iter=10, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1, clip_min=-5, clip_max=5, nb_iter=5, eps_iter=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_938": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_939": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_962": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_963": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attack(model_fn=model, x=x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=model, x=x, y=self.y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, norm=norm, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10, norm=norm, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=5, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, eps_iter=0.03, norm=norm, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, eps_iter=0.05, norm=np.inf, clip_min=0.5, clip_max=0.7, nb_iter=2, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, clip_min=-0.2, clip_max=0.3, **self.attack_param)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=x, lr=0.01, clip_min=-10, clip_max=10, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.trivial_model, x=self.trivial_normalized_x - 0.5, lr=0.01, clip_min=-10, clip_max=10, targeted=True, y=self.y_target, confidence=confidence, **attack_param_copy)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=1.0, clip_min=0.5, clip_max=0.7, nb_iter=20, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.5, nb_iter=10)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, eps=0.3, nb_iter=10, clip_min=clip_min, clip_max=clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=x_val_under_attack, **bapp_params)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn=self.model, x=self.normalized_x, y=y_target, targeted=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=10, nb_iter=20, rand_init=True, clip_min=-0.2, clip_max=0.1, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1.0, eps_iter=0.1, nb_iter=5, clip_min=-0.2, clip_max=0.3, sanity_checks=False)",
                            "Call"
                        ],
                        [
                            "self.attack(model_fn, x_val, eps=5.0, grad_sparsity=q, nb_iter=1, sanity_checks=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_971": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.pow(x_adv - self.normalized_x, 2).sum(dim=1).pow(0.5)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=2, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_targeted_adversarial_examples(eps=10, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=eps, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=0.5, clip_min=-5, clip_max=5, nb_iter=10, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1, clip_min=-5, clip_max=5, nb_iter=5, eps_iter=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_146": {
                "input": {
                    "value": "x_adv <= clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_147": {
                "input": {
                    "value": "x_adv >= clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_449": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv - self.normalized_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_449": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_513": {
                "input": {
                    "value": "x_adv <= clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_514": {
                "input": {
                    "value": "x_adv >= clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_612": {
                "input": {
                    "value": "target - other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_638": {
                "input": {
                    "value": "target - other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_816": {
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_816": {
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_846": {
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_912": {
                "input": {
                    "value": "delta - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_926": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.pow(x_adv - self.normalized_x, 2).sum(dim=1).pow(0.5)",
                            "Call"
                        ],
                        [
                            "torch.abs(x_adv - self.normalized_x).max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(x_adv - self.normalized_x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=2, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_targeted_adversarial_examples(eps=10, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=eps, clip_min=-5, clip_max=5)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=0.5, clip_min=-5, clip_max=5, nb_iter=10, eps_iter=0.01)",
                            "Call"
                        ],
                        [
                            "self.generate_adversarial_examples(eps=1, clip_min=-5, clip_max=5, nb_iter=5, eps_iter=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_950": {
                "input": {
                    "value": "0.5 - delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1022": {
                "input": {
                    "value": "numzero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x_adv - x_val == 0, dim=-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_451": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_451": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_640": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trivial_model(x_adv)",
                            "Call"
                        ],
                        [
                            "self.trivial_model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_640": {
                "input": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_640": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_614": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trivial_model(x_adv)",
                            "Call"
                        ],
                        [
                            "self.trivial_model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_614": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trivial_model(x).max(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_614": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/torch/tests/test_utils.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "self.rand_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "self.rand_eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5 ** 0.5, -0.5 ** 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_95": {
                "input": {
                    "value": "clipped <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_96": {
                "input": {
                    "value": "clipped >= -0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_111": {
                "input": {
                    "value": "norm <= 0.5001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_68": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta.abs().sum(dim=self.red_ind)",
                            "Call"
                        ],
                        [
                            "eta.pow(2).sum(dim=self.red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "clipped.pow(2).sum(dim=self.red_ind).pow(0.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "eps * torch.ones_like(norm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "self.rand_grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.red_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "allclose_91": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta.abs().sum(dim=self.red_ind)",
                            "Call"
                        ],
                        [
                            "eta.pow(2).sum(dim=self.red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "clipped.pow(2).sum(dim=self.red_ind).pow(0.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "eps * one_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_68": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta.abs().sum(dim=self.red_ind)",
                            "Call"
                        ],
                        [
                            "eta.pow(2).sum(dim=self.red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "clipped.pow(2).sum(dim=self.red_ind).pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/torch/utils.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_136": {
                "variable": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_143": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_low | clip_high",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.zeros_like(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_22": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_35": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1.0, dtype=eta.dtype, device=eta.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_85": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_26": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_65": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_87": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_88": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_90": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_94": {
                "variable": {
                    "value": "(max_abs_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_grad.view(grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_140": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_140": {
                "input": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gt_141": {
                "input": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(clip, torch.zeros_like(grad), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(avoid_zero_div, torch.sum(eta ** 2, dim=reduc_ind, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_mask",
                            "variable"
                        ],
                        [
                            "torch.sum(num_ties, red_scalar, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "red_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_ind",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_103": {
                "input": {
                    "value": "opt_pert_norm == torch.ones_like(opt_pert_norm)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_27": {
                "input": {
                    "value": "torch.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "allclose_115": {
                "input": {
                    "value": "opt_pert_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimal_perturbation.pow(2).sum(dim=red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "optimal_perturbation.abs().sum(dim=red_ind)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(square <= avoid_zero_div).to(torch.float) * opt_pert_norm + (square > avoid_zero_div).to(torch.float)",
                            "BinOp"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_31": {
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_103": {
                "input": {
                    "value": "opt_pert_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimal_perturbation.pow(2).sum(dim=red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "optimal_perturbation.abs().sum(dim=red_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.size())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(avoid_zero_div, torch.sum(grad ** 2, red_ind, keepdim=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "eta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/torch/cifar10_tutorial.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='/tmp/data', train=True, transform=train_transforms, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='/tmp/data', train=False, transform=test_transforms, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tutorials/torch/datasets.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_labels(path.join(root, 'train-labels-idx1-ubyte.gz'))",
                            "Call"
                        ],
                        [
                            "mnist_raw(root=root)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_labels(path.join(root, 't10k-labels-idx1-ubyte.gz'))",
                            "Call"
                        ],
                        [
                            "mnist_raw(root=root)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tutorials/torch/mnist_tutorial.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(root='/tmp/data', transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(root='/tmp/data', train=False, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train",
                            "Attribute"
                        ],
                        [
                            "data.test",
                            "Attribute"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "projected_gradient_descent(net, x, FLAGS.eps, 0.01, 40, np.inf)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}