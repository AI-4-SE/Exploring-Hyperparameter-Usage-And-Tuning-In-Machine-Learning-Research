{
    "baselines/logger.py": {
        "tensorflow": {
            "summary_iterator_462": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_bytes_155": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "dense_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_38": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_26": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/mlp_policy.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_26": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_56": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_30": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_35": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "placeholder_108": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_control_factor",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_129": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_128": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ],
                        [
                            "-U.mean(surr1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.clip(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_144": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/policies.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Ob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "unscaled_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unscaled_images",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ppo2/ppo2.py": {
        "tensorflow": {
            "get_default_session_15": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "OLDNEGLOGPAC",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "OLDVPRED",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_34": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "OLDNEGLOGPAC - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "loss_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neglogpac * ADV",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_pg)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(pg_losses, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "ppd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(neglogpac - OLDNEGLOGPAC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "clipfrac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.greater(tf.abs(ratio - 1.0), CLIPRANGE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * ratio",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pg_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_52": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_losses - entropy * ent_coef + vf_loss * vf_coef + loss_pg * pg_coef + 5.0 * ppd",
                            "BinOp"
                        ],
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef + loss_pg * pg_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_56": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_51": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_54": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "max_grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_94": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_32": {
                "t": {
                    "value": "train_model.vf - OLDVPRED",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-CLIPRANGE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_35": {
                "input_tensor": {
                    "value": "tf.maximum(vf_losses1, vf_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_40": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(OLDNEGLOGPAC - neglogpac)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "x": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * ratio",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pg_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_42": {
                "x": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_43": {
                "x": {
                    "value": "tf.greater(tf.abs(ratio - 1.0), CLIPRANGE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_35": {
                "x": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - R)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - R)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_43": {
                "x": {
                    "value": "tf.abs(ratio - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_43": {
                "x": {
                    "value": "ratio - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/run_atari.py": {
        "tensorflow": {
            "ConfigProto_17": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_21": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ppo2/run_mujoco.py": {
        "tensorflow": {
            "ConfigProto_17": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Session_21": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/trpo_mpi/nosharing_cnn_policy.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_28": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_36": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_102": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_116": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_132": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_141": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_144": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}