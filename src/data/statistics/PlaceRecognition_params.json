{
    "hard_triplet_loss.py": {
        "torch": {
            "matmul_80": {
                "variable": {
                    "value": "cor_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_97": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "i_not_equal_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "i_not_equal_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "j_not_equal_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_136": {
                "variable": {
                    "value": "label_equal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "i_equal_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_equal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eq(torch.unsqueeze(labels, 0), torch.unsqueeze(labels, 1)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "i_equal_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_equal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eq(torch.unsqueeze(labels, 0), torch.unsqueeze(labels, 1)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_86": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_40": {
                "variable": {
                    "value": "(hardest_positive_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_positive_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_dist * mask_anchor_positive",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_44": {
                "variable": {
                    "value": "(max_anchor_negative_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pairwise_distance(embeddings, squared=self.squared)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_47": {
                "variable": {
                    "value": "(hardest_negative_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_negative_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_dist + max_anchor_negative_dist * (1.0 - mask_anchor_negative)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hardest_positive_dist - hardest_negative_dist + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_66": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gt_69": {
                "variable": {
                    "value": "hard_triplets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "num_hard_triplets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_triplets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gt(triplet_loss, 1e-16).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_99": {
                "n": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_129": {
                "n": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_136": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "base_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolderWithPaths(root='data/', transform=preprocess)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "netvlad.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_clusters, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(2.0 * self.alpha * self.centroids).unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-self.alpha * self.centroids.norm(dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x).view(N, self.num_clusters, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.base_model(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "*size": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}