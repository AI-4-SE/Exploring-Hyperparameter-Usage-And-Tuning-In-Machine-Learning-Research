{
    "models/Update.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "self.ldr_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetSplit(dataset, idxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stepsize",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cl_main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNMnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNFashion_Mnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNCifar.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fl_main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNMnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNFashion_Mnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNCifar.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/Fed.py": {
        "torch": {
            "div_15": {
                "variable": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_23": {
                "variable": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w_cluster)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/Nets.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.layer_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.layer_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_35": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(out, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(out, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 10, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(10, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_100": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_46": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_95": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(out, 2))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[1] * out.shape[2] * out.shape[3])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc2(out), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(out))",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/test.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datatest",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_23": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_g(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sfl_main.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNMnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNFashion_Mnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNCifar.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/sfl_init.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNMnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNFashion_Mnist.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_init/CNNCifar.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}