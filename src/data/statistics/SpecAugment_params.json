{
    "SpecAugment/spec_augment_tensorflow.py": {
        "tensorflow": {
            "shape_62": {
                "variable": {
                    "value": "fbank_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_68": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "time_warping_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "maxval": {
                    "value": "n - time_warping_para",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_69": {
                "variable": {
                    "value": "src_ctr_pt_freq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "src_ctr_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(src_ctr_pt_time, src_ctr_pt_freq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "src_ctr_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_ctr_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((src_ctr_pt_time, src_ctr_pt_freq), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(src_ctr_pts, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_75": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-time_warping_para",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "time_warping_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "dest_ctr_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(dest_ctr_pt_time, dest_ctr_pt_freq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "dest_ctr_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dest_ctr_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((dest_ctr_pt_time, dest_ctr_pt_freq), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(dest_ctr_pts, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "variable": {
                    "value": "source_control_point_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_ctr_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((src_ctr_pt_time, src_ctr_pt_freq), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(src_ctr_pts, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "dest_control_point_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dest_ctr_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((dest_ctr_pt_time, dest_ctr_pt_freq), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(dest_ctr_pts, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_109": {
                "variable": {
                    "value": "fbank_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_143": {
                "variable": {
                    "value": "fbank_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_113": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "frequency_masking_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "27",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_114": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fbank_size[2]",
                            "Subscript"
                        ],
                        [
                            "fbank_size[2]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(v, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "fbank_size[2]",
                            "Subscript"
                        ],
                        [
                            "mel_spectrogram.shape[0]",
                            "Subscript"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_115": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "v - f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.ones(shape=(1, n, v - f0 - f, 1)), tf.zeros(shape=(1, n, f, 1)), tf.ones(shape=(1, n, f0, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_148": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "time_masking_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_149": {
                "variable": {
                    "value": "t0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tau - t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.ones(shape=(1, n - t0 - t, v, 1)), tf.zeros(shape=(1, t, v, 1)), tf.ones(shape=(1, t0, v, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_157": {
                "x": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram * mask",
                            "BinOp"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ],
                        [
                            "mel_spectrogram",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "src_ctr_pt_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(v // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_118": {
                "shape": {
                    "value": "(1, n, v - f0 - f, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "shape": {
                    "value": "(1, n, f, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_120": {
                "shape": {
                    "value": "(1, n, f0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_152": {
                "shape": {
                    "value": "(1, n - t0 - t, v, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "shape": {
                    "value": "(1, t, v, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_154": {
                "shape": {
                    "value": "(1, t0, v, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "SpecAugment/sparse_image_warp_pytorch.py": {
        "torch": {
            "tensor_98": {
                "variable": {
                    "value": "flattened_grid_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_grid_locations(grid_locations, image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "left_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_a, torch.transpose(matrix_b, 2, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "right_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_b, lhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_block, right_block)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "rhs_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, d + 1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, rhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_180": {
                "variable": {
                    "value": "(X, LU)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((f, rhs_zeros), 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((left_block, right_block), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_197": {
                "variable": {
                    "value": "x_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "y_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "x_y_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y.squeeze(0).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "variable": {
                    "value": "rbf_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_pairwise_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phi(pairwise_dists, order)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_interpolation(train_points, train_values, order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "X[:, :n, :]",
                            "Subscript"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_259": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_points, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "linear_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_points, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_interpolation(train_points, train_values, order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "X[:, n:, :]",
                            "Subscript"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_299": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(width)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_302": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_on_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_grid - flow",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(batch_size) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "input": {
                    "value": "flattened_flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_spline(dest_control_point_locations, control_point_flows, flattened_grid_locations, interpolation_order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "flattened_flows",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_221": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_222": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "max_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_366": {
                "variable": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=query_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_367": {
                "variable": {
                    "value": "floor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(min_floor, torch.floor(queries))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "max_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_378": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_382": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(queries - floor, dtype=grid_type)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_396": {
                "variable": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_grid.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "linear_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_offsets + y_coords * width + x_coords",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[[[y, point_to_warp + dist_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_170": {
                "*size": {
                    "value": "(b, num_b_cols, num_b_cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_197": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_198": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_300": {
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "input": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(flattened_grid.t(), 1, linear_coordinates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "input": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_366": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_378": {
                "input": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_225": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_229": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_232": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_388": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_225": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_233": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_227": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_227": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_230": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_230": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SpecAugment/spec_augment_pytorch.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "src_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[y, point_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "dest_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[y, point_to_warp + dist_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/spec_augment_test_pytorch.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(y=audio, sr=sampling_rate, n_mels=256, hop_length=128, fmax=8000)",
                            "Call"
                        ],
                        [
                            "np.reshape(mel_spectrogram, (-1, shape[0], shape[1]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_spectrogram)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}