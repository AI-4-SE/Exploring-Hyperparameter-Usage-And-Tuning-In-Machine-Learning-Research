{
    "adnc/model/controller_units/controller.py": {
        "tensorflow": {
            "LSTMCell_40": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units in enumerate(config['num_units'])",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(config['activation'])",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMBlockCell_42": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units in enumerate(config['num_units'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adnc/model/controller_units/custom_lstm_cell.py": {
        "tensorflow": {
            "zeros_66": {
                "variable": {
                    "value": "zero_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ifco[:, 0 * cell_size:3 * cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(gates[:, 0:cell_size], pre_cell_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(gates[:, cell_size:2 * cell_size], self.act(ifco[:, 3 * cell_size:4 * cell_size]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ifco[:, 0 * cell_size:3 * cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_123": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(gates[:, 0:cell_size], pre_cell_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(gates[:, cell_size:2 * cell_size], self.act(ifco[:, 3 * cell_size:4 * cell_size]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "recurrent_unit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "w_ifco",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_ifco_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, 4 * cell_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "b_ifco",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_ifco_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4 * cell_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "w_ifco",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_ifco_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, 4 * cell_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "b_ifco",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_ifco_ln_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4 * cell_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "'{}'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_ifco",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_ifco_{}'.format(name), (input_size, 4 * cell_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_ifco_{}'.format(name), (input_size, 4 * cell_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "w_ifco",
                            "Method Argument"
                        ],
                        [
                            "w_ifco",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_87": {
                "x": {
                    "value": "gates[:, 0:cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_88": {
                "x": {
                    "value": "gates[:, cell_size:2 * cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.act(ifco[:, 3 * cell_size:4 * cell_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "'cell_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_123": {
                "x": {
                    "value": "gates[:, 0:cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ],
                        [
                            "pre_cell_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_124": {
                "x": {
                    "value": "gates[:, cell_size:2 * cell_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.act(ifco[:, 3 * cell_size:4 * cell_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_ifco",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_ifco_{}'.format(name), (input_size, 4 * cell_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_ifco_{}'.format(name), (input_size, 4 * cell_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['recurrent_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "w_ifco",
                            "Method Argument"
                        ],
                        [
                            "w_ifco",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_111": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_148": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/mann.py": {
        "tensorflow": {
            "placeholder_60": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(output_flat)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output_flat)",
                            "Call"
                        ],
                        [
                            "output_flat",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "weighted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(output_flat, weights_concat) + bias_merge",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "output_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cell.output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_223": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Call"
                        ],
                        [
                            "step",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(output_init, cell_init_states)",
                            "Tuple"
                        ],
                        [
                            "(output_init, cell_fw_init_states, cell_mu_init_states)",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "output_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cell_mu.output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_342": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self._data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.batch_size, self.input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "weights_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_concat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(output_size, self.output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['mann', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "bias_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_merge",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['mann', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(step, inputs, initializer=init_states, parallel_iterations=32)",
                            "Call"
                        ],
                        [
                            "tf.scan(step, coupled_inputs, initializer=init_states, parallel_iterations=32)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(output_flat, weights_concat) + bias_merge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultiRNNCell_196": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "controller_list + [mu_cell]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_202": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[controller_cell, mu_cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_219": {
                "variable": {
                    "value": "controller_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, pre_rnn_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_245": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "list_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_rnn_cell_list(controller_config, name='con_fw', reuse=reuse, seed=self.seed, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_246": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "list_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_rnn_cell_list(controller_config, name='con_bw', reuse=reuse, seed=self.seed, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_255": {
                "variable": {
                    "value": "inputs_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_256": {
                "variable": {
                    "value": "(output_bw, output_state_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiRNNCell(list_bw)",
                            "Call"
                        ],
                        [
                            "HolisticMultiRNNCell(list_bw)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(inputs, axis=[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "time_major": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "bw_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reverse_258": {
                "variable": {
                    "value": "output_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=cell_bw, inputs=inputs_reverse, dtype=self.dtype, parallel_iterations=32, time_major=True, scope=bw_scope)",
                            "Call"
                        ],
                        [
                            "tf.reverse(output_bw, axis=[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_288": {
                "variable": {
                    "value": "(outputs, states_fw, states_mu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Call"
                        ],
                        [
                            "step",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "coupled_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs, output_bw)",
                            "Tuple"
                        ],
                        [
                            "coupled_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(output_init, cell_init_states)",
                            "Tuple"
                        ],
                        [
                            "(output_init, cell_fw_init_states, cell_mu_init_states)",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_303": {
                "key": {
                    "value": "recurrent_unit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_307": {
                "key": {
                    "value": "memory_unit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_311": {
                "key": {
                    "value": "mann",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "variable": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(output_flat, weights_concat) + bias_merge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-1 * self.target * tf.log(tf.clip_by_value(prediction, 1e-12, 10.0)) - (1 - self.target) * tf.log(tf.clip_by_value(1 - prediction, 1e-12, 10.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-1 * self.target * tf.log(tf.clip_by_value(prediction, 1e-12, 10.0)) - (1 - self.target) * tf.log(tf.clip_by_value(1 - prediction, 1e-12, 10.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_161": {
                "variable": {
                    "value": "clipped_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_162": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.target - clipped_prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(self.target - clipped_prediction)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mse, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "controller",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "controller",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "controller_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, pre_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_283": {
                "variable": {
                    "value": "mu_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_87": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "a": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(output_flat, weights_concat) + bias_merge",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "weights_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_concat', (output_size, self.output_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['mann', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(self.target - clipped_prediction)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mse, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_151": {
                "x": {
                    "value": "tf.clip_by_value(1 - prediction, 1e-12, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_157": {
                "x": {
                    "value": "tf.clip_by_value(1 - prediction, 1e-12, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_151": {
                "t": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_152": {
                "t": {
                    "value": "1 - prediction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_157": {
                "t": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_158": {
                "t": {
                    "value": "1 - prediction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/memory_units/base_cell.py": {
        "tensorflow": {
            "matmul_81": {
                "variable": {
                    "value": "similarity_numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "variable": {
                    "value": "norm_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(memory), axis=2, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "variable": {
                    "value": "norm_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(keys), axis=2, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "similarity_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norm_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(keys), axis=2, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "norm_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(memory), axis=2, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity_numerator / similarity_denominator",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(similarity)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "softmax_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "adjusted_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity * strengths",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_64": {
                "key": {
                    "value": "memory_unit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.square(memory)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.square(keys)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_84": {
                "x": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "adnc/model/memory_units/content_based_cell.py": {
        "tensorflow": {
            "TensorShape_28": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_29": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_30": {
                "variable": {
                    "value": "init_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_31": {
                "variable": {
                    "value": "init_read_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_RH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_36": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(1 / (self.h_N * self.h_W), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._read_memory(memory, read_content_weightings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(read_vectors, [self.h_B, self.h_W * self.h_RH])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_W * self.h_RH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_vectors, input_bypass]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "memory_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_ones",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_124": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_125": {
                "variable": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(self.h_N, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "repeat_memory_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "batch_memory_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(batch_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(repeat_memory_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_memory_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, 3 * self.h_W + 1:3 * self.h_W + 2]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alloc_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 2 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "free_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 2 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_147": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, 3 * self.h_W + 2:3 * self.h_W + 3]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "write_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, :self.h_W]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(write_keys, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 2 * self.h_W + 1:3 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_W + 1:2 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(erase_vector, 'erase_vector')",
                            "Call"
                        ],
                        [
                            "tf.reshape(erase_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "erase_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_W + 1:2 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(erase_vector, 'erase_vector')",
                            "Call"
                        ],
                        [
                            "tf.reshape(erase_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 3 * self.h_W + 3:(self.h_RH + 3) * self.h_W + 3]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_keys, [self.h_B, self.h_RH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3:(self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "oneplus(read_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(read_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_w_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, total_signal_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_b_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_signal_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "input_bypass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.bypass_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "1 / (self.h_N * self.h_W)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "'{}'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "value": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([self.h_N], tf.constant(self.h_N, dtype=tf.int32), name='repeat_memory_length')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_w_x', (input_size, total_signal_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_71": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/memory_units/dnc_cell.py": {
        "tensorflow": {
            "TensorShape_35": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_36": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_37": {
                "variable": {
                    "value": "init_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_38": {
                "variable": {
                    "value": "init_precedence_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_39": {
                "variable": {
                    "value": "init_link_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_40": {
                "variable": {
                    "value": "init_read_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_RH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_46": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(1 / (self.h_N * self.h_W), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "init_precedence_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "init_link_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._read_memory(memory, read_weightings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(read_vectors, [self.h_B, self.h_W * self.h_RH])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_W * self.h_RH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_vectors, input_bypass]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "memory_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_ones",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_126": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_127": {
                "variable": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(self.h_N, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "repeat_memory_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "batch_memory_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(batch_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(repeat_memory_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_memory_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, 3 * self.h_W + 1:3 * self.h_W + 2]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alloc_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 4 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 5 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ],
                        [
                            "free_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "free_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_170": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 4 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 5 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ],
                        [
                            "free_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, 3 * self.h_W + 2:3 * self.h_W + 3]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "write_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, :self.h_W]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(write_keys, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 2 * self.h_W + 1:3 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ],
                        [
                            "write_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_W + 1:2 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(erase_vector, 'erase_vector')",
                            "Call"
                        ],
                        [
                            "tf.reshape(erase_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ],
                        [
                            "erase_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "erase_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_W + 1:2 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(erase_vector, 'erase_vector')",
                            "Call"
                        ],
                        [
                            "tf.reshape(erase_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ],
                        [
                            "erase_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, 1, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 3 * self.h_W + 3:(self.h_RH + 3) * self.h_W + 3]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_keys, [self.h_B, self.h_RH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3:(self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "oneplus(read_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(read_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 4 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_modes, [self.h_B, self.h_RH, 3])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(read_modes, dim=2)",
                            "Call"
                        ],
                        [
                            "read_modes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_RH + 3) * self.h_W + 3 + 1 * self.h_RH:(self.h_RH + 3) * self.h_W + 3 + 4 * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_modes, [self.h_B, self.h_RH, 3])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(read_modes, dim=2)",
                            "Call"
                        ],
                        [
                            "read_modes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_191": {
                "variable": {
                    "value": "retention_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - free_gates * pre_read_weightings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "retention_prod",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_196": {
                "variable": {
                    "value": "(sorted_usage, free_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * usage_vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumprod_199": {
                "variable": {
                    "value": "cumprod_sorted_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sorted_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-1 * usage_vector, self.h_N)",
                            "Call"
                        ],
                        [
                            "-1 * sorted_usage",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_stitch_205": {
                "variable": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "corrected_free_list_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(corrected_free_list, [-1])]",
                            "List"
                        ]
                    ]
                },
                "data": {
                    "value": "cumprod_sorted_usage_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(cumprod_sorted_usage, [-1])]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dynamic_stitch(corrected_free_list_re, cumprod_sorted_usage_re, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(stitched_usage, [self.h_B, self.h_N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "variable": {
                    "value": "write_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weighting(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "variable": {
                    "value": "erase_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_memory",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.const_memory_ones - tf.matmul(write_w, erase_vector)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "write_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "write_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(write_weighting, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 2 * self.h_W + 1:3 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ],
                        [
                            "write_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_232": {
                "variable": {
                    "value": "add_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(write_weighting, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(pre_precedence_weighting, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "variable": {
                    "value": "forward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_read_weightings",
                            "Method Argument"
                        ],
                        [
                            "pre_read_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_link_matrix(pre_link_matrix, write_weighting, pre_precedence_weighting)",
                            "Call"
                        ],
                        [
                            "self.const_link_matrix_inv_eye * updated_link_mat",
                            "BinOp"
                        ],
                        [
                            "link_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_245": {
                "variable": {
                    "value": "backward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_read_weightings",
                            "Method Argument"
                        ],
                        [
                            "pre_read_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_link_matrix(pre_link_matrix, write_weighting, pre_precedence_weighting)",
                            "Call"
                        ],
                        [
                            "self.const_link_matrix_inv_eye * updated_link_mat",
                            "BinOp"
                        ],
                        [
                            "link_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "input_bypass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.bypass_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_w_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, total_signal_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_b_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_signal_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "x": {
                    "value": "1 / (self.h_N * self.h_W)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_123": {
                "value": {
                    "value": "np.identity(self.h_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "link_matrix_inv_eye",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_127": {
                "value": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_128": {
                "input": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([self.h_N], tf.constant(self.h_N, dtype=tf.int32), name='repeat_memory_length')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "'{}'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "tensor": {
                    "value": "cumprod_sorted_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumprod(sorted_usage, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "tensor": {
                    "value": "corrected_free_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "free_list + self.const_batch_memory_range",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weighting(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "input": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_precedence_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "input": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weighting(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_w_x', (input_size, total_signal_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_223": {
                "a": {
                    "value": "write_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(write_weighting, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_W + 1:2 * self.h_W + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(erase_vector, 'erase_vector')",
                            "Call"
                        ],
                        [
                            "tf.reshape(erase_vector, [self.h_B, 1, self.h_W])",
                            "Call"
                        ],
                        [
                            "erase_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_254": {
                "input": {
                    "value": "read_modes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_142": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_229": {
                "input_tensor": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weighting(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_252": {
                "input": {
                    "value": "read_modes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_253": {
                "input": {
                    "value": "read_modes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/memory_units/memory_unit.py": {
        "tensorflow": {}
    },
    "adnc/model/memory_units/multi_write_content_based_cell.py": {
        "tensorflow": {
            "TensorShape_28": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_29": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_30": {
                "variable": {
                    "value": "init_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_WH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_31": {
                "variable": {
                    "value": "init_read_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_RH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_36": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(1 / (self.h_N * self.h_W), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._read_memory(memory, read_content_weightings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(read_vectors, [self.h_B, self.h_W * self.h_RH])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_W * self.h_RH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_vectors, input_bypass]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "memory_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_ones",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_102": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_103": {
                "variable": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(self.h_N, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "repeat_memory_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "batch_memory_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(batch_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(repeat_memory_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_memory_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, :self.h_WH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alloc_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alloc_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, :self.h_WH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alloc_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_WH:self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "free_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_WH:self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, self.h_WH + self.h_RH:2 * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "write_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_147": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, self.h_WH + self.h_RH:2 * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 2 * self.h_WH + self.h_RH:(self.h_W + 2) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_keys, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_W + 2) * self.h_WH + self.h_RH:(self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "oneplus(write_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "write_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (self.h_W + 3) * self.h_WH + self.h_RH:(2 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (2 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(erase_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(erase_vectors, 'erase_vector')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (2 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(erase_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(erase_vectors, 'erase_vector')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "erase_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + (self.h_W + 1) * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_keys, [self.h_B, self.h_RH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + (self.h_W + 1) * self.h_RH:]",
                            "Subscript"
                        ],
                        [
                            "oneplus(read_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(read_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "input_bypass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.bypass_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_w_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, total_signal_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_b_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_signal_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "1 / (self.h_N * self.h_W)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_103": {
                "value": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "input": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([self.h_N], tf.constant(self.h_N, dtype=tf.int32), name='repeat_memory_length')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "'{}'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_w_x', (input_size, total_signal_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_117": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/memory_units/multi_write_dnc_cell.py": {
        "tensorflow": {
            "TensorShape_37": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_38": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_39": {
                "variable": {
                    "value": "init_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_WH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_40": {
                "variable": {
                    "value": "init_precedence_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_WH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_41": {
                "variable": {
                    "value": "init_link_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_WH, self.h_N, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_42": {
                "variable": {
                    "value": "init_read_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_RH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_48": {
                "variable": {
                    "value": "init_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(1 / (self.h_N * self.h_W), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "init_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "init_precedence_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "init_link_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_N, self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_RH, 1 + 2 * self.h_WH]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._read_memory(memory, read_weightings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(read_vectors, [self.h_B, self.h_W * self.h_RH])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_W * self.h_RH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_vectors, input_bypass]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "link_matrix_inv_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[link_matrix_inv_eye] * self.h_WH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "link_matrix_inv_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[link_matrix_inv_eye] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_127": {
                "variable": {
                    "value": "memory_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.h_N, self.h_W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_ones",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_129": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_130": {
                "variable": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.h_N]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(self.h_N, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "repeat_memory_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "batch_memory_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(batch_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(repeat_memory_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_memory_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, :self.h_WH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alloc_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alloc_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, :self.h_WH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(alloc_gates, 'alloc_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alloc_gates, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_WH:self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ],
                        [
                            "free_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "free_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, self.h_WH:self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(free_gates, 'free_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(free_gates, 2)",
                            "Call"
                        ],
                        [
                            "free_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, self.h_WH + self.h_RH:2 * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_gates, 2)",
                            "Call"
                        ],
                        [
                            "write_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "write_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, self.h_WH + self.h_RH:2 * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(write_gates, 'write_gates')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_gates, 2)",
                            "Call"
                        ],
                        [
                            "write_gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, 2 * self.h_WH + self.h_RH:(self.h_W + 2) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_keys, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (self.h_W + 2) * self.h_WH + self.h_RH:(self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "oneplus(write_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "write_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "write_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (self.h_W + 3) * self.h_WH + self.h_RH:(2 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(write_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (2 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(erase_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(erase_vectors, 'erase_vector')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_WH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "erase_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_input[:, (2 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(erase_vectors, [self.h_B, self.h_WH, self.h_W])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(erase_vectors, 'erase_vector')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "erase_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + self.h_RH:(3 * self.h_W + 3) * self.h_WH + (self.h_W + 1) * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_keys, [self.h_B, self.h_RH, self.h_W])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, self.h_W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + (self.h_W + 1) * self.h_RH:(3 * self.h_W + 3) * self.h_WH + (self.h_W + 2) * self.h_RH]",
                            "Subscript"
                        ],
                        [
                            "oneplus(read_strengths)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(read_strengths, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1 + 2 * self.h_WH], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + (self.h_W + 2) * self.h_RH:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_modes, [self.h_B, self.h_RH, 1 + 2 * self.h_WH])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(read_modes, axis=2)",
                            "Call"
                        ],
                        [
                            "read_modes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_RH, 1 + 2 * self.h_WH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_RH, 1 + 2 * self.h_WH], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weighted_input[:, (3 * self.h_W + 3) * self.h_WH + (self.h_W + 2) * self.h_RH:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(read_modes, [self.h_B, self.h_RH, 1 + 2 * self.h_WH])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(read_modes, axis=2)",
                            "Call"
                        ],
                        [
                            "read_modes",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_203": {
                "variable": {
                    "value": "retention_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - free_gates * pre_read_weightings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "retention_prod",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_207": {
                "variable": {
                    "value": "usage_vector_cp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_alloc_and_usage_vectors(pre_write_weightings, pre_read_weightings, pre_usage_vector, free_gates, write_gate)",
                            "Call"
                        ],
                        [
                            "pre_usage_vector + pre_write_weighting - pre_usage_vector * pre_write_weighting",
                            "BinOp"
                        ],
                        [
                            "usage_vector * retention_vector",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_228": {
                "variable": {
                    "value": "alloc_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "alloc_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_242": {
                "variable": {
                    "value": "write_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weightings(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_243": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(erase_vector, 2)",
                            "Call"
                        ],
                        [
                            "erase_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_244": {
                "variable": {
                    "value": "erase_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - write_w * erase_vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "variable": {
                    "value": "write_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_write_weightings(alloc_weightings, write_content_weighting, write_gate, alloc_gate)",
                            "Call"
                        ],
                        [
                            "write_gate * (alloc_gate * alloc_weighting + (1 - alloc_gate) * write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "write_weighting",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self.h_WH, self.h_W], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "write_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_265": {
                "variable": {
                    "value": "read_weightings_stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pre_read_weightings] * self.h_WH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "variable": {
                    "value": "forward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "read_weightings_stacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([pre_read_weightings] * self.h_WH, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_link_matrix(pre_link_matrix, write_weighting, pre_precedence_weighting)",
                            "Call"
                        ],
                        [
                            "link_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_268": {
                "variable": {
                    "value": "backward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "read_weightings_stacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([pre_read_weightings] * self.h_WH, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._update_link_matrix(pre_link_matrix, write_weighting, pre_precedence_weighting)",
                            "Call"
                        ],
                        [
                            "link_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "input_bypass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.bypass_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_w_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, total_signal_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_b_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_signal_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_211": {
                "variable": {
                    "value": "(sorted_usage, free_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * usage_vector_cp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumprod_214": {
                "variable": {
                    "value": "cumprod_sorted_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sorted_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-1 * usage_vector_cp, self.h_N)",
                            "Call"
                        ],
                        [
                            "-1 * sorted_usage",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_stitch_220": {
                "variable": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "corrected_free_list_un",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(corrected_free_list, [-1])]",
                            "List"
                        ]
                    ]
                },
                "data": {
                    "value": "cumprod_sorted_usage_un",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(cumprod_sorted_usage, [-1])]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stitched_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dynamic_stitch(corrected_free_list_un, cumprod_sorted_usage_un, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(stitched_usage, [self.h_B, self.h_N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.h_B, self.h_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_48": {
                "x": {
                    "value": "1 / (self.h_N * self.h_W)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_123": {
                "value": {
                    "value": "np.identity(self.h_N)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "link_matrix_inv_eye",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_130": {
                "value": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "repeat_memory_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([self.h_N], tf.constant(self.h_N, dtype=tf.int32), name='repeat_memory_length')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "'{}'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_199": {
                "input_tensor": {
                    "value": "1 - pre_write_weightings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "input": {
                    "value": "pre_precedence_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_precedence_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_255": {
                "input": {
                    "value": "write_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "write_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "a": {
                    "value": "backward_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._make_read_forward_backward_weightings(link_matrix, pre_read_weightings)",
                            "Call"
                        ],
                        [
                            "tf.matmul(read_weightings_stacked, link_matrix, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "backward_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "tf.expand_dims(read_modes[:, :, self.h_WH + 1:], 3) * forward_weightings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_w_x', (input_size, total_signal_size), initializer=tf.contrib.layers.xavier_initializer(seed=self.seed), collections=['memory_unit', tf.GraphKeys.GLOBAL_VARIABLES], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_217": {
                "tensor": {
                    "value": "corrected_free_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "free_list + self.const_batch_memory_range",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "tensor": {
                    "value": "cumprod_sorted_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumprod(sorted_usage, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "input_tensor": {
                    "value": "tf.expand_dims(read_modes[:, :, :self.h_WH], 3) * backward_weightings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_144": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "write_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "write_weightings",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "input": {
                    "value": "read_modes[:, :, self.h_WH]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_276": {
                "input": {
                    "value": "read_modes[:, :, self.h_WH + 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_274": {
                "input": {
                    "value": "read_modes[:, :, :self.h_WH]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/optimizer.py": {
        "tensorflow": {
            "get_variable_40": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.weight_decay * tf.stack([tf.nn.l2_loss(var) for var in variables])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.optimizer_config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_40": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.optimizer_config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "self.optimizer_config['nesterov']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * self.gradient_clipping",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.gradient_clipping",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_37": {
                "values": {
                    "value": "[tf.nn.l2_loss(var) for var in variables]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self.use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_37": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/utils/holistic_multi_rnn_cell.py": {
        "tensorflow": {
            "concat_95": {
                "variable": {
                    "value": "new_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(new_outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_93": {
                "values": {
                    "value": "new_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(new_states) if self._state_is_tuple else array_ops.concat(new_states, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "'cell_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_85": {
                "variable": {
                    "value": "cur_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, cur_state_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, cell.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/utils/initialization.py": {
        "tensorflow": {
            "constant_24": {
                "value": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(mat)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "adnc/model/utils/normalization.py": {
        "tensorflow": {
            "moments_27": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[weights.get_shape()[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[collection, tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[weights.get_shape()[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[collection, tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "'ln_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "x": {
                    "value": "var + _eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_22": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adnc/model/utils/tf_functions.py": {
        "tensorflow": {
            "softplus_19": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "adnc/model/utils/word_embedding.py": {
        "tensorflow": {
            "Variable_42": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.initialize_random(vocabulary_size, embedding_size, dtype)",
                            "Call"
                        ],
                        [
                            "self.initialize_with_glove(word_idx_dict, embedding_size, tmp_dir, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding_lookup",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/inference_babi_task.py": {
        "tensorflow": {
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_87": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_92": {
                "config": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/inference_cnn_task.py": {
        "tensorflow": {
            "placeholder_69": {
                "variable": {
                    "value": "answer_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[data_set_config['batch_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "candidates_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[data_set_config['batch_size'], dl.y_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "candidates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidates_mask * last_output",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arg_max_75": {
                "variable": {
                    "value": "arg_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(masked_output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(arg_predictions, answer_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(arg_predictions, answer_idx), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_83": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_76": {
                "x": {
                    "value": "arg_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.arg_max(predictions, dimension=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "answer_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [data_set_config['batch_size']], name='labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_87": {
                "config": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/plot_function_babi_task.py": {
        "tensorflow": {
            "Saver_85": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_88": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_91": {
                "config": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/start_training.py": {
        "tensorflow": {
            "global_variables_initializer_84": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_85": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "variable": {
                    "value": "summary_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_88": {
                "variable": {
                    "value": "summary_valid_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "valid_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "variable": {
                    "value": "lstm_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_scale",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(model.trainable_variables[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_90": {
                "variable": {
                    "value": "lstm_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_beta",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(model.trainable_variables[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_99": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_124": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(sp.session_dir, 'summary')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "model.trainable_variables[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "input_tensor": {
                    "value": "model.trainable_variables[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_105": {
                "config": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_111": {
                "checkpoint_dir": {
                    "value": "sp.session_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_116": {
                "checkpoint_dir": {
                    "value": "sp.session_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_204": {
                "value": {
                    "value": "[tf.Summary.Value(tag='wer', simple_value=word_error_rate)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_207": {
                "value": {
                    "value": "[tf.Summary.Value(tag='controller_inf', simple_value=controller_inf)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_209": {
                "value": {
                    "value": "[tf.Summary.Value(tag='memory_inf', simple_value=memory_inf)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_117": {
                "value": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_117": {
                "checkpoint_dir": {
                    "value": "sp.session_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/controller_units/test_custom_lstm_cell.py": {
        "tensorflow": {
            "reset_default_graph_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['input_size'], 4 * config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['input_size'], 4 * config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_85": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [4 * config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [4 * config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_126": {
                "variable": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['input_size'], 4 * config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['input_size'], 4 * config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [4 * config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [4 * config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['input_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "tf_pre_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['cell_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_212": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "pre_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['cell_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/memory_units/test_base_cell.py": {
        "tensorflow": {
            "reset_default_graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, (config['batch_size'], 1, config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, (config['batch_size'], config['read_heads'], config['memory_width']))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(1, 10, (config['batch_size'], 1))",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(1, 10, (config['batch_size'], config['read_heads'], 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, (config['batch_size'], 1, config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 2, (config['batch_size'], config['read_heads'], config['memory_width']))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_108": {
                "variable": {
                    "value": "strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(1, 10, (config['batch_size'], 1))",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(1, 10, (config['batch_size'], config['read_heads'], 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_141": {
                "variable": {
                    "value": "read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/memory_units/test_content_based_cell.py": {
        "tensorflow": {
            "reset_default_graph_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['input_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "weighted_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weighted_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.arange(1, 1 + total_signal_size)] * config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "pre_write_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_150": {
                "variable": {
                    "value": "pre_usage_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_151": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['read_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_163": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_165": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "alloc_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "write_content_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_content_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_211": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_212": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_233": {
                "variable": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_write_gate * (np_alloc_gate * np_alloc_weighting + (1 - np_alloc_gate) * np_write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_234": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], 1, config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, [config['batch_size'], 1, config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_246": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_247": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_248": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_249": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_pre_memory * np_erase_memory + np_add_memory",
                            "BinOp"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "variable": {
                    "value": "read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_301": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_302": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_303": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_305": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/memory_units/test_dnc_cell.py": {
        "tensorflow": {
            "reset_default_graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['input_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "weighted_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weighted_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.arange(1, 1 + total_signal_size)] * config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_165": {
                "variable": {
                    "value": "pre_write_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_167": {
                "variable": {
                    "value": "pre_usage_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_168": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['read_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_182": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_183": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_184": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_232": {
                "variable": {
                    "value": "alloc_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_233": {
                "variable": {
                    "value": "write_content_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_content_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_234": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "alloc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_257": {
                "variable": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_write_gate * (np_alloc_gate * np_alloc_weighting + (1 - np_alloc_gate) * np_write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_258": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], 1, config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_259": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, [config['batch_size'], 1, config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_273": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_274": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_277": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_278": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_279": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_write_gate * (np_alloc_gate * np_alloc_weighting + (1 - np_alloc_gate) * np_write_content_weighting)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_318": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_319": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_320": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_321": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_322": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_323": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_324": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_365": {
                "variable": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_pre_link_matrix",
                            "variable"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_366": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_404": {
                "variable": {
                    "value": "forward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_forward_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_405": {
                "variable": {
                    "value": "backward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_backward_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_406": {
                "variable": {
                    "value": "read_content_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_content_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_407": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.repeat([0.2, 0.3, 0.5], config['batch_size'] * config['read_heads']), [config['batch_size'], config['read_heads'], 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_436": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_437": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_438": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_439": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_440": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/memory_units/test_multi_write_content_based_cell.py": {
        "tensorflow": {
            "reset_default_graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['input_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "weighted_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weighted_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.arange(1, 1 + total_signal_size)] * config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_153": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_154": {
                "variable": {
                    "value": "read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_179": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_180": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_181": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_182": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_183": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/memory_units/test_multi_write_dnc_cell.py": {
        "tensorflow": {
            "reset_default_graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np.ones([config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np_inputs, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config['batch_size'], config['input_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "weighted_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weighted_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.arange(1, 1 + total_signal_size)] * config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_190": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_191": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_194": {
                "variable": {
                    "value": "pre_write_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_195": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "pre_usage_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "free_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_free_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['read_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_198": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['write_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_199": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_244": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_memory * np_erase_memory + np_add_memory",
                            "BinOp"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_245": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, (config['batch_size'], config['read_heads'], config['memory_width']))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_246": {
                "variable": {
                    "value": "strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_strengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(1, 10, (config['batch_size'], config['read_heads'], 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_282": {
                "variable": {
                    "value": "alloc_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_283": {
                "variable": {
                    "value": "write_content_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_content_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_284": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['write_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_285": {
                "variable": {
                    "value": "alloc_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_alloc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([config['batch_size'], config['write_heads'], 1]) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_307": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_memory * np_erase_memory + np_add_memory",
                            "BinOp"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_308": {
                "variable": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_309": {
                "variable": {
                    "value": "write_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 2, [config['batch_size'], config['write_heads'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_310": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, [config['batch_size'], config['write_heads'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_345": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_346": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_347": {
                "variable": {
                    "value": "write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_348": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_349": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_350": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - np.prod(1 - np_pre_write_weightings, axis=1, keepdims=False)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_351": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_353": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_396": {
                "variable": {
                    "value": "link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_pre_link_matrix",
                            "variable"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_397": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_444": {
                "variable": {
                    "value": "forward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_forward_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([config['batch_size'], config['read_heads'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_445": {
                "variable": {
                    "value": "backward_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_backward_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([config['batch_size'], config['read_heads'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_446": {
                "variable": {
                    "value": "read_content_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_content_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_447": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.repeat([0.1], config['batch_size'] * config['read_heads'] * (2 * config['write_heads'] + 1)), [config['batch_size'], config['read_heads'], 1 + 2 * config['write_heads']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_472": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1, (config['batch_size'], config['memory_length'], config['memory_width']))",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_memory * np_erase_memory + np_add_memory",
                            "BinOp"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_473": {
                "variable": {
                    "value": "read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(np_backward_weightings * np.expand_dims(np_read_modes[:, :, :config['write_heads']], 3), axis=2) + np_read_content_weightings * np.expand_dims(np_read_modes[:, :, config['write_heads']], 2) + np.sum(np_forward_weightings * np.expand_dims(np_read_modes[:, :, config['write_heads'] + 1:], 3), axis=2)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_503": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['input_size']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_504": {
                "variable": {
                    "value": "pre_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ],
                        [
                            "np_rng.normal(0, 1, [config['batch_size'], config['memory_length'], config['memory_width']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_505": {
                "variable": {
                    "value": "pre_usage_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_usage_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_506": {
                "variable": {
                    "value": "pre_write_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_write_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - np.prod(1 - np_pre_write_weightings, axis=1, keepdims=False)",
                            "BinOp"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_507": {
                "variable": {
                    "value": "pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_precedence_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['write_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_508": {
                "variable": {
                    "value": "pre_link_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_link_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np.zeros([config['batch_size'], config['write_heads'], config['memory_length'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_509": {
                "variable": {
                    "value": "pre_read_weightings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_pre_read_weightings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([prw_rand] * config['read_heads'], 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np_pre_read_weightings] * config['batch_size'], 0)",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ],
                        [
                            "np_rng.uniform(0, 1 / config['memory_length'], [config['batch_size'], config['read_heads'], config['memory_length']])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/test_mann.py": {
        "tensorflow": {
            "reset_default_graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/utils/test_initialization.py": {
        "tensorflow": {
            "reset_default_graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/utils/test_normalization.py": {
        "tensorflow": {
            "constant_36": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_rng.normal(0, 1, [64, 128])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/adnc/model/utils/test_tf_functions.py": {
        "tensorflow": {
            "constant_30": {
                "variable": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}