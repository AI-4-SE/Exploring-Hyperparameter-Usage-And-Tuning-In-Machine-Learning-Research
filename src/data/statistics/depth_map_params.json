{
    "custom_transforms.py": {
        "torch": {
            "tensor_31": {
                "data": {
                    "value": "sample['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {}
    },
    "error.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NYUDataset('/content/gdrive/My Drive/data/', tfms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "/content/gdrive/My Drive/data/answer.ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "extras/median-filter.py": {
        "torch": {
            "pad_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, self._padding(x), mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.k[0], self.stride[0]).unfold(3, self.k[1], self.stride[1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size()[:4] + (-1,)).median(dim=-1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._padding(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "G_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "G_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 2, 1], [0, 0, 0], [-1, -2, -1]]]])",
                            "Call"
                        ],
                        [
                            "b.to(device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])",
                            "Call"
                        ],
                        [
                            "b.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_64": {
                "variable": {
                    "value": "term_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d.view(-1, n_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "term_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "term_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_98": {
                "variable": {
                    "value": "diff_pow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_pow",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_104": {
                "variable": {
                    "value": "a4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "n_pixels * n_pixels / a3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_122": {
                "variable": {
                    "value": "diff_pow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_pow",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "variable": {
                    "value": "a4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "n_pixels * n_pixels / a3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_145": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_164": {
                "variable": {
                    "value": "diff_pow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_192": {
                "variable": {
                    "value": "diff_pow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(preds) - torch.log(actual_depth)",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ],
                        [
                            "diff_pow / actual_depth",
                            "BinOp"
                        ],
                        [
                            "abs(preds - actual_depth)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_pow",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.pow(diff, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_216": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_221": {
                "variable": {
                    "value": "G_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unnormalize(ds_item[0][None])",
                            "Call"
                        ],
                        [
                            "T(x_bw)[None]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 0, -1], [2, 0, -2], [1, 0, -1]]]])",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(diff_pow, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ],
                        [
                            "a.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_223": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_228": {
                "variable": {
                    "value": "G_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unnormalize(ds_item[0][None])",
                            "Call"
                        ],
                        [
                            "T(x_bw)[None]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([[[[1, 2, 1], [0, 0, 0], [-1, -2, -1]]]])",
                            "Call"
                        ],
                        [
                            "b.to(device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])",
                            "Call"
                        ],
                        [
                            "b.view((1, 1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_230": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(G_x, 2) + torch.pow(G_y, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_47": {
                "input": {
                    "value": "G_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(d_batch, b, padding=1).to(device)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, b, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "actual_depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "actual_depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log10_197": {
                "input": {
                    "value": "a3",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "a2 / n_pixels",
                            "BinOp"
                        ],
                        [
                            "n_pixels * n_pixels / a3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_230": {
                "input": {
                    "value": "G_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(d_batch, b, padding=1).to(device)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, b, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_65": {
                "input": {
                    "value": "d.view(-1, n_pixels).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "scale_1_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], 64, 15, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.input_img_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=9, padding=4, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64 + 64, out_channels=64, kernel_size=5, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "concatenate_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, proc_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.input_img_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=9, padding=4, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=65, out_channels=64, kernel_size=5, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "concatenate_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, proc_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.VGG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg16(pretrained=True).children())[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_30": {
                "input": {
                    "value": "scale_1_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(self.block(x), (x.shape[0], 64, 15, 20))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "input": {
                    "value": "self.block(concatenate_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "512 * 7 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * 15 * 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "64 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "65",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}