{
    "abstract_attack.py": {
        "torch": {
            "median_60": {
                "variable": {
                    "value": "median",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(distances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed + epsilon * update",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "sum_directions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_206": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(batch_size)] + list(self.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_228": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_gradient_step(epsilon, perturbed, update)",
                            "Call"
                        ],
                        [
                            "self.opposite_movement_step(original, perturbed)",
                            "Call"
                        ],
                        [
                            "torch.clamp(perturbed + epsilon * update, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "sample + delta * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(alphas)",
                            "Call"
                        ],
                        [
                            "alphas.view(alphas_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_39": {
                "input": {
                    "value": "torch.tensor(self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_212": {
                "input": {
                    "value": "torch.sum(rv ** 2, dim=axis, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_242": {
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradient_approximation_step(perturbed, num_evals_det, delta, dist_post_update, estimates, page)",
                            "Call"
                        ],
                        [
                            "sum_directions / (num_rvs * self.grad_queries)",
                            "BinOp"
                        ],
                        [
                            "gradf / torch.norm(gradf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_262": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_292": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "perturbed_inputs > unperturbed + alphas",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "unperturbed + alphas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_293": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "projected < unperturbed - alphas",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "unperturbed - alphas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - alphas) * unperturbed + alphas * perturbed_inputs",
                            "BinOp"
                        ],
                        [
                            "torch.where(perturbed_inputs > unperturbed + alphas, unperturbed + alphas, perturbed_inputs)",
                            "Call"
                        ],
                        [
                            "torch.where(projected < unperturbed - alphas, unperturbed - alphas, projected)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_136": {
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradient_approximation_step(perturbed, num_evals_det, delta, dist_post_update, estimates, page)",
                            "Call"
                        ],
                        [
                            "sum_directions / (num_rvs * self.grad_queries)",
                            "BinOp"
                        ],
                        [
                            "gradf / torch.norm(gradf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_212": {
                "input": {
                    "value": "rv ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(range(1, 1 + len(self.shape)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_235": {
                "input": {
                    "value": "torch.mean(fval / self.grad_queries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_239": {
                "input": {
                    "value": "vals * rv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_264": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_188": {
                "size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_235": {
                "input": {
                    "value": "fval / self.grad_queries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_238": {
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * decisions.view(decision_shape) - self.grad_queries",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_264": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_208": {
                "size": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(batch_size)] + list(self.shape)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial.py": {
        "torch": {
            "max_38": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_7": {
                "variable": {
                    "value": "self.unperturbed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "self.perturbed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_31": {
                "input": {
                    "value": "diff.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "diff.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_38": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a - b",
                            "BinOp"
                        ],
                        [
                            "(b - a) / (max_ - min_)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "app.py": {
        "torch": {
            "save_167": {
                "obj": {
                    "value": "additional",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open('{}/{}/raw_data.pkl'.format(OUT_DIR, exp_name), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "brendel_l2.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_81": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_mid[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "input": {
                    "value": "probs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_tt[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "lbls",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_.numpy().argmax(axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10_models/.ipynb_checkpoints/densenet-checkpoint.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=3, stride=1, padding=1, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/' + arch + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_28": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/densenet.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=3, stride=1, padding=1, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/' + arch + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_28": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/googlenet.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/googlenet.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_54": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_74": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channels, ch3x3red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channels, ch5x5red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.branch4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1, branch2, branch3, branch4]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_226": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/inception.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/inception_v3.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_164": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_188": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_226": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_254": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_294": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_320": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_334": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_339": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/mobilenetv2.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_125": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/mobilenet_v2.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/resnet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_138": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_204": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/' + arch + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/resnet_orig.py": {
        "torch": {
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/resnet_orig.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_35": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_models/vgg.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "script_dir + '/state_dicts/' + arch + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "crunch_experiments.py": {
        "torch": {
            "linspace_23": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "D_SMOOTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "D_VANILLA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "D_OUT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_133": {
                "variable": {
                    "value": "D_G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "MC",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "AA",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(eps), NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_46": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_72": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred == true_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "dump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'border_distance': D, 'border_distance_smooth': D_SMOOTH, 'vanilla_distance': D_VANILLA, 'distance_approxgrad': D_G, 'attack_out_distance': D_OUT, 'model_calls': MC, 'adv_acc': AA}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(f'{OUT_DIR}/{exp_name}/crunched.pkl', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_t[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_60": {
                "variable": {
                    "value": "dist_linf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_star - x_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_63": {
                "variable": {
                    "value": "x_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_t > max_limit",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_limit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_star + alpha * dist_linf",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "page.bin_search",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_64": {
                "variable": {
                    "value": "x_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_mid < min_limit",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_limit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_star - alpha * dist_linf",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - alpha) * x_star + alpha * x_t",
                            "BinOp"
                        ],
                        [
                            "torch.where(x_t > max_limit, max_limit, x_t)",
                            "Call"
                        ],
                        [
                            "torch.where(x_mid < min_limit, min_limit, x_mid)",
                            "Call"
                        ],
                        [
                            "interpolation(x_star, x_t, mid)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_88": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_mid[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "variable": {
                    "value": "x_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "project(x_star, x_t, label, theta_det)",
                            "Call"
                        ],
                        [
                            "search_boundary(x_star, x_t, theta_det, label, smoothing)",
                            "Call"
                        ],
                        [
                            "x_t + c * (x_t - x_star) / torch.norm(x_t - x_star)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_tt, 0, 1)",
                            "Call"
                        ],
                        [
                            "search_boundary(x_t, x_tt, theta_det, label, smoothing)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_99": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_119": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_tt[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "x_star - x_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_101": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_114": {
                "input": {
                    "value": "torch.logical_or(x_tt == 1, x_tt == 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_112": {
                "input": {
                    "value": "x_t - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_or_114": {
                "input": {
                    "value": "x_tt == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "x_tt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "debug_hsja_oa.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "defaultparams.py": {
        "torch": {}
    },
    "hopskip.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "dists_post_update",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.compute_distance(unperturbed, perturbed_x) for perturbed_x in perturbed_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(perturbed_inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.compute_distance(unperturbed, out) for out in out_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmin_81": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([self.compute_distance(unperturbed, out) for out in out_inputs])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "sum_directions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "self.sum_directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "self.sum_directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(perturbed_inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_73": {
                "variable": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "decisions == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(highs + lows) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(perturbed_inputs), device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.where(decisions == 0, mids, lows)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_74": {
                "variable": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "decisions == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(highs + lows) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dists_post_update",
                            "variable"
                        ],
                        [
                            "torch.ones(len(perturbed_inputs), device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.where(decisions == 1, mids, highs)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_119": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample + delta * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_66": {
                "input": {
                    "value": "(highs - lows) / thresholds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_133": {
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_directions / num_rvs",
                            "BinOp"
                        ],
                        [
                            "gradf / torch.norm(gradf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_190": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_interface.get_grads(perturbed[None], self.a.true_label)[0]",
                            "Subscript"
                        ],
                        [
                            "sum_directions / n_samples",
                            "BinOp"
                        ],
                        [
                            "(sum_directions + 0.5 * self.sum_directions) / (n_samples + 0.5 * self.num_directions)",
                            "BinOp"
                        ],
                        [
                            "grad / torch.norm(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_213": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_interface.get_grads(perturbed[None], self.a.true_label)[0]",
                            "Subscript"
                        ],
                        [
                            "sum_directions / n_samples",
                            "BinOp"
                        ],
                        [
                            "(sum_directions + 0.5 * self.sum_directions) / (n_samples + 0.5 * self.num_directions)",
                            "BinOp"
                        ],
                        [
                            "grad / torch.norm(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_126": {
                "input": {
                    "value": "torch.mean(fval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "vals * rv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * decisions.view(decision_shape) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_129": {
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * decisions.view(decision_shape) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "img_utils.py": {
        "torch": {
            "load_101": {
                "variable": {
                    "value": "dump",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(data_path, 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "dump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(open(data_path, 'rb'))",
                            "Call"
                        ],
                        [
                            "{'images': images, 'labels': labels}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(data_path, 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "samples[candidates[i]][None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "pred == targets[candidates[i]]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "infomax.py": {
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_29": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x == t",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((), device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s * (x - t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_61": {
                "variable": {
                    "value": "(s, theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_like_68": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(s)",
                            "Call"
                        ],
                        [
                            "float('Inf')",
                            "Method Argument"
                        ],
                        [
                            "float('Inf')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_tensors_126": {
                "variable": {
                    "value": "(alpha, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_like_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_alpha(s, theta, delta, d, eps)",
                            "Call"
                        ],
                        [
                            "get_alpha(s, theta, delta, d, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_tensors_153": {
                "variable": {
                    "value": "(alpha, target_cos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_like_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_alpha(s, theta, delta, d, eps)",
                            "Call"
                        ],
                        [
                            "get_alpha(s, theta, delta, d, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_418": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "Nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_426": {
                "variable": {
                    "value": "ttssee",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(tt, ss, ee)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_428": {
                "variable": {
                    "value": "(llse, lsse, lsee)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "ll.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logspace(s_lo, s_hi, Ns, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_432": {
                "variable": {
                    "value": "ii_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "Nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size + 1",
                            "BinOp"
                        ],
                        [
                            "int(grid_size * 2 * prior_frac) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_450": {
                "variable": {
                    "value": "(Y, T, X, S, E)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(t_lo, t_hi, Nt, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_462": {
                "variable": {
                    "value": "n_tsez",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_tsez",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_n_from_cos(s=lsse, theta=llse, eps=lsee, target_cos=target_cos, delta=delta, d=d).permute(1, 2, 3, 0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(n_tsez, max=100000000.0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "100000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(s)",
                            "Call"
                        ],
                        [
                            "float('Inf')",
                            "Method Argument"
                        ],
                        [
                            "float('Inf')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(theta)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(d, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(n, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.to(alpha.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "target_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_cos, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "target_cos.to(alpha.device)",
                            "Call"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_416": {
                "variable": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(prev_t - prior_frac, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "t_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(prev_t + prior_frac, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "Nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size + 1",
                            "BinOp"
                        ],
                        [
                            "int(grid_size * 2 * prior_frac) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logspace_421": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "s_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(log10(prev_s) - prior_frac * 3, -1.0)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "s_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(log10(prev_s) + prior_frac * 3, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "Ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "31",
                            "int"
                        ],
                        [
                            "int(prior_frac * 30) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_424": {
                "variable": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "e_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_e",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "e_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_e",
                            "variable"
                        ]
                    ]
                },
                "steps": {
                    "value": "Ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_434": {
                "variable": {
                    "value": "ttss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(tt, ss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_508": {
                "variable": {
                    "value": "ptse_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ptse_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptse",
                            "variable"
                        ],
                        [
                            "torch.clamp(ptse_x, CLIP_MIN, CLIP_MAX)",
                            "Call"
                        ],
                        [
                            "ptse_x / ptse_x.sum(axis=(1, 3, 4), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ptse",
                            "variable"
                        ]
                    ]
                },
                "min": {
                    "value": "CLIP_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "CLIP_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 1e-07",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmin_525": {
                "variable": {
                    "value": "iz_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ptse_x.reshape(Nt, Ns, Ne, 1) * n_tsez).sum(axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_625": {
                "variable": {
                    "value": "a_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a_x.cpu()",
                            "Call"
                        ],
                        [
                            "Hy + Htse - Hytse",
                            "BinOp"
                        ],
                        [
                            "Hy + Hts - Hyts",
                            "BinOp"
                        ],
                        [
                            "Hy + Ht - Hyt",
                            "BinOp"
                        ],
                        [
                            "Hy + Hs - Hys",
                            "BinOp"
                        ],
                        [
                            "-n_x",
                            "UnaryOp"
                        ],
                        [
                            "-n_x",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "where_22": {
                "condition": {
                    "value": "torch.isinf(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * torch.sign(x) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * torch.tanh(2.0 * x) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_72": {
                "input": {
                    "value": "-theta[ix_inf] ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(d, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_132": {
                "input": {
                    "value": "1.0 + (d - 1) / (n[ix_pos] * alpha[ix_pos] ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_183": {
                "condition": {
                    "value": "x == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((), device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((), device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "dist_linf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(unperturbed - perturbed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_231": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "perturbed > max_limit",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_limit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unperturbed + (1 - xx) * dist_linf",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_232": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "batch < min_limit",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_limit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unperturbed - (1 - xx) * dist_linf",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - xx) * perturbed + xx * unperturbed",
                            "BinOp"
                        ],
                        [
                            "torch.where(perturbed > max_limit, max_limit, perturbed)",
                            "Call"
                        ],
                        [
                            "torch.where(batch < min_limit, min_limit, batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_241": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "batch.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "variable": {
                    "value": "batch_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch + model_interface.smoothing_noise * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(batch_, model_interface.bounds[0], model_interface.bounds[1])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "model_interface.bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "model_interface.bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_426": {
                "*tensors": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(t_lo, t_hi, Nt, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logspace(s_lo, s_hi, Ns, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_452": {
                "*size": {
                    "value": "(1, Nt, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_453": {
                "*size": {
                    "value": "(1, 1, 1, Ns, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_454": {
                "*size": {
                    "value": "(1, 1, 1, 1, Ne)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_648": {
                "variable": {
                    "value": "yj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "yj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.bernoulli(pp[j_amax]).long()",
                            "Call"
                        ],
                        [
                            "model_interface.sample_bernoulli(pj).long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(yj, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_71": {
                "input": {
                    "value": "x_do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(theta[ix_fin] - 1.0 / (2 * s[ix_fin])) / sqrt(2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_96": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(d, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_183": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "cropped_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b[x_start[i]:x_end[i], y_start[i]:y_end[i]] for (i, b) in enumerate(batch)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_434": {
                "*tensors": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(t_lo, t_hi, Nt, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logspace(s_lo, s_hi, Ns, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_524": {
                "input": {
                    "value": "(pt_x.squeeze() * ii_t).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_627": {
                "condition": {
                    "value": "a_x >= a_min_to_sample",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randint_628": {
                "low": {
                    "value": "len(jj_top)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[queries]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bernoulli_637": {
                "variable": {
                    "value": "yj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pp[j_amax]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_228": {
                "input": {
                    "value": "unperturbed - perturbed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_257": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_260": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output['nn_tmap_est'][-(window_size + 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_377": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn[1:] - nn[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "input": {
                    "value": "2.0 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "yyj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_250": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - model_interface.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(batch))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_252": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - model_interface.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(batch))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_384": {
                "variable": {
                    "value": "tse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output['ttse_max'][-window_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_592": {
                "variable": {
                    "value": "(n_yx, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "n_yxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pts_yxz * n_ytxsz[..., iz_lo:iz_up]).sum(axis=(1, 3), keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_269": {
                "*size": {
                    "value": "xx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_378": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(nn[1:] - nn[:-1])",
                            "Call"
                        ],
                        [
                            "torch.abs(tse[1:] - tse[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_379": {
                "input": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(output['nn_tmap_est'][-(window_size + 1):])",
                            "Call"
                        ],
                        [
                            "[get_n_from_cos(target_cos, theta=tmax_hi - tmax_lo, s=smax, eps=emax, delta=delta, d=d) for (smax, emax) in tse[:, 1:]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_395": {
                "variable": {
                    "value": "tse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output['ttse_max'][-(window_size + 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log10_396": {
                "variable": {
                    "value": "tse[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tse[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_397": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tse[1:] - tse[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_611": {
                "variable": {
                    "value": "(n_ytxsz, iz_ytxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "n_ytxsz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_606": {
                "variable": {
                    "value": "iz_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_yx.sum(axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_398": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(nn[1:] - nn[:-1])",
                            "Call"
                        ],
                        [
                            "torch.abs(tse[1:] - tse[:-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_608": {
                "variable": {
                    "value": "iz_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ii_t.reshape(1, Nt, 1, 1) * pt_yx).sum(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_612": {
                "input": {
                    "value": "n_ytxsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_tsz.reshape(1, Nt, 1, Ns, Nz)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "iz_ytxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_583": {
                "input": {
                    "value": "torch.max((i_t_yxs * ps_yx).sum(axis=3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_582": {
                "input": {
                    "value": "i_t_yxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ii_t.reshape(1, Nt, 1, 1) * pt_yxs).sum(axis=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_583": {
                "input": {
                    "value": "(i_t_yxs * ps_yx).sum(axis=3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "merge_dumps.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_20": {
                "obj": {
                    "value": "merged_dump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dump1 + dump2",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "open('{}/raw_data.pkl'.format(out_path), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_models/mnist_arch.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_10": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1440",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_48": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_82": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_15": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_16": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_factory.py": {
        "torch": {
            "exp_82": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "t_images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.smoothing_noise * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images_, 0, 1)",
                            "Call"
                        ],
                        [
                            "images.unsqueeze(1).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "images.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack([transform(i) for i in images_])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t_images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_39": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "images.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(images, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[transform(i) for i in images_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "img_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[transform(i) for i in images]",
                            "ListComp"
                        ],
                        [
                            "[transform(i) for i in images]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_44": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[images.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_45": {
                "variable": {
                    "value": "flip_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "mnist_models/mnist_model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "mnist_models/cw_mnist_cnn.pt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(self.beta * logits)",
                            "Call"
                        ],
                        [
                            "probs / torch.sum(probs, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "variable": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.smoothing_noise * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images_, 0, 1)",
                            "Call"
                        ],
                        [
                            "images.unsqueeze(1).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "images.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack([transform(i) for i in images_])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_101": {
                "outputs": {
                    "value": "t_outs[i, true_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(images_, requires_grad=True, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "img_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[transform(i) for i in images]",
                            "ListComp"
                        ],
                        [
                            "[transform(i) for i in images]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "data": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_165": {
                "f": {
                    "value": "f'training/data/model_dumps/{key}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "cropped_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b[x_start[i]:x_end[i], y_start[i]:y_end[i]] for (i, b) in enumerate(images)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_168": {
                "f": {
                    "value": "f'training/data/model_dumps/{key}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "interpolate_63": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_171": {
                "f": {
                    "value": "f'training/data/model_dumps/{key}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "randint_56": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - self.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(images))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_58": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - self.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(images))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(images_)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "self.predict(resized)",
                            "Call"
                        ],
                        [
                            "self.predict(images)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_174": {
                "f": {
                    "value": "f'training/data/model_dumps/{key}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_177": {
                "f": {
                    "value": "f'data/model_dumps/{key}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "model_interface.py": {
        "torch": {
            "stack_198": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_35": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch_)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=resized)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "probs[:, label]",
                            "Subscript"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_147": {
                "variable": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch_)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=resized)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "probs[:, label]",
                            "Subscript"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(images).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_210": {
                "variable": {
                    "value": "freqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "id.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "N * outs.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "batch.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "batch_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch + self.smoothing_noise * rv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(batch_, self.bounds[0], self.bounds[1])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "self.bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_213": {
                "input": {
                    "value": "freqs[:, r[:a.true_label] + r[a.true_label + 1:]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "cropped_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b[x_start[i]:x_end[i], y_start[i]:y_end[i]] for (i, b) in enumerate(batch)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "arange_148": {
                "start": {
                    "value": "len(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_batch.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_116": {
                "variable": {
                    "value": "rand_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.n_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(batch), num_queries)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch_)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=resized)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "probs[:, label]",
                            "Subscript"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_152": {
                "start": {
                    "value": "len(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_209": {
                "start": {
                    "value": "outs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_95": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - self.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(batch))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_97": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size + 1 - self.crop_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, len(batch))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_120": {
                "size": {
                    "value": "(len(batch), num_queries)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_132": {
                "variable": {
                    "value": "decisions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch_)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=resized)",
                            "Call"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ],
                        [
                            "probs[:, label]",
                            "Subscript"
                        ],
                        [
                            "self.get_probs_(images=batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_134": {
                "variable": {
                    "value": "decisions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "plot_aistats.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot_icml.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_834": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :57], D[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :57], D[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_822": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :57], D[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_823": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C[:, :57], C[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "adv_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adv_acc[:, :57], adv_acc[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_707": {
                "variable": {
                    "value": "mean_adv_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AA[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([adv_acc[:, :57], adv_acc[:, 58:]], dim=1)",
                            "Call"
                        ],
                        [
                            "AA[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([adv_acc[:, :57], adv_acc[:, 58:]], dim=1)",
                            "Call"
                        ],
                        [
                            "adv_acc[:, :20]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_708": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_771": {
                "variable": {
                    "value": "adv_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adv_acc[:, :57], adv_acc[:, 58:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_778": {
                "variable": {
                    "value": "mean_adv_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AA[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([adv_acc[:, :57], adv_acc[:, 58:]], dim=1)",
                            "Call"
                        ],
                        [
                            "AA[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([adv_acc[:, :57], adv_acc[:, 58:]], dim=1)",
                            "Call"
                        ],
                        [
                            "adv_acc[:, :20]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_779": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C[:, :26], C[:, 27:57], C[:, 59:61], C[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C[:, :26], C[:, 27:57], C[:, 59:61], C[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C[:, :26], C[:, 27:57], C[:, 59:61], C[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C[:, :26], C[:, 27:57], C[:, 59:61], C[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :26], D[:, 27:57], D[:, 59:61], D[:, 62:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "plot_multimodel.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_37": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "x_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search_boundary(x_star, x_t, theta_det, label, models)",
                            "Call"
                        ],
                        [
                            "x_t + c * (x_t - x_star) / torch.norm(x_t - x_star)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_tt, 0, 1)",
                            "Call"
                        ],
                        [
                            "search_boundary(x_t, x_tt, theta_det, label, models)",
                            "Call"
                        ],
                        [
                            "project(x_star, x_t, label, 1.0 / 28 * 28 * 28, models)",
                            "Call"
                        ],
                        [
                            "project(x_star, x_t, label, 1.0 / 28 * 28 * 28, models)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(points)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_models_arr",
                            "variable"
                        ],
                        [
                            "n_models_arr",
                            "variable"
                        ],
                        [
                            "75",
                            "int"
                        ],
                        [
                            "40",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "len(points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(points)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_312": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_models_arr",
                            "variable"
                        ],
                        [
                            "n_models_arr",
                            "variable"
                        ],
                        [
                            "75",
                            "int"
                        ],
                        [
                            "40",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "len(points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "num_correct[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.argmax(x) == label for x in probs_vec]",
                            "ListComp"
                        ],
                        [
                            "[torch.argmax(x) == label for x in probs_vec]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "num_correct[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.argmax(x) == label for x in probs_vec]",
                            "ListComp"
                        ],
                        [
                            "[torch.argmax(x) == label for x in probs_vec]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "all_70": {
                "input": {
                    "value": "torch.logical_or(x_tt == 1, x_tt == 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_103": {
                "input": {
                    "value": "diary.initial_projection - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_162": {
                "input": {
                    "value": "diary.initial_projection - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_248": {
                "input": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_models, len(points))",
                            "Call"
                        ],
                        [
                            "torch.zeros(n_models, len(points))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_317": {
                "input": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_models, len(points))",
                            "Call"
                        ],
                        [
                            "torch.zeros(n_models, len(points))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "x_t - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "x_tt - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_167": {
                "input": {
                    "value": "x_tt - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_246": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_315": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_70": {
                "input": {
                    "value": "x_tt == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "x_tt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "plotting/plot_comparemodels.py": {
        "torch": {
            "load_15": {
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "plotting/plot_experiments.py": {
        "torch": {
            "zeros_114": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(raws), NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "D_OUT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(len(raws), NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ],
                        [
                            "D.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "AA",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(raws), len(eps), NUM_ITERATIONS + 1, NUM_IMAGES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "MC",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(len(raws), NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ],
                        [
                            "D.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "SS",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(len(raws), NUM_ITERATIONS + 1, NUM_IMAGES), device=device)",
                            "Call"
                        ],
                        [
                            "D.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_21": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_mid[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "input": {
                    "value": "probs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.get_probs(x_tt[None])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_103": {
                "input": {
                    "value": "x_t - x_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_132": {
                "input": {
                    "value": "x_star - x_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_133": {
                "input": {
                    "value": "x_star - x_tt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "plotting/plot_timings.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "popskip.py": {
        "torch": {
            "zeros_211": {
                "variable": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed + epsilon * update",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_209": {
                "variable": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed + epsilon * update",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_66": {
                "input": {
                    "value": "perturbed + 0.5 * (perturbed - original)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_68": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(original - perturbed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_187": {
                "input": {
                    "value": "torch.tensor(dists)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_226": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_interface.get_grads(perturbed[None], self.a.true_label)[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_168": {
                "obj": {
                    "value": "unperturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open('dumps/unperturbed.pkl', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "perturbed_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_inputs",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "open('dumps/perturbed.pkl', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_205": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "original - perturbed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_161": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "popskip_human.py": {
        "torch": {
            "zeros_189": {
                "variable": {
                    "value": "decisions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_evals)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_204": {
                "variable": {
                    "value": "sum_directions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals * rv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_193": {
                "variable": {
                    "value": "perturbed_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample + delta * rv[i]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed_1, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "variable": {
                    "value": "perturbed_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample - delta * rv[i]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed_2, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmin_175": {
                "input": {
                    "value": "torch.tensor(dists)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_200": {
                "input": {
                    "value": "torch.mean(fval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_206": {
                "input": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_directions / num_evals",
                            "BinOp"
                        ],
                        [
                            "gradf / torch.norm(gradf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_156": {
                "obj": {
                    "value": "unperturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open('dumps/unperturbed.pkl', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "perturbed_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_inputs",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "open('dumps/perturbed.pkl', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_200": {
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * decisions.view(decision_shape) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_203": {
                "input": {
                    "value": "fval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * decisions.view(decision_shape) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_149": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchmodels.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_10": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.extractor(x)",
                            "Call"
                        ],
                        [
                            "x.view(len(x), -1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.extractor(x)",
                            "Call"
                        ],
                        [
                            "x.view(len(x), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_15": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_16": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "speed_test.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "sys.argv[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/train_mnist.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('data', train=True, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('data', train=False, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_19": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1440",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_57": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{path}_network.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_91": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1440)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 784)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_135": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_24": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_63": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_64": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{path}_model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{path}_optimizer.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "nll_loss_155": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(data)",
                            "Call"
                        ],
                        [
                            "network(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}