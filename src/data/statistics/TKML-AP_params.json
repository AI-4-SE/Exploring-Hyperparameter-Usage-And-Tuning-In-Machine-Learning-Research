{
    "utils.py": {
        "sklearn": {
            "average_precision_score_241": {
                "y_true": {
                    "value": "y_true[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_scores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_320": {
                "y_true": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sort(np.array(gt_df.iloc[:, image_num], dtype=int))",
                            "Call"
                        ],
                        [
                            "gt[clf_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sort(np.array(scores_df.iloc[:, image_num], dtype=float))[-top_num:]",
                            "Subscript"
                        ],
                        [
                            "np.sort(np.array(scores_df.iloc[:, image_num], dtype=float))[-top_num:]",
                            "Subscript"
                        ]
                    ]
                },
                "normalize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_128": {
                "ndarray": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(object_categories))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attack.py": {
        "torch": {
            "SGD_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "purtabed_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "purtabed_img_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "modifier_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "iter(val_loader).next()[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * purtabed_out - (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_56": {
                "variable": {
                    "value": "(lambda_l, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "real - purtabed_out",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "label.shape[1] - k_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda_l[:, -1] + 1 / (label.shape[1] - k_value) * torch.sum(torch.max(torch.zeros(t_value.shape).to(device), t_value - lambda_l[:, -1]))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ],
                        [
                            "loss0 + loss1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_125": {
                "variable": {
                    "value": "(lamb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "purtabed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_126": {
                "variable": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * (lamb[:, -1] - purtabed_out)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(tlab * (lamb[:, -1] - purtabed_out), min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_131": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tie",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "remove_tier_para / 2 * torch.sum(torch.square(1 - tlab * purtabed_out), [1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "torch.square(1 - tlab * purtabed_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "torch.max(torch.zeros(t_value.shape).to(device), t_value - lambda_l[:, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_130": {
                "input": {
                    "value": "1 - tlab * purtabed_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_442": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_43": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "max_59": {
                "input": {
                    "value": "torch.zeros(t_value.shape).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_117": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_120": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_47": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "t_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_182": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "modifiered",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_214": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_337": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_392": {
                "ndarray": {
                    "value": "img_1_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(3, 3), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_1_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_394": {
                "ndarray": {
                    "value": "img_2_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(5, 5), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_2_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_396": {
                "ndarray": {
                    "value": "img_3_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(7, 7), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_3_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baseline_attacks.py": {
        "torch": {
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "purtabed_img_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "modifier_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "variable": {
                    "value": "max_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * F - (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_211": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(torch.tanh(timg) * boxmul + boxplus)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "r_tot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "timg.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "iter(val_loader).next()[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_149": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - tlab) * purtabed_out - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "other",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * purtabed_out + (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(real - other, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_184": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, class_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(timg.size()[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "gradients_top",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobian(top_F, purtabed_img, k_value + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_223": {
                "variable": {
                    "value": "gradients_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobian(max_F, purtabed_img, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_235": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(torch.tanh(timg) * boxmul + boxplus)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_151": {
                "input": {
                    "value": "real - other",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_139": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_184": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, class_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_609": {
                "variable": {
                    "value": "targets_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(targets_zeros).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_143": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_201": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "*size": {
                    "value": "timg.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_229": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.norm(gradients_top[idx, k, ...] - gradients_max[idx, 0, ...])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_232": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.zeros(timg.size()[1:])).to(device)",
                            "Call"
                        ],
                        [
                            "w + (gradients_top[idx, k, ...] - gradients_max[idx, 0, ...]) * norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_233": {
                "input": {
                    "value": "r_tot + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_204": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "all_228": {
                "input": {
                    "value": "torch.eq(gradients_top[idx, k, ...], gradients_max[idx, 0, ...])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_229": {
                "input": {
                    "value": "gradients_top[idx, k, ...] - gradients_max[idx, 0, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_232": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "f + (F[idx, p[0][k]] - F[idx, max_label]) * norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_362": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "ndarray": {
                    "value": "modifiered",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_392": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_505": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_558": {
                "ndarray": {
                    "value": "img_1_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(3, 3), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_1_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_560": {
                "ndarray": {
                    "value": "img_2_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(5, 5), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_2_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_562": {
                "ndarray": {
                    "value": "img_3_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.GaussianBlur(purtabed_img_out[0], ksize=(7, 7), sigmaX=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_3_ori, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_228": {
                "input": {
                    "value": "gradients_top[idx, k, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "gradients_max[idx, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "zeros_32": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 80)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_metrics.py": {
        "torch": {}
    },
    "main_attack.py": {
        "torch": {
            "is_available_81": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_90": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_train, instances_path_train, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), CutoutPIL(cutout_factor=0.5), RandAugment(), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_val, instances_path_val, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='train', download=download_data, transform=transformations, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_240": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_267": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_209": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_210": {
                "tensors": {
                    "value": "[transforms.Normalize(mean=mean, std=std)(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_274": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/inception.py": {
        "torch": {
            "MaxPool2d_96": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_99": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_114": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_187": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_244": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_278": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_327": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_415": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_445": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_452": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_454": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_470": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_471": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_476": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_123": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.rvs(m.weight.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/projection.py": {
        "torch": {
            "sqrt_28": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(torch.sum(torch.square(eta), reduc_ind, keepdims=True), min=avoid_zero_div)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "div(eps, norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "input": {
                    "value": "torch.sum(torch.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "avoid_zero_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_28": {
                "input": {
                    "value": "torch.square(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "reduc_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.shape)))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_35": {
                "input": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "torch.sign(eta) * torch.clamp(torch.abs(eta), max=eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_35": {
                "input": {
                    "value": "torch.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_28": {
                "input": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "torch.sign(eta) * torch.clamp(torch.abs(eta), max=eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_35": {
                "input": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "torch.sign(eta) * torch.clamp(torch.abs(eta), max=eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {}
    },
    "plot_attack.py": {
        "torch": {
            "SGD_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "purtabed_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "purtabed_img_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "modifier_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "iter(val_loader).next()[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * purtabed_out - (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_57": {
                "variable": {
                    "value": "(lambda_l, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "real - purtabed_out",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "label.shape[1] - k_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda_l[:, -1] + 1 / (label.shape[1] - k_value) * torch.sum(torch.max(torch.zeros(t_value.shape).to(device), t_value - lambda_l[:, -1]))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ],
                        [
                            "loss0 + loss1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_132": {
                "variable": {
                    "value": "(lamb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "purtabed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_133": {
                "variable": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * (lamb[:, -1] - purtabed_out)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(tlab * (lamb[:, -1] - purtabed_out), min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_138": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tie",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "remove_tier_para / 2 * torch.sum(torch.square(1 - tlab * purtabed_out), [1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "torch.square(1 - tlab * purtabed_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('./result/{}/{}/{}/eps_{}/perturbation_{}.npy'.format(args.dataset, args.label_difficult, args.app, args.eps, args.k_value))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.max(torch.zeros(t_value.shape).to(device), t_value - lambda_l[:, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_123": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_137": {
                "input": {
                    "value": "1 - tlab * purtabed_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_483": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_44": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "max_60": {
                "input": {
                    "value": "torch.zeros(t_value.shape).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_127": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_48": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "t_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "ndarray": {
                    "value": "modifiered",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_223": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_361": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "plot_baseline_attacks.py": {
        "torch": {
            "SGD_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': modifier}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "purtabed_img_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "modifier_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "argmax_217": {
                "variable": {
                    "value": "max_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * F - (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_218": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(torch.tanh(timg) * boxmul + boxplus)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "r_tot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "timg.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "iter(val_loader).next()[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_149": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - tlab) * purtabed_out - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "other",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tlab * purtabed_out + (1 - tlab) * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(real - other, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_189": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, class_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(timg.size()[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "gradients_top",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobian(top_F, purtabed_img, k_value + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_230": {
                "variable": {
                    "value": "gradients_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobian(max_F, purtabed_img, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_242": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(torch.tanh(timg) * boxmul + boxplus)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ],
                        [
                            "model(purtabed_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_151": {
                "input": {
                    "value": "real - other",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_441": {
                "variable": {
                    "value": "global_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('./result/{}/{}/{}/eps_{}/perturbation_{}.npy'.format(args.dataset, args.label_difficult, args.app, args.eps, args.k_value))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_139": {
                "input": {
                    "value": "modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, class_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_566": {
                "variable": {
                    "value": "targets_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(targets_zeros).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_143": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "tanh_208": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "timg.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_235": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.norm(gradients_top[idx, k, ...] - gradients_max[idx, 0, ...])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_238": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.zeros(timg.size()[1:])).to(device)",
                            "Call"
                        ],
                        [
                            "w + (gradients_top[idx, k, ...] - gradients_max[idx, 0, ...]) * norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_240": {
                "input": {
                    "value": "r_tot + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_211": {
                "input": {
                    "value": "timg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "all_234": {
                "input": {
                    "value": "torch.eq(gradients_top[idx, k, ...], gradients_max[idx, 0, ...])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_235": {
                "input": {
                    "value": "gradients_top[idx, k, ...] - gradients_max[idx, 0, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_238": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "f + (F[idx, p[0][k]] - F[idx, max_label]) * norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_288": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_295": {
                "ndarray": {
                    "value": "modifiered",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_317": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_445": {
                "input": {
                    "value": "data + global_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_234": {
                "input": {
                    "value": "gradients_top[idx, k, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "gradients_max[idx, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "plot_main_attack.py": {
        "torch": {
            "is_available_81": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_90": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_train, instances_path_train, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), CutoutPIL(cutout_factor=0.5), RandAugment(), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_val, instances_path_val, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='train', download=download_data, transform=transformations, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_268": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_210": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_211": {
                "tensors": {
                    "value": "[transforms.Normalize(mean=mean, std=std)(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_275": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot_main_attack_COCO.py": {
        "torch": {
            "is_available_81": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_90": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_train, instances_path_train, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), CutoutPIL(cutout_factor=0.5), RandAugment(), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_val, instances_path_val, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='train', download=download_data, transform=transformations, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_268": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_210": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_211": {
                "tensors": {
                    "value": "[transforms.Normalize(mean=mean, std=std)(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_275": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot_ta.py": {
        "torch": {
            "is_available_60": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_149": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_150": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_67": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot_ua.py": {
        "torch": {
            "is_available_60": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_149": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_150": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_67": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plot_uap.py": {
        "torch": {
            "is_available_64": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_73": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_train, instances_path_train, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), CutoutPIL(cutout_factor=0.5), RandAugment(), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "COCO_val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(data_path_val, instances_path_val, transforms.Compose([transforms.Resize((args.image_size, args.image_size)), transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(model.parameters())[:-1], 'lr': lr[0], 'momentum': 0.9}, {'params': list(model.parameters())[-1], 'lr': lr[1], 'momentum': 0.9}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='train', download=download_data, transform=transformations, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VOC_dataset_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PascalVOC_Dataset(data_dir, year='2012', image_set='val', download=download_data, transform=transformations_valid, target_transform=encode_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_212": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model-{}.pth'.format(num))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_190": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_192": {
                "tensors": {
                    "value": "[transforms.Normalize(mean=mean, std=std)(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "unsqueeze_21": {
                "variable": {
                    "value": "column",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "column",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_33": {
                "variable": {
                    "value": "y_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(y.shape).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_34": {
                "variable": {
                    "value": "y_not_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(y.shape).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "exp_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.neg(sub_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_46": {
                "variable": {
                    "value": "sparse_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.neg(sub_matrix))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "truth_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_and(y_i, y_not_i).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_47": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(exp_matrix, truth_matrix)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "y_i_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_i.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "y_i_bar_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_not_i.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_52": {
                "variable": {
                    "value": "normalizers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_i_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(y_i.float(), 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_i_bar_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(y_not_i.float(), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(sums[normalizers != 0], normalizers[normalizers != 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_221": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sigmoid_222": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_and_23": {
                "input": {
                    "value": "column",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(a, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(b, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(b, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_33": {
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "neg_42": {
                "input": {
                    "value": "sub_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_sub(y_pre, y_pre)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_56": {
                "input": {
                    "value": "sums[normalizers != 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normalizers[normalizers != 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sigmoid_95": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'model-{}.pth'.format(model_num))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}