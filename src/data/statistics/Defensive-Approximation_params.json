{
    "approximate_convolution_layer.py": {
        "torch": {
            "pad_43": {
                "variable": {
                    "value": "X_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding[0], padding[0], padding[0], padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.out_channels, self.n_channels, self.kernel_size[0], self.kernel_size[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((m, n_C, n_H, n_W))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_H, n_W))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "dA_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(m, n_C_prev, n_H_prev, n_W_prev)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "dW",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_C, n_C_prev, f, f)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_71": {
                "variable": {
                    "value": "X_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_in",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "dA_prev_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dA_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((m, n_C_prev, n_H_prev, n_W_prev))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_116": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "approximate_fully_connected_layer.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "appx_mul(input, np.transpose(weight)) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_43": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}